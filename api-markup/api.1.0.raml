#%RAML 1.0
title: 2015 HMIS API
version: 1.0.1
mediaType: application/json
protocols:
  - HTTPS
baseUri: 'https://www.hmislynk.com/hmis-clientapi-v2015/rest'
securitySchemes:
  oauth_2_0:
    description: |
      The HMIS API supports OAuth 2.0 for authenticating all API requests.
    type: OAuth 2.0
    settings:
      authorizationUri: 'https://hmislynk.com/hmis-authorization-service/rest/authorize'
      accessTokenUri: 'https://hmislynk.com/hmis-authorization-service/rest/token'
      authorizationGrants:
        - password
      scopes:
        - user
        - administrator
    describedBy:
      responses:
        '401':
          description: |
            Bad or expired token. This can happen if the user or the HMIS
            revoked or expired an access token. To fix, you should re-
            authenticate the user.
        '403':
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
      headers:
        Authorization:
          description: |
            Used to send a valid OAuth 2 access token. Do not use
            an "access_token" query string parameter.
          type: string
types:
  affiliation_id_json:
    type: object
    properties:
      affiliation:
        type: object
        properties:
          affiliationId:
            type: string
          resprojectid:
            type: string
          dateCreated:
            type: string
          dateUpdated:
            type: string
  affiliations_ids_json:
    type: object
    properties:
      affiliations:
        type: object
        properties:
          pagination:
            type: object
            properties:
              from:
                type: integer
              returned:
                type: integer
              total:
                type: integer
              maximum:
                type: integer
              sort:
                type: object
          affiliations:
            type: array
            items:
              type: object
              properties:
                affiliationId:
                  type: string
                  required: false
                resprojectid:
                  type: string
                  required: false
                dateCreated:
                  type: string
                  required: false
  affiliations_json:
    type: object
    properties:
      affiliation:
        type: object
        properties:
          resprojectid:
            type: string
  client_id_json:
    type: object
    properties:
      client:
        type: object
        properties:
          clientId:
            type: string
          firstName:
            type: string
          middleName:
            type: string
          lastName:
            type: string
          nameSuffix:
            type: string
          nameDataQuality:
            type: integer
          ssn:
            type: string
          ssnDataQuality:
            type: integer
          dob:
            type: integer
          dobDataQuality:
            type: integer
          race:
            type: integer
          ethnicity:
            type: integer
          gender:
            type: integer
          otherGender:
            type: string
          veteranStatus:
            type: string
          phoneNumber:
            type: string
          emailAddress:
            type: string
  clients_ids_json:
    type: string
  clients_json:
    type: object
    properties:
      client:
        type: object
        properties:
          firstName:
            type: string
          middleName:
            type: string
          lastName:
            type: string
          nameSuffix:
            type: string
          nameDataQuality:
            type: integer
          ssn:
            type: string
          ssnDataQuality:
            type: integer
          dob:
            type: integer
          dobDataQuality:
            type: integer
          race:
            type: integer
          ethnicity:
            type: integer
          gender:
            type: integer
          otherGender:
            type: string
          veteranStatus:
            type: integer
          sourceSystemId:
            type: string
            required: false
          phoneNumber:
            type: string
          emailAddress:
            type: string
  contact_id_json:
    type: object
    properties:
      contact:
        type: object
        properties:
          contactId:
            type: string
          contactLocation:
            type: integer
  contact_ids_json:
    type: object
    properties:
      contacts:
        type: object
        properties:
          pagination:
            type: object
            properties:
              from:
                type: integer
              returned:
                type: integer
              total:
                type: integer
              maximum:
                type: integer
              sort:
                type: object
          contacts:
            type: array
            items:
              type: object
              properties:
                contactId:
                  type: string
                contactLocation:
                  type: integer
  contact_json:
    type: object
    properties:
      contact:
        type: object
        properties:
          contactLocation:
            type: integer
  dateofengagements_id_json:
    type: object
    properties:
      dateofengagement:
        type: object
        properties:
          dateofengagementId:
            type: string
          dateofengagement:
            type: string
  dateofengagements_ids_json:
    type: object
    properties:
      dateofengagements:
        type: object
        properties:
          pagination:
            type: object
            properties:
              from:
                type: integer
              returned:
                type: integer
              total:
                type: integer
              maximum:
                type: integer
              sort:
                type: object
          dateofengagements:
            type: array
            items:
              type: object
              properties:
                dateofengagementId:
                  type: string
                  required: false
                dateofengagement:
                  type: string
                  required: false
  dateofengagements_json:
    type: object
    properties:
      dateofengagement:
        type: object
        properties:
          dateofengagement:
            type: string
  disabilities_id_json:
    type: object
    properties:
      disabilities:
        type: object
        properties:
          disabilitiesId:
            type: string
          disabilitytype:
            type: integer
          disabilityresponse:
            type: integer
          indefiniteandimpairs:
            type: integer
          documentationonfile:
            type: integer
          receivingservices:
            type: integer
          pathhowconfirmed:
            type: integer
          pathsmiinformation:
            type: integer
          tcellcountavailable:
            type: integer
          tcellcount:
            type: integer
          tcellcountsource:
            type: string
          viralLoadAvailable:
            type: integer
          viralLoad:
            type: integer
          viralLoadSource:
            type: string
          informationDate:
            type: string
  disabilities_ids_json:
    type: object
    properties:
      disabilitiesList:
        type: object
        properties:
          pagination:
            type: object
            properties:
              from:
                type: integer
              returned:
                type: integer
              total:
                type: integer
              maximum:
                type: integer
              sort:
                type: object
          disabilitiesList:
            type: array
            items:
              type: object
              properties:
                disabilitiesId:
                  type: string
                disabilitytype:
                  type: integer
                disabilityresponse:
                  type: integer
                indefiniteandimpairs:
                  type: integer
                documentationonfile:
                  type: integer
                receivingservices:
                  type: integer
                pathhowconfirmed:
                  type: integer
                pathsmiinformation:
                  type: integer
                tcellcountavailable:
                  type: integer
                tcellcount:
                  type: integer
                tcellcountsource:
                  type: string
                viralLoadAvailable:
                  type: integer
                viralLoad:
                  type: integer
                viralLoadSource:
                  type: string
                informationDate:
                  type: string
  disabilities_json:
    type: object
    properties:
      disabilities:
        type: object
        properties:
          disabilitytype:
            type: integer
          disabilityresponse:
            type: integer
          documentationonfile:
            type: integer
          indefiniteandimpairs:
            type: integer
          pathhowconfirmed:
            type: integer
          receivingservices:
            type: integer
          pathsmiinformation:
            type: integer
          tcellcountavailable:
            type: integer
          tcellcount:
            type: integer
          tcellcountsource:
            type: integer
          viralLoadAvailable:
            type: integer
          viralLoad:
            type: integer
          viralLoadSource:
            type: string
          informationDate:
            type: string
  domesticviolence_id_json:
    type: object
    properties:
      domesticviolence:
        type: object
        properties:
          domesticviolenceId:
            type: string
          domesticviolencevictim:
            type: integer
          whenoccurred:
            type: integer
          currentlyFleeing:
            type: integer
  domesticviolence_ids_json:
    type: object
    properties:
      domesticviolences:
        type: object
        properties:
          pagination:
            type: object
            properties:
              from:
                type: integer
              returned:
                type: integer
              total:
                type: integer
              maximum:
                type: integer
              sort:
                type: object
          domesticviolences:
            type: array
            items:
              type: object
              properties:
                domesticviolenceId:
                  type: string
                domesticviolencevictim:
                  type: integer
                whenoccurred:
                  type: integer
                currentlyFleeing:
                  type: integer
  domesticviolence_json:
    type: object
    properties:
      domesticviolence:
        type: object
        properties:
          domesticviolencevictim:
            type: integer
          whenoccurred:
            type: integer
          currentlyFleeing:
            type: integer
  education_ids_json:
    type: object
    properties:
      educations:
        type: object
        properties:
          pagination:
            type: object
            properties:
              from:
                type: integer
              returned:
                type: integer
              total:
                type: integer
              maximum:
                type: integer
              sort:
                type: object
          educations:
            type: array
            items:
              type: object
              properties:
                educationId:
                  type: string
                lastgradecompleted:
                  type: integer
                schoolStatus:
                  type: integer
  education_id_json:
    type: object
    properties:
      education:
        type: object
        properties:
          educationId:
            type: string
          lastgradecompleted:
            type: integer
          schoolStatus:
            type: integer
  education_json:
    type: object
    properties:
      education:
        type: object
        properties:
          lastgradecompleted:
            type: integer
          schoolStatus:
            type: integer
  employment_id_json:
    type: object
    properties:
      employment:
        type: object
        properties:
          employmentId:
            type: string
          employed:
            type: integer
          employmentType:
            type: integer
          notEmployedReason:
            type: integer
          informationDate:
            type: string
  employments_ids_json:
    type: object
    properties:
      employments:
        type: object
        properties:
          pagination:
            type: object
            properties:
              from:
                type: integer
              returned:
                type: integer
              total:
                type: integer
              maximum:
                type: integer
              sort:
                type: object
          employments:
            type: array
            items:
              type: object
              properties:
                employmentId:
                  type: string
                employed:
                  type: integer
                employmentType:
                  type: integer
                notEmployedReason:
                  type: integer
                informationDate:
                  type: string
  employments_json:
    type: object
    properties:
      employment:
        type: object
        properties:
          employed:
            type: integer
          employmentType:
            type: integer
          notEmployedReason:
            type: integer
          informationDate:
            type: string
  enrollment_id_json:
    type: object
    properties:
      enrollment:
        type: object
        properties:
          enrollmentId:
            type: string
          disablingcondition:
            type: integer
          entrydate:
            type: integer
          householdid:
            type: string
          housingstatus:
            type: integer
          monthshomelesspastthreeyears:
            type: integer
          otherresidenceprior:
            type: string
          relationshiptohoh:
            type: integer
          residenceprior:
            type: integer
          residencepriorlengthofstay:
            type: integer
          timeshomelesspastthreeyears:
            type: integer
          yearshomeless:
            type: integer
          entryfromstreetessh:
            type: integer
          dateCreated:
            type: string
          dateUpdated:
            type: string
  enrollmentcoc_id_json:
    type: object
    properties:
      enrollmentCoc:
        type: object
        properties:
          enrollmentCocId:
            type: string
          clientCode:
            type: string
          informationDate:
            type: string
  enrollmentcoc_ids_json:
    type: object
    properties:
      enrollmentCocs:
        type: object
        properties:
          pagination:
            type: object
            properties:
              from:
                type: integer
              returned:
                type: integer
              total:
                type: integer
              maximum:
                type: integer
              sort:
                type: object
          enrollmentCocs:
            type: array
            items:
              type: object
              properties:
                enrollmentCocId:
                  type: string
                clientCode:
                  type: string
                informationDate:
                  type: string
  enrollmentcoc_json:
    type: object
    properties:
      enrollmentCoc:
        type: object
        properties:
          informationDate:
            type: string
          clientCode:
            type: string
  enrollments_ids_json:
    type: object
    properties:
      enrollments:
        type: object
        properties:
          pagination:
            type: object
            properties:
              from:
                type: integer
              returned:
                type: integer
              total:
                type: integer
              maximum:
                type: integer
              sort:
                type: object
          enrollments:
            type: array
            items:
              type: object
              properties:
                enrollmentId:
                  type: string
                disablingcondition:
                  type: integer
                entrydate:
                  type: integer
                householdid:
                  type: string
                housingstatus:
                  type: integer
                monthshomelesspastthreeyears:
                  type: integer
                otherresidenceprior:
                  type: string
                relationshiptohoh:
                  type: integer
                residenceprior:
                  type: integer
                residencepriorlengthofstay:
                  type: integer
                timeshomelesspastthreeyears:
                  type: integer
                yearshomeless:
                  type: integer
                entryfromstreetessh:
                  type: integer
                dateCreated:
                  type: string
  enrollments_json:
    type: object
    properties:
      enrollment:
        type: object
        properties:
          continuouslyhomelessoneyear:
            type: integer
          disablingcondition:
            type: integer
          entrydate:
            type: integer
          householdid:
            type: string
          housingstatus:
            type: integer
          monthshomelesspastthreeyears:
            type: integer
          monthshomelessthistime:
            type: integer
          otherresidenceprior:
            type: string
          personalid:
            type: string
          projectentryid:
            type: string
          projectid:
            type: string
          relationshiptohoh:
            type: integer
          residenceprior:
            type: integer
          residencepriorlengthofstay:
            type: integer
          statusdocumented:
            type: integer
          timeshomelesspastthreeyears:
            type: integer
          yearshomeless:
            type: integer
          entryfromstreetessh:
            type: integer
          datetostreetessh:
            type: integer
  entryrhsp_id_json:
    type: object
    properties:
      entryrhsp:
        type: object
        properties:
          entryrhspId:
            type: string
          worstHousingSituation:
            type: integer
  entryrhsp_ids_json:
    type: object
    properties:
      entryrhsps:
        type: object
        properties:
          pagination:
            type: object
            properties:
              from:
                type: integer
              returned:
                type: integer
              total:
                type: integer
              maximum:
                type: integer
              sort:
                type: object
          entryrhsps:
            type: array
            items:
              type: object
              properties:
                entryrhspId:
                  type: string
                worstHousingSituation:
                  type: integer
  entryrhsp_json:
    type: object
    properties:
      entryrhsp:
        type: object
        properties:
          worstHousingSituation:
            type: integer
  entryrhy_id_json:
    type: object
    properties:
      entryrhy:
        type: object
        properties:
          entryrhyId:
            type: string
          formerlyWardChildWelfrForestCare:
            type: integer
          yearsChildWelfrForestCare:
            type: integer
          monthsChildWelfrForestCare:
            type: integer
          formerlyWardOfJuvenileJustice:
            type: integer
          yearsJuvenileJustice:
            type: integer
          houseHoldDynamics:
            type: integer
          sexualOrientatiionGenderIdentityYouth:
            type: integer
          sexualOrientatiionGenderIdentityFamilyMbr:
            type: integer
          housingIssuesYouth:
            type: integer
          housingIssuesFamilyMbr:
            type: integer
          schoolEducationIssuesYouth:
            type: integer
          schoolEducationIssuesFamilyMbr:
            type: integer
          unemployementYouth:
            type: integer
          unemployementFamilyMbr:
            type: integer
          mentalHealthIssuesYouth:
            type: integer
          mentalHealthIssuesFamilyMbr:
            type: integer
          healthIssuesYouth:
            type: integer
          healthIssuesFamilyMbr:
            type: integer
          physicalDisabilityYouth:
            type: integer
          physicalDisabilityFamilyMbr:
            type: integer
          mentalDisabilityYouth:
            type: integer
          mentalDisabilityFamilyMbr:
            type: integer
          abuseAndNeglectYouth:
            type: integer
          abuseAndNeglectFamilyMbr:
            type: integer
          alcoholDrugAbuseYouth:
            type: integer
          alcoholDrugAbuseFamilyMbr:
            type: integer
          insufficientIncomeToSupportYouth:
            type: integer
          activeMilitaryParent:
            type: integer
          incarceratedParent:
            type: integer
          incarceratedParentStatus:
            type: integer
          referralSource:
            type: integer
          countOutReachReferralApproaches:
            type: integer
          exchangeForSex:
            type: integer
          exchangeForSexPastThreeMonths:
            type: integer
          countOfExchangeForSex:
            type: integer
          askedOfForcedToExchangeForSex:
            type: integer
          askedOfForcedToExchangeForSexPastThreeMonths:
            type: integer
          workPlaceViolenceThreat:
            type: integer
          workPlacePromiseDifference:
            type: integer
          coercedToContinueWork:
            type: integer
          laborExploitPastThreeMonths:
            type: integer
  entryrhy_ids_json:
    type: object
    properties:
      entryrhys:
        type: object
        properties:
          pagination:
            type: object
            properties:
              from:
                type: integer
              returned:
                type: integer
              total:
                type: integer
              maximum:
                type: integer
              sort:
                type: object
          entryrhys:
            type: array
            items:
              type: object
              properties:
                entryrhyId:
                  type: string
                formerlyWardChildWelfrForestCare:
                  type: integer
                yearsChildWelfrForestCare:
                  type: integer
                monthsChildWelfrForestCare:
                  type: integer
                formerlyWardOfJuvenileJustice:
                  type: integer
                yearsJuvenileJustice:
                  type: integer
                houseHoldDynamics:
                  type: integer
                sexualOrientatiionGenderIdentityYouth:
                  type: integer
                sexualOrientatiionGenderIdentityFamilyMbr:
                  type: integer
                housingIssuesYouth:
                  type: integer
                housingIssuesFamilyMbr:
                  type: integer
                schoolEducationIssuesYouth:
                  type: integer
                schoolEducationIssuesFamilyMbr:
                  type: integer
                unemployementYouth:
                  type: integer
                unemployementFamilyMbr:
                  type: integer
                mentalHealthIssuesYouth:
                  type: integer
                mentalHealthIssuesFamilyMbr:
                  type: integer
                healthIssuesYouth:
                  type: integer
                healthIssuesFamilyMbr:
                  type: integer
                physicalDisabilityYouth:
                  type: integer
                physicalDisabilityFamilyMbr:
                  type: integer
                mentalDisabilityYouth:
                  type: integer
                mentalDisabilityFamilyMbr:
                  type: integer
                abuseAndNeglectYouth:
                  type: integer
                abuseAndNeglectFamilyMbr:
                  type: integer
                alcoholDrugAbuseYouth:
                  type: integer
                alcoholDrugAbuseFamilyMbr:
                  type: integer
                insufficientIncomeToSupportYouth:
                  type: integer
                activeMilitaryParent:
                  type: integer
                incarceratedParent:
                  type: integer
                incarceratedParentStatus:
                  type: integer
                referralSource:
                  type: integer
                countOutReachReferralApproaches:
                  type: integer
                exchangeForSex:
                  type: integer
                exchangeForSexPastThreeMonths:
                  type: integer
                countOfExchangeForSex:
                  type: integer
                askedOfForcedToExchangeForSex:
                  type: integer
                askedOfForcedToExchangeForSexPastThreeMonths:
                  type: integer
                workPlaceViolenceThreat:
                  type: integer
                workPlacePromiseDifference:
                  type: integer
                coercedToContinueWork:
                  type: integer
                laborExploitPastThreeMonths:
                  type: integer
  entryrhy_json:
    type: object
    properties:
      entryrhy:
        type: object
        properties:
          formerlyWardChildWelfrForestCare:
            type: integer
          yearsChildWelfrForestCare:
            type: integer
          monthsChildWelfrForestCare:
            type: integer
          formerlyWardOfJuvenileJustice:
            type: integer
          yearsJuvenileJustice:
            type: integer
          houseHoldDynamics:
            type: integer
          sexualOrientatiionGenderIdentityYouth:
            type: integer
          sexualOrientatiionGenderIdentityFamilyMbr:
            type: integer
          housingIssuesYouth:
            type: integer
          housingIssuesFamilyMbr:
            type: integer
          schoolEducationIssuesYouth:
            type: integer
          schoolEducationIssuesFamilyMbr:
            type: integer
          unemployementYouth:
            type: integer
          unemployementFamilyMbr:
            type: integer
          mentalHealthIssuesYouth:
            type: integer
          mentalHealthIssuesFamilyMbr:
            type: integer
          healthIssuesYouth:
            type: integer
          healthIssuesFamilyMbr:
            type: integer
          physicalDisabilityYouth:
            type: integer
          physicalDisabilityFamilyMbr:
            type: integer
          mentalDisabilityYouth:
            type: integer
          mentalDisabilityFamilyMbr:
            type: integer
          abuseAndNeglectYouth:
            type: integer
          abuseAndNeglectFamilyMbr:
            type: integer
          alcoholDrugAbuseYouth:
            type: integer
          alcoholDrugAbuseFamilyMbr:
            type: integer
          insufficientIncomeToSupportYouth:
            type: integer
          activeMilitaryParent:
            type: integer
          incarceratedParent:
            type: integer
          incarceratedParentStatus:
            type: integer
          referralSource:
            type: integer
          countOutReachReferralApproaches:
            type: integer
          exchangeForSex:
            type: integer
          exchangeForSexPastThreeMonths:
            type: integer
          countOfExchangeForSex:
            type: integer
          askedOfForcedToExchangeForSex:
            type: integer
          askedOfForcedToExchangeForSexPastThreeMonths:
            type: integer
          workPlaceViolenceThreat:
            type: integer
          workPlacePromiseDifference:
            type: integer
          coercedToContinueWork:
            type: integer
          laborExploitPastThreeMonths:
            type: integer
  entryssvf_id_json:
    type: object
    properties:
      entryssvf:
        type: object
        properties:
          entryssvfId:
            type: string
          percentami:
            type: integer
          lastPermanentStreet:
            type: string
          lastPermanentCity:
            type: string
          lastPermanentState:
            type: string
          lastPermanentZip:
            type: string
          addressDataQuality:
            type: integer
          hpScreenScore:
            type: integer
          vamcStaction:
            type: string
  entryssvf_ids_json:
    type: object
    properties:
      entryssvfs:
        type: object
        properties:
          pagination:
            type: object
            properties:
              from:
                type: integer
              returned:
                type: integer
              total:
                type: integer
              maximum:
                type: integer
              sort:
                type: object
          entryssvfs:
            type: array
            items:
              type: object
              properties:
                entryssvfId:
                  type: string
                percentami:
                  type: integer
                lastPermanentStreet:
                  type: string
                lastPermanentCity:
                  type: string
                lastPermanentState:
                  type: string
                lastPermanentZip:
                  type: string
                addressDataQuality:
                  type: integer
                hpScreenScore:
                  type: integer
                vamcStaction:
                  type: string
  entryssvf_json:
    type: object
    properties:
      entryssvf:
        type: object
        properties:
          percentami:
            type: integer
          lastPermanentStreet:
            type: string
          lastPermanentCity:
            type: string
          lastPermanentState:
            type: string
          lastPermanentZip:
            type: string
          addressDataQuality:
            type: integer
          hpScreenScore:
            type: integer
          vamcStaction:
            type: string
  exit_id_json:
    type: object
    properties:
      exit:
        type: object
        properties:
          exitId:
            type: string
          exitDate:
            type: integer
          otherDestination:
            type: string
          destination:
            type: integer
          dateCreated:
            type: string
          dateUpdated:
            type: string
  exit_ids_json:
    type: object
    properties:
      exits:
        type: object
        properties:
          pagination:
            type: object
            properties:
              from:
                type: integer
              returned:
                type: integer
              total:
                type: integer
              maximum:
                type: integer
              sort:
                type: object
          exits:
            type: array
            items:
              type: object
              properties:
                exitId:
                  type: string
                exitDate:
                  type: integer
                otherDestination:
                  type: string
                destination:
                  type: integer
                dateCreated:
                  type: string
  exit_json:
    type: object
    properties:
      exit:
        type: object
        properties:
          exitDate:
            type: integer
          otherDestination:
            type: string
          destination:
            type: integer
  exithosingassessments_id_json:
    type: object
    properties:
      exithousingassessment:
        type: object
        properties:
          exithousingassessmentId:
            type: string
          housingassessment:
            type: integer
          subsidyinformation:
            type: integer
  exithosingassessments_ids_json:
    type: object
    properties:
      exithousingassessments:
        type: object
        properties:
          pagination:
            type: object
            properties:
              from:
                type: integer
              returned:
                type: integer
              total:
                type: integer
              maximum:
                type: integer
              sort:
                type: object
          exithousingassessments:
            type: array
            items:
              type: object
              properties:
                exithousingassessmentId:
                  type: string
                housingassessment:
                  type: integer
                subsidyinformation:
                  type: integer
  exithosingassessments_json:
    type: object
    properties:
      exithousingassessment:
        type: object
        properties:
          housingassessment:
            type: integer
          subsidyinformation:
            type: integer
  exitpath_id_json:
    type: object
    properties:
      exitpath:
        type: object
        properties:
          exitpathId:
            type: string
  exitpath_ids_json:
    type: object
    properties:
      exitpaths:
        type: object
        properties:
          pagination:
            type: object
            properties:
              from:
                type: integer
              returned:
                type: integer
              total:
                type: integer
              maximum:
                type: integer
              sort:
                type: object
          exitpaths:
            type: array
            items:
              type: object
              properties:
                exitpathId:
                  type: string
                connectionWithSoar:
                  type: integer
  exitpath_json:
    type: object
    properties:
      exitpath:
        type: object
        properties:
          connectionWithSoar:
            type: integer
  exitrhy_id_json:
    type: object
    properties:
      entryrhy:
        type: object
        properties:
          exitrhyId:
            type: string
          sexualOrientation:
            type: integer
          formerlyWardChildWelfrForestCare:
            type: integer
          yearsChildWelfrForestCare:
            type: integer
          monthsChildWelfrForestCare:
            type: integer
          formerlyWardOfJuvenileJustice:
            type: integer
          yearsJuvenileJustice:
            type: integer
          houseHoldDynamics:
            type: integer
          sexualOrientatiionGenderIdentityYouth:
            type: integer
          sexualOrientatiionGenderIdentityFamilyMbr:
            type: integer
          housingIssuesYouth:
            type: integer
          housingIssuesFamilyMbr:
            type: integer
          schoolEducationIssuesYouth:
            type: integer
          schoolEducationIssuesFamilyMbr:
            type: integer
          unemployementYouth:
            type: integer
          unemployementFamilyMbr:
            type: integer
          mentalHealthIssuesYouth:
            type: integer
          mentalHealthIssuesFamilyMbr:
            type: integer
          healthIssuesYouth:
            type: integer
          healthIssuesFamilyMbr:
            type: integer
          physicalDisabilityYouth:
            type: integer
          physicalDisabilityFamilyMbr:
            type: integer
          mentalDisabilityYouth:
            type: integer
          mentalDisabilityFamilyMbr:
            type: integer
          abuseAndNeglectYouth:
            type: integer
          abuseAndNeglectFamilyMbr:
            type: integer
          alcoholDrugAbuseYouth:
            type: integer
          alcoholDrugAbuseFamilyMbr:
            type: integer
          insufficientIncomeToSupportYouth:
            type: integer
          activeMilitaryParent:
            type: integer
          incarceratedParent:
            type: integer
          incarceratedParentStatus:
            type: integer
          referralSource:
            type: integer
          countOutReachReferralApproaches:
            type: integer
          exchangeForSex:
            type: integer
          exchangeForSexPastThreeMonths:
            type: integer
          countOfExchangeForSex:
            type: integer
          askedOfForcedToExchangeForSex:
            type: integer
          askedOfForcedToExchangeForSexPastThreeMonths:
            type: integer
          workPlaceViolenceThreat:
            type: integer
          workPlacePromiseDifference:
            type: integer
          coercedToContinueWork:
            type: integer
          laborExploitPastThreeMonths:
            type: integer
        required: false
  exitrhy_ids_json:
    type: object
    properties:
      exitrhys:
        type: object
        properties:
          pagination:
            type: object
            properties:
              from:
                type: integer
              returned:
                type: integer
              total:
                type: integer
              maximum:
                type: integer
              sort:
                type: object
          exitrhys:
            type: array
            items:
              type: object
              properties:
                exitrhyId:
                  type: string
                projectCompletionStatus:
                  type: integer
                earlyExitReason:
                  type: integer
                familyReunificationAchieved:
                  type: integer
                writtenAfterCarePlan:
                  type: integer
                assistanceMainStreamBenefits:
                  type: integer
                permenantHousingPlacement:
                  type: integer
                tempShelterPlacement:
                  type: integer
                exitCounseling:
                  type: integer
                furtherFollowupServices:
                  type: integer
                scheduledFollowupContacts:
                  type: integer
                resourcePackage:
                  type: integer
                otherAftercarePlanOrAction:
                  type: integer
  exitrhy_json:
    type: object
    properties:
      exitrhy:
        type: object
        properties:
          projectCompletionStatus:
            type: integer
          earlyExitReason:
            type: integer
          familyReunificationAchieved:
            type: integer
          writtenAfterCarePlan:
            type: integer
          assistanceMainStreamBenefits:
            type: integer
          permenantHousingPlacement:
            type: integer
          tempShelterPlacement:
            type: integer
          exitCounseling:
            type: integer
          furtherFollowupServices:
            type: integer
          scheduledFollowupContacts:
            type: integer
          resourcePackage:
            type: integer
          otherAftercarePlanOrAction:
            type: integer
  funder_id_json:
    type: object
    properties:
      funder:
        type: object
        properties:
          funderId:
            type: string
          funder:
            type: integer
          grantid:
            type: string
          dateCreated:
            type: string
          dateUpdated:
            type: string
          enddate:
            type: string
          startdate:
            type: string
  funders_ids_json:
    type: object
    properties:
      funders:
        type: object
        properties:
          pagination:
            type: object
            properties:
              from:
                type: integer
              returned:
                type: integer
              total:
                type: integer
              maximum:
                type: integer
              sort:
                type: object
          funders:
            type: array
            items:
              type: object
              properties:
                funderId:
                  type: string
                funder:
                  type: integer
                grantid:
                  type: string
                dateCreated:
                  type: string
                enddate:
                  type: string
                startdate:
                  type: string
  funders_json:
    type: object
    properties:
      funder:
        type: object
        properties:
          enddate:
            type: string
          funder:
            type: integer
          grantid:
            type: string
          startdate:
            type: string
  healthinsurance_id_json:
    type: object
    properties:
      healthinsurance:
        type: object
        properties:
          healthinsuranceId:
            type: string
          insurancefromanysource:
            type: integer
          medicaid:
            type: integer
          nomedicaidreason:
            type: integer
          medicare:
            type: integer
          nomedicarereason:
            type: integer
          schip:
            type: integer
          noschipreason:
            type: integer
          novamedreason:
            type: integer
          employerprovided:
            type: integer
          noemployerprovidedreason:
            type: integer
          cobra:
            type: integer
          nocobrareason:
            type: integer
          privatepay:
            type: integer
          noprivatepayreason:
            type: integer
          statehealthins:
            type: integer
          nostatehealthinsreason:
            type: integer
          otherSource:
            type: integer
          otherSourceIdentify:
            type: string
  healthinsurance_json:
    type: object
    properties:
      healthinsurance:
        type: object
        properties:
          insurancefromanysource:
            type: integer
          medicaid:
            type: integer
          nomedicaidreason:
            type: integer
          medicare:
            type: integer
          nomedicarereason:
            type: integer
          schip:
            type: integer
          noschipreason:
            type: integer
          vamedicalservices:
            type: integer
          novamedreason:
            type: integer
          employerprovided:
            type: integer
          noemployerprovidedreason:
            type: integer
          cobra:
            type: integer
          nocobrareason:
            type: integer
          privatepay:
            type: integer
          noprivatepayreason:
            type: integer
          statehealthins:
            type: integer
          nostatehealthinsreason:
            type: integer
          otherSource:
            type: integer
          otherSourceIdentify:
            type: string
  healthinsurances_ids_json:
    type: object
    properties:
      healthinsurances:
        type: object
        properties:
          pagination:
            type: object
            properties:
              from:
                type: integer
              returned:
                type: integer
              total:
                type: integer
              maximum:
                type: integer
              sort:
                type: object
          healthinsurances:
            type: array
            items:
              type: object
              properties:
                healthinsuranceId:
                  type: string
                insurancefromanysource:
                  type: integer
                medicaid:
                  type: integer
                nomedicaidreason:
                  type: integer
                medicare:
                  type: integer
                nomedicarereason:
                  type: integer
                schip:
                  type: integer
                noschipreason:
                  type: integer
                novamedreason:
                  type: integer
                employerprovided:
                  type: integer
                noemployerprovidedreason:
                  type: integer
                cobra:
                  type: integer
                nocobrareason:
                  type: integer
                privatepay:
                  type: integer
                noprivatepayreason:
                  type: integer
                statehealthins:
                  type: integer
                nostatehealthinsreason:
                  type: integer
                otherSource:
                  type: integer
                otherSourceIdentify:
                  type: string
  healthstatus_id_json:
    type: object
    properties:
      healthstatus:
        type: object
        properties:
          healthstatusId:
            type: string
          healthCategory:
            type: integer
          healthStatus:
            type: integer
          informationDate:
            type: string
          dueDate:
            type: string
  healthstatus_ids_json:
    type: object
    properties:
      healthstatuses:
        type: object
        properties:
          pagination:
            type: object
            properties:
              from:
                type: integer
              returned:
                type: integer
              total:
                type: integer
              maximum:
                type: integer
              sort:
                type: object
          healthstatuses:
            type: array
            items:
              type: object
              properties:
                healthstatusId:
                  type: string
                healthCategory:
                  type: integer
                healthStatus:
                  type: integer
                informationDate:
                  type: string
                dueDate:
                  type: string
  healthstatus_json:
    type: object
    properties:
      healthstatus:
        type: object
        properties:
          healthCategory:
            type: integer
          healthStatus:
            type: integer
          informationDate:
            type: string
          dueDate:
            type: string
  housingassesmentdispositions_id_json:
    type: object
    properties:
      housingAssessmentDisposition:
        type: object
        properties:
          housingAssessmentDispositionId:
            type: string
          assessmentdisposition:
            type: integer
          otherdisposition:
            type: string
          dateCreated:
            type: string
          dateUpdated:
            type: string
  housingassesmentdispositions_ids_json:
    type: object
    properties:
      HousingAssessmentDispositions:
        type: object
        properties:
          pagination:
            type: object
            properties:
              from:
                type: integer
              returned:
                type: integer
              total:
                type: integer
              maximum:
                type: integer
              sort:
                type: object
          housingAssessmentDispositions:
            type: array
            items:
              type: object
              properties:
                housingAssessmentDispositionId:
                  type: string
                assessmentdisposition:
                  type: integer
                otherdisposition:
                  type: string
                dateCreated:
                  type: string
  housingassesmentdispositions_json:
    type: object
    properties:
      housingAssessmentDisposition:
        type: object
        properties:
          assessmentdisposition:
            type: integer
          otherdisposition:
            type: string
  id_affiliation_json:
    type: object
    properties:
      affiliation:
        type: object
        properties:
          affiliationId:
            type: string
  id_clients_json:
    type: object
    properties:
      client:
        type: object
        properties:
          clientId:
            type: string
  id_contact_json:
    type: object
    properties:
      contact:
        type: object
        properties:
          contactId:
            type: string
  id_dateofengagements_json:
    type: object
    properties:
      dateofengagement:
        type: object
        properties:
          dateofengagementId:
            type: string
  id_disabilities_json:
    type: object
    properties:
      disabilities:
        type: object
        properties:
          disabilitiesId:
            type: string
  id_domesticviolences_json:
    type: object
    properties:
      domesticviolence:
        type: object
        properties:
          domesticviolenceId:
            type: string
  id_education_json:
    type: object
    properties:
      education:
        type: object
        properties:
          educationId:
            type: string
  id_employments_json:
    type: object
    properties:
      employment:
        type: object
        properties:
          employmentId:
            type: string
  id_enrollmentcoc_json:
    type: object
    properties:
      enrollmentCoc:
        type: object
        properties:
          enrollmentCocId:
            type: string
  id_enrollments_json:
    type: object
    properties:
      enrollment:
        type: object
        properties:
          enrollmentId:
            type: string
          yearshomeless:
            type: integer
  id_entryrhsp_json:
    type: object
    properties:
      entryrhsp:
        type: object
        properties:
          entryrhspId:
            type: string
  id_entryrhy_json:
    type: object
    properties:
      entryrhy:
        type: object
        properties:
          entryrhyId:
            type: string
  id_entryssvf_json:
    type: object
    properties:
      entryssvf:
        type: object
        properties:
          entryssvfId:
            type: string
  id_exithousingassesment_json:
    type: object
    properties:
      exithousingassessment:
        type: object
        properties:
          exithousingassessmentId:
            type: string
  id_exitpath_json:
    type: object
    properties:
      exitpath:
        type: object
        properties:
          exitpathId:
            type: string
  id_exitrhy_json:
    type: object
    properties:
      exitrhy:
        type: object
        properties:
          exitrhyId:
            type: string
  id_exits_json:
    type: object
    properties:
      exit:
        type: object
        properties:
          exitId:
            type: string
  id_funders_json:
    type: object
    properties:
      funder:
        type: object
        properties:
          funderId:
            type: string
  id_healthinsurance_json:
    type: object
    properties:
      healthinsurance:
        type: object
        properties:
          healthinsuranceId:
            type: string
  id_healthstatus_json:
    type: object
    properties:
      healthstatus:
        type: object
        properties:
          healthstatusId:
            type: string
  id_housingassesmentdispositions_json:
    type: object
    properties:
      housingAssessmentDisposition:
        type: object
        properties:
          housingAssessmentDispositionId:
            type: string
  id_incomeandsources_json:
    type: object
    properties:
      incomeAndSource:
        type: object
        properties:
          incomeAndSourceId:
            type: string
          alimonyamount:
            type: integer
          childsupportamount:
            type: integer
          earnedamount:
            type: integer
          gaamount:
            type: integer
          othersourceamount:
            type: integer
          pensionamount:
            type: integer
          privatedisabilityamount:
            type: integer
          socsecretirementamount:
            type: integer
          ssdiamount:
            type: integer
          ssiamount:
            type: integer
          tanfamount:
            type: integer
          totalmonthlyincome:
            type: integer
          unemploymentamount:
            type: integer
          vadisabilitynonserviceamount:
            type: integer
          vadisabilityserviceamount:
            type: integer
          workerscompamount:
            type: integer
  id_inventories_json:
    type: object
    properties:
      inventory:
        type: object
        properties:
          inventoryId:
            type: string
  id_medicalassistances_json:
    type: object
    properties:
      medicalassistance:
        type: object
        properties:
          medicalassistanceId:
            type: string
  id_noncashbenefits_json:
    type: object
    properties:
      noncashbenefits:
        type: object
        properties:
          noncashbenefitsID:
            type: string
  id_organization_json:
    type: object
    properties:
      organization:
        type: object
        properties:
          organizationId:
            type: string
          organizationName:
            type: string
          organizationCommonName:
            type: string
  id_pathstatus_json:
    type: object
    properties:
      pathstatus:
        type: object
        properties:
          pathstatusId:
            type: string
  id_projectcoc_json:
    type: object
    properties:
      projectcoc:
        type: object
        properties:
          projectcocId:
            type: string
  id_projects_json:
    type: object
    properties:
      project:
        type: object
        properties:
          projectId:
            type: string
  id_residentialmoveindate_json:
    type: object
    properties:
      residentialmoveindate:
        type: object
        properties:
          residentialmoveindateId:
            type: string
  id_servicefareferral_json:
    type: object
    properties:
      servicefareferral:
        type: object
        properties:
          servicefareferralId:
            type: string
  id_sites_json:
    type: object
    properties:
      site:
        type: object
        properties:
          siteId:
            type: string
  id_veteraninfo_json:
    type: object
    properties:
      veteranInfo:
        type: object
        properties:
          veteranInfoId:
            type: string
  incomeandsource_id_json:
    type: object
    properties:
      incomeAndSource:
        type: object
        properties:
          incomeAndSourceId:
            type: string
          alimony:
            type: integer
          alimonyamount:
            type: number
          childsupport:
            type: integer
          childsupportamount:
            type: number
          earned:
            type: integer
          earnedamount:
            type: number
          ga:
            type: integer
          gaamount:
            type: number
          incomefromanysource:
            type: integer
          othersource:
            type: integer
          othersourceamount:
            type: number
          othersourceidentify:
            type: string
          pension:
            type: integer
          pensionamount:
            type: number
          privatedisability:
            type: integer
          privatedisabilityamount:
            type: number
          socsecretirement:
            type: integer
          socsecretirementamount:
            type: number
          ssdi:
            type: integer
          ssdiamount:
            type: number
          ssi:
            type: integer
          ssiamount:
            type: number
          tanf:
            type: integer
          tanfamount:
            type: number
          totalmonthlyincome:
            type: number
          unemployment:
            type: integer
          unemploymentamount:
            type: number
          vadisabilitynonservice:
            type: integer
          vadisabilitynonserviceamount:
            type: number
          vadisabilityservice:
            type: integer
          vadisabilityserviceamount:
            type: number
          workerscomp:
            type: integer
          workerscompamount:
            type: number
          dateCreated:
            type: string
          dateUpdated:
            type: string
  incomeandsources_ids_json:
    type: object
    properties:
      IncomeAndSources:
        type: object
        properties:
          pagination:
            type: object
            properties:
              from:
                type: integer
              returned:
                type: integer
              total:
                type: integer
              maximum:
                type: integer
              sort:
                type: object
          incomeAndSources:
            type: array
            items:
              type: object
              properties:
                incomeAndSourceId:
                  type: string
                  required: false
                alimony:
                  type: integer
                  required: false
                alimonyamount:
                  type: number
                  required: false
                childsupport:
                  type: integer
                  required: false
                childsupportamount:
                  type: number
                  required: false
                earned:
                  type: integer
                  required: false
                earnedamount:
                  type: number
                  required: false
                ga:
                  type: integer
                  required: false
                gaamount:
                  type: number
                  required: false
                incomefromanysource:
                  type: integer
                  required: false
                othersource:
                  type: integer
                  required: false
                othersourceamount:
                  type: number
                  required: false
                othersourceidentify:
                  type: string
                  required: false
                pension:
                  type: integer
                  required: false
                pensionamount:
                  type: number
                  required: false
                privatedisability:
                  type: integer
                  required: false
                privatedisabilityamount:
                  type: number
                  required: false
                socsecretirement:
                  type: integer
                  required: false
                socsecretirementamount:
                  type: number
                  required: false
                ssdi:
                  type: integer
                  required: false
                ssdiamount:
                  type: number
                  required: false
                ssi:
                  type: integer
                  required: false
                ssiamount:
                  type: number
                  required: false
                tanf:
                  type: integer
                  required: false
                tanfamount:
                  type: number
                  required: false
                totalmonthlyincome:
                  type: number
                  required: false
                unemployment:
                  type: integer
                  required: false
                unemploymentamount:
                  type: number
                  required: false
                vadisabilitynonservice:
                  type: integer
                  required: false
                vadisabilitynonserviceamount:
                  type: number
                  required: false
                vadisabilityservice:
                  type: integer
                  required: false
                vadisabilityserviceamount:
                  type: number
                  required: false
                workerscomp:
                  type: integer
                  required: false
                workerscompamount:
                  type: number
                  required: false
                dateCreated:
                  type: string
                  required: false
  incomeandsource_json:
    type: object
    properties:
      incomeAndSource:
        type: object
        properties:
          alimony:
            type: integer
          alimonyamount:
            type: number
          childsupport:
            type: integer
          childsupportamount:
            type: number
          earned:
            type: integer
          earnedamount:
            type: number
          ga:
            type: integer
          gaamount:
            type: number
          incomefromanysource:
            type: integer
          othersource:
            type: integer
          othersourceamount:
            type: number
          othersourceidentify:
            type: string
          pension:
            type: integer
          pensionamount:
            type: number
          privatedisability:
            type: integer
          privatedisabilityamount:
            type: number
          socsecretirement:
            type: integer
          socsecretirementamount:
            type: number
          ssdi:
            type: integer
          ssdiamount:
            type: number
          ssi:
            type: integer
          ssiamount:
            type: number
          tanf:
            type: integer
          tanfamount:
            type: number
          totalmonthlyincome:
            type: number
          unemployment:
            type: integer
          unemploymentamount:
            type: number
          vadisabilitynonservice:
            type: integer
          vadisabilitynonserviceamount:
            type: number
          vadisabilityservice:
            type: integer
          vadisabilityserviceamount:
            type: number
          workerscomp:
            type: integer
          workerscompamount:
            type: number
  inventories_id_json:
    type: object
    properties:
      inventory:
        type: object
        properties:
          inventoryId:
            type: string
          availabilty:
            type: integer
          bedtype:
            type: integer
          hmisparticipatingbeds:
            type: integer
          householdtype:
            type: integer
          chbedinventory:
            type: integer
          vetbedinventory:
            type: integer
          youthbedinventory:
            type: integer
          youthagegroup:
            type: integer
          unitinventory:
            type: integer
          dateCreated:
            type: string
          dateUpdated:
            type: string
          inventoryenddate:
            type: string
          inventorystartdate:
            type: string
  inventories_ids_json:
    type: object
    properties:
      Inventories:
        type: object
        properties:
          pagination:
            type: object
            properties:
              from:
                type: integer
              returned:
                type: integer
              total:
                type: integer
              maximum:
                type: integer
              sort:
                type: object
          inventories:
            type: array
            items:
              type: object
              properties:
                inventoryId:
                  type: string
                availabilty:
                  type: integer
                bedtype:
                  type: integer
                hmisparticipatingbeds:
                  type: integer
                householdtype:
                  type: integer
                chbedinventory:
                  type: integer
                vetbedinventory:
                  type: integer
                youthbedinventory:
                  type: integer
                youthagegroup:
                  type: integer
                unitinventory:
                  type: integer
                dateCreated:
                  type: string
                inventoryenddate:
                  type: string
                inventorystartdate:
                  type: string
  inventories_json:
    type: object
    properties:
      inventory:
        type: object
        properties:
          availabilty:
            type: string
          bedinventory:
            type: string
          bedtype:
            type: integer
          hmisparticipatingbeds:
            type: integer
          householdtype:
            type: integer
          inventoryenddate:
            type: string
          inventorystartdate:
            type: string
          unitinventory:
            type: integer
          chbedinventory:
            type: integer
          vetbedinventory:
            type: integer
          youthbedinventory:
            type: integer
          youthagegroup:
            type: integer
  medicalassistance_json:
    type: object
    properties:
      medicalassistance:
        type: object
        properties:
          adap:
            type: integer
          informationDate:
            type: string
          hivaidsassistance:
            type: integer
          nohivaidsassistancereason:
            type: integer
          noadapreason:
            type: integer
  medicalassistances_ids_json:
    type: object
    properties:
      medicalassistances:
        type: object
        properties:
          pagination:
            type: object
            properties:
              from:
                type: integer
              returned:
                type: integer
              total:
                type: integer
              maximum:
                type: integer
              sort:
                type: object
          medicalassistances:
            type: array
            items:
              type: object
              properties:
                medicalassistanceId:
                  type: string
                hivaidsassistance:
                  type: integer
                nohivaidsassistancereason:
                  type: integer
                adap:
                  type: integer
                noadapreason:
                  type: integer
                informationDate:
                  type: string
  medicalassistances_id_json:
    type: object
    properties:
      medicalassistance:
        type: object
        properties:
          medicalassistanceId:
            type: string
          hivaidsassistance:
            type: integer
          nohivaidsassistancereason:
            type: integer
          adap:
            type: integer
          noadapreason:
            type: integer
          informationDate:
            type: string
  noncashbenefits_id_json:
    type: object
    properties:
      noncashbenefits:
        type: object
        properties:
          noncashbenefitsID:
            type: string
          benefitsfromanysource:
            type: integer
          othersource:
            type: integer
          othersourceidentify:
            type: string
          othertanf:
            type: integer
          rentalassistanceongoing:
            type: integer
          rentalassistancetemp:
            type: integer
          snap:
            type: integer
          tanfchildcare:
            type: integer
          tanftransportation:
            type: integer
          wic:
            type: integer
  noncashbenefits_json:
    type: object
    properties:
      noncashbenefits:
        type: object
        properties:
          benefitsfromanysource:
            type: integer
          othersource:
            type: integer
          othertanf:
            type: integer
          rentalassistanceongoing:
            type: integer
          rentalassistancetemp:
            type: integer
          snap:
            type: integer
          tanfchildcare:
            type: integer
          tanftransportation:
            type: integer
          wic:
            type: integer
          othersourceidentify:
            type: string
  noncashbenefits_ids_json:
    type: object
    properties:
      noncashbenefitsList:
        type: object
        properties:
          pagination:
            type: object
            properties:
              from:
                type: integer
              returned:
                type: integer
              total:
                type: integer
              maximum:
                type: integer
              sort:
                type: object
          noncashbenefitsList:
            type: array
            items:
              type: object
              properties:
                noncashbenefitsID:
                  type: string
                benefitsfromanysource:
                  type: integer
                othersource:
                  type: integer
                othersourceidentify:
                  type: string
                othertanf:
                  type: integer
                rentalassistanceongoing:
                  type: integer
                rentalassistancetemp:
                  type: integer
                snap:
                  type: integer
                tanfchildcare:
                  type: integer
                tanftransportation:
                  type: integer
                wic:
                  type: integer
  pathstatus_id_json:
    type: object
    properties:
      pathstatus:
        type: object
        properties:
          pathstatusId:
            type: string
          clientEnrolledInPath:
            type: integer
          reasonNotEnrolled:
            type: integer
          dateOfStatus:
            type: string
  pathstatus_ids_json:
    type: object
    properties:
      pathstatuses:
        type: object
        properties:
          pagination:
            type: object
            properties:
              from:
                type: integer
              returned:
                type: integer
              total:
                type: integer
              maximum:
                type: integer
              sort:
                type: object
          pathstatuses:
            type: array
            items:
              type: object
              properties:
                pathstatusId:
                  type: string
                clientEnrolledInPath:
                  type: integer
                reasonNotEnrolled:
                  type: integer
                dateOfStatus:
                  type: string
  pathstatus_json:
    type: object
    properties:
      pathstatus:
        type: object
        properties:
          clientenrolledinpath:
            type: integer
          dateOfStatus:
            type: string
          clientEnrolledInPath:
            type: integer
          reasonNotEnrolled:
            type: integer
  project_json:
    type: object
    properties:
      project:
        type: object
        properties:
          projectName:
            type: string
          projectCommonName:
            type: string
          continuumProject:
            type: integer
          projectType:
            type: integer
          residentialAffiliation:
            type: integer
          targetPopulation:
            type: integer
          trackingMethod:
            type: integer
  organization_json:
    type: object
    properties:
      organization:
        type: object
        properties:
          organizationName:
            type: string
          organizationCommonName:
            type: string
  projectcoc_id_json:
    type: object
    properties:
      projectcoc:
        type: object
        properties:
          projectcocId:
            type: string
          coccode:
            type: string
          dateCreated:
            type: string
          dateUpdated:
            type: string
  projectcoc_ids_json:
    type: object
    properties:
      projectcocs:
        type: object
        properties:
          pagination:
            type: object
            properties:
              from:
                type: integer
              returned:
                type: integer
              total:
                type: integer
              maximum:
                type: integer
              sort:
                type: object
          projectcocs:
            type: array
            items:
              type: object
              properties:
                projectcocId:
                  type: string
                coccode:
                  type: string
                dateCreated:
                  type: string
  projectcoc_json:
    type: object
    properties:
      projectcoc:
        type: object
        properties:
          coccode:
            type: string
  organization_id_json:
    type: object
    properties:
      organization:
        type: object
        properties:
          organizationId:
            type: string
          organizationCommonName:
            type: string
  organization_ids_json:
    type: object
    properties:
      Organizations:
        type: object
        properties:
          pagination:
            type: object
            properties:
              from:
                type: integer
              returned:
                type: integer
              total:
                type: integer
              maximum:
                type: integer
              sort:
                type: object
          organizations:
            type: array
            items:
              type: object
              properties:
                organizationId:
                  type: string
                organizationCommonName:
                  type: string
                organizationName:
                  type: string
  projects_id_json:
    type: object
    properties:
      project:
        type: object
        properties:
          projectId:
            type: string
          projectName:
            type: string
          projectCommonName:
            type: string
          continuumProject:
            type: integer
          projectType:
            type: integer
          targetPopulation:
            type: integer
          trackingMethod:
            type: integer
          dateCreated:
            type: string
          dateUpdated:
            type: string
  projects_ids_json:
    type: object
    properties:
      projects:
        type: object
        properties:
          pagination:
            type: object
            properties:
              from:
                type: integer
              returned:
                type: integer
              total:
                type: integer
              maximum:
                type: integer
              sort:
                type: object
          projects:
            type: array
            items:
              type: object
              properties:
                projectId:
                  type: string
                  required: false
                projectName:
                  type: string
                  required: false
                projectCommonName:
                  type: string
                  required: false
                continuumProject:
                  type: integer
                  required: false
                projectType:
                  type: integer
                  required: false
                residentialAffiliation:
                  type: integer
                  required: false
                targetPopulation:
                  type: integer
                  required: false
                trackingMethod:
                  type: integer
                  required: false
                dateCreated:
                  type: string
                  required: false
  residentialmoveindate_id_json:
    type: object
    properties:
      residentialmoveindate:
        type: object
        properties:
          residentialmoveindateId:
            type: string
          inpermanenthousing:
            type: integer
  residentialmoveindate_ids_json:
    type: object
    properties:
      residentialmoveindates:
        type: object
        properties:
          pagination:
            type: object
            properties:
              from:
                type: integer
              returned:
                type: integer
              total:
                type: integer
              maximum:
                type: integer
              sort:
                type: object
          residentialmoveindates:
            type: array
            items:
              type: object
              properties:
                residentialmoveindateId:
                  type: string
                inpermanenthousing:
                  type: integer
                residentialmoveindate:
                  type: string
  residentialmoveindate_json:
    type: object
    properties:
      residentialmoveindate:
        type: object
        properties:
          inpermanenthousing:
            type: integer
          residentialmoveindate:
            type: string
  servicefareferral_id_json:
    type: object
    properties:
      servicefareferral:
        type: object
        properties:
          servicefareferralId:
            type: string
          serviceCategory:
            type: integer
          funderList:
            type: integer
          typeProvided:
            type: integer
          otherTypeProvided:
            type: string
          subTypeProvided:
            type: integer
          faAmount:
            type: number
          referralOutcome:
            type: integer
  servicefareferral_json:
    type: object
    properties:
      servicefareferral:
        type: object
        properties:
          serviceCategory:
            type: integer
          funderList:
            type: integer
          typeProvided:
            type: integer
          otherTypeProvided:
            type: string
          subTypeProvided:
            type: integer
          referralOutcome:
            type: integer
          faAmount:
            type: number
  servicefareferrals_ids_json:
    type: object
    properties:
      servicefareferrals:
        type: object
        properties:
          pagination:
            type: object
            properties:
              from:
                type: integer
              returned:
                type: integer
              total:
                type: integer
              maximum:
                type: integer
              sort:
                type: object
          servicefareferrals:
            type: array
            items:
              type: object
              properties:
                servicefareferralId:
                  type: string
                serviceCategory:
                  type: integer
                funderList:
                  type: integer
                typeProvided:
                  type: integer
                otherTypeProvided:
                  type: string
                subTypeProvided:
                  type: integer
                faAmount:
                  type: number
                referralOutcome:
                  type: integer
  sites_id_json:
    type: object
    properties:
      site:
        type: object
        properties:
          siteId:
            type: string
          address:
            type: string
          city:
            type: string
          geocode:
            type: integer
          principalsite:
            type: integer
          state:
            type: string
          zip:
            type: string
          dateCreated:
            type: string
          dateUpdated:
            type: string
  sites_ids_json:
    type: object
    properties:
      sites:
        type: object
        properties:
          pagination:
            type: object
            properties:
              from:
                type: integer
              returned:
                type: integer
              total:
                type: integer
              maximum:
                type: integer
              sort:
                type: object
          sites:
            type: array
            items:
              type: object
              properties:
                siteId:
                  type: string
                address:
                  type: string
                city:
                  type: string
                geocode:
                  type: integer
                principalsite:
                  type: integer
                state:
                  type: string
                zip:
                  type: string
                dateCreated:
                  type: string
  sites_json:
    type: object
    properties:
      site:
        type: object
        properties:
          address:
            type: string
          city:
            type: string
          geocode:
            type: integer
          principalsite:
            type: integer
          state:
            type: string
          zip:
            type: integer
  veteraninfo_id_json:
    type: object
    properties:
      veteranInfo:
        type: object
        properties:
          veteranInfoId:
            type: string
          yearEnteredService:
            type: integer
          yearSeparated:
            type: integer
          worldWar2:
            type: integer
          koreanWar:
            type: integer
          vietnamWar:
            type: integer
          desertStorm:
            type: integer
          afghanistanOef:
            type: integer
          iraqOif:
            type: integer
          iraqOnd:
            type: integer
          otherTheater:
            type: integer
          militaryBranch:
            type: integer
          dischargeStatus:
            type: integer
  veteraninfo_ids_json:
    type: object
    properties:
      veteranInfos:
        type: object
        properties:
          pagination:
            type: object
            properties:
              from:
                type: integer
              returned:
                type: integer
              total:
                type: integer
              maximum:
                type: integer
              sort:
                type: object
          veteranInfos:
            type: array
            items:
              type: object
              properties:
                veteranInfoId:
                  type: string
                yearEnteredService:
                  type: integer
                  required: false
                yearSeparated:
                  type: integer
                  required: false
                worldWar2:
                  type: integer
                koreanWar:
                  type: integer
                vietnamWar:
                  type: integer
                desertStorm:
                  type: integer
                afghanistanOef:
                  type: integer
                iraqOif:
                  type: integer
                iraqOnd:
                  type: integer
                otherTheater:
                  type: integer
                militaryBranch:
                  type: integer
                dischargeStatus:
                  type: integer
  veteraninfo_json:
    type: object
    properties:
      veteranInfo:
        type: object
        properties:
          yearEnteredService:
            type: integer
            required: false
          yearSeparated:
            type: integer
            required: false
          worldWar2:
            type: integer
          koreanWar:
            type: integer
          vietnamWar:
            type: integer
          desertStorm:
            type: integer
          afghanistanOef:
            type: integer
          iraqOif:
            type: integer
          iraqOnd:
            type: integer
          otherTheater:
            type: integer
          militaryBranch:
            type: integer
          dischargeStatus:
            type: integer
resourceTypes:
  collection:
    description: 'Operations performed on the set of all HMIS <<resourcePathName>> within the system, and for adding a new <<resourcePathName|!singularize>> to the set of <<resourcePathName>> '
    get:
      description: 'Searches for <<resourcePathName|!singularize>>.  Returns a list of <<resourcePathName|!singularize>> ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.'
      responses:
        '200':
          description: OK – Everything is working.
          body:
            application/json:
              example: <<schema_ids_json_example>>
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: 500 – Internal Server Error
      queryParameters:
        CreatedAfter:
          description: searches for members of the collection created after (inclusive) a particular date
          example: 10-11-2011
          type: string
        CreatedBefore:
          description: searches for members of the collection created before (inclusive) a particular date
          example: 10-11-2012
          type: string
        UpdatedAfter:
          description: searches for members of the collection updated after (inclusive) a particular date
          example: 10-11-2011
          type: string
        UpdatedBefore:
          description: searches for members of the collection updated before (inclusive) a particular date
          example: 10-11-2012
          type: string
    post:
      description: |
        Add a <<resourcePathName|!singularize>>
      responses:
        '201':
          description: OK - New resource has been created.
          body:
            application/json:
              example: <<schema_id_json_example>>
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: 'Forbidden – The server understood the request, but is refusing it or access is not allowed.'
        '404':
          description: Not found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: 500 – Internal Server Error.
      body:
        application/json:
          example: <<schema_json_example>>
  member:
    get:
      description: Gets a <<resourcePathName|!singularize>> using a URI resource parameter/ID.
      responses:
        '200':
          description: OK – Everything is working.
          body:
            application/json:
              example: <<schema_id_json_example>>
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
    put:
      description: Updates a specific <<resourcePathName|!singularize>> specified by the URI resource parameter/ID.
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      body:
        application/json:
          example: <<schema_json_example>>
    delete:
      description: Deletes a specific <<resourcePathName|!singularize>> specified by the URI resource parameter/ID.
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
/v2015:
  /clients:
    description: 'Operations performed on the set of all HMIS clients within the system, and for adding a new client to the set of clients '
    type:
      collection:
        schema_id_json: id_clients_json
        schema_json: clients_json
        schema_ids_json: clients_ids_json
        schema_ids_json_example: |-
          {
             "Clients":{
                "pagination":{
                   "from":0,
                   "returned":27,
                   "total":30,
                   "maximum":30,
                   "sort":{

                   }
                },
                "clients":[
                   {
                      "clientId":"e7f87b3b-9282-4031-af3f-34bebc2c6cbf",
                      "firstName":"Bob",
                      "middleName":"Irwin",
                      "lastName":"Smith",
                      "nameSuffix":"Jr",
                      "nameDataQuality":1,
                      "ssn":"123456789",
                      "ssnDataQuality":1,
                      "dob":1459517834983,
                      "dobDataQuality":1,
                      "race":1,
                      "ethnicity":1,
                      "gender":1,
                      "otherGender":"Test",
                      "veteranStatus":"8",
                      "phoneNumber":"1-541-754-3010",
                      "emailAddress":"Jeanette@gmail.com"
                   },
                   {
                      "clientId":"bb1c4869-52af-4b4f-a9b6-a48f93c35294",
                      "firstName":"Fred",
                      "middleName":"Amos",
                      "lastName":"Bunyan",
                      "nameSuffix":"Sr.",
                      "nameDataQuality":1,
                      "ssn":"ssn      ",
                      "ssnDataQuality":1,
                      "dob":1459517834983,
                      "dobDataQuality":1,
                      "race":1,
                      "ethnicity":1,
                      "gender":1,
                      "otherGender":"Test",
                      "veteranStatus":"8"
                   },
                   {
                      "clientId":"2e31aed0-eb42-484d-9b42-8395b65a9ac7",
                      "firstName":"Agnes",
                      "middleName":"Faye",
                      "lastName":"Baker",
                      "nameSuffix":"III",
                      "nameDataQuality":1,
                      "ssn":"123456788",
                      "ssnDataQuality":1,
                      "dob":1459517834983,
                      "dobDataQuality":1,
                      "race":1,
                      "ethnicity":1,
                      "gender":1,
                      "otherGender":"Test",
                      "veteranStatus":"8"
                   },
                   {
                      "clientId":"edf4594b-8a89-4ee9-b5dc-3e7dd3374c8f",
                      "firstName":"Chester",
                      "middleName":"Blythe",
                      "lastName":"Mayhew",
                      "nameSuffix":"Jr",
                      "nameDataQuality":1,
                      "ssn":"123456787",
                      "ssnDataQuality":1,
                      "dob":1459517834983,
                      "dobDataQuality":1,
                      "race":1,
                      "ethnicity":1,
                      "gender":1,
                      "otherGender":"Test",
                      "veteranStatus":"8"
                   }
                ]
             }
          }
        schema_json_example: |-
          {
             "client":{
                "firstName":"First Name",
                "middleName":"Middle Name",
                "lastName":"LAST NAME",
                "nameSuffix":"NS",
                "nameDataQuality":1,
                "ssn":"123-45-6789",
                "ssnDataQuality":1,
                "dob":1459517834983,
                "dobDataQuality":1,
                "race":1,
                "ethnicity":1,
                "gender":1,
                "otherGender":"Test",
                "veteranStatus":8,
                "sourceSystemId":"ssid",
                "phoneNumber":"1-541-754-3010",
                "emailAddress":"Jeanette@gmail.com"
             }
          }
        schema_id_json_example: |-
          {
             "client":{
                "clientId":"c2e9be40-a644-46e2-9069-2feb0bdc7ee5"
             }
          }
    get:
      description: 'Searches for client.  Returns a list of client ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.'
      responses:
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: 500 – Internal Server Error
    post:
      description: |
        Add a client
      responses:
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: 'Forbidden – The server understood the request, but is refusing it or access is not allowed.'
        '404':
          description: Not found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: 500 – Internal Server Error.
    '/{clientid}':
      type:
        member:
          schema_json: clients_json
          schema_id_json: client_id_json
          schema_id_json_example: |-
            {
               "client":{
                  "clientId":"8547a63e-4659-412f-b5fa-200e03b62ae8",
                  "firstName":"Bob",
                  "middleName":"Edward",
                  "lastName":"Blass",
                  "nameSuffix":"Jr",
                  "nameDataQuality":1,
                  "ssn":"123456789",
                  "ssnDataQuality":1,
                  "dob":1459517834983,
                  "dobDataQuality":1,
                  "race":1,
                  "ethnicity":1,
                  "gender":1,
                  "otherGender":"Test",
                  "veteranStatus":"8",
                  "phoneNumber":"1-541-754-3010",
                  "emailAddress":"Jeanette@gmail.com"
               }
            }
          schema_json_example: |-
            {
               "client":{
                  "firstName":"First Name",
                  "middleName":"Middle Name",
                  "lastName":"LAST NAME",
                  "nameSuffix":"NS",
                  "nameDataQuality":1,
                  "ssn":"123-45-6789",
                  "ssnDataQuality":1,
                  "dob":1459517834983,
                  "dobDataQuality":1,
                  "race":1,
                  "ethnicity":1,
                  "gender":1,
                  "otherGender":"Test",
                  "veteranStatus":8,
                  "sourceSystemId":"ssid",
                  "phoneNumber":"1-541-754-3010",
                  "emailAddress":"Jeanette@gmail.com"
               }
            }
      get:
        description: Gets a client using a URI resource parameter/ID.
        responses:
          '400':
            description: Bad Request – The request was invalid or cannot be served.
          '401':
            description: Unauthorized – The request requires an user authentication.
          '403':
            description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
          '404':
            description: Not found – There is no resource behind the URI.
          '500':
            description: Internal Server Error
      put:
        description: Updates a specific client specified by the URI resource parameter/ID.
        responses:
          '200':
            description: OK – Everything is working.
          '304':
            description: Not Modified – The client can use cached data.
          '400':
            description: Bad Request – The request was invalid or cannot be served.
          '401':
            description: Unauthorized – The request requires a user.
          '403':
            description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
          '404':
            description: Not found – There is no resource behind the URI.
          '500':
            description: Internal Server Error.
      delete:
        description: Deletes a specific client specified by the URI resource parameter/ID.
        responses:
          '204':
            description: OK – The resource was successfully deleted.
          '400':
            description: Bad Request – The request was invalid or cannot be served.
          '401':
            description: Unauthorized – The request requires user authentication.
          '403':
            description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
          '404':
            description: Not found – There is no resource behind the URI.
          '500':
            description: Internal Server Error.
      uriParameters:
        clientid:
          example: ADBC1111211111114111111111D1111V
          type: string
          displayName: Client Identifier
      /enrollments:
        description: 'Operations performed on the set of all HMIS enrollments within the system, and for adding a new enrollment to the set of enrollments '
        type:
          collection:
            schema_id_json: id_enrollments_json
            schema_json: enrollments_json
            schema_ids_json: enrollments_ids_json
            schema_ids_json_example: |-
              {
                 "enrollments":{
                    "pagination":{
                       "from":0,
                       "returned":1,
                       "total":1,
                       "maximum":30,
                       "sort":{

                       }
                    },
                    "enrollments":[
                       {
                          "enrollmentId":"cc1da849-b877-4455-ab44-84bdb9991f97",
                          "disablingcondition":0,
                          "entrydate":1459517941736,
                          "householdid":"eca19be3-303b-47b0-a9ef-8832ab0fa13d",
                          "housingstatus":3,
                          "monthshomelesspastthreeyears":7,
                          "otherresidenceprior":"1",
                          "relationshiptohoh":2,
                          "residenceprior":2,
                          "residencepriorlengthofstay":4,
                          "timeshomelesspastthreeyears":1,
                          "yearshomeless":0,
                          "entryfromstreetessh":1,
                          "dateCreated":"05-13-2016"
                       }
                    ]
                 }
              }
            schema_json_example: |-
              {
                 "enrollment":{
                    "continuouslyhomelessoneyear":1,
                    "disablingcondition":0,
                    "entrydate":1459517941736,
                    "householdid":"eca19be3-303b-47b0-a9ef-8832ab0fa13d",
                    "housingstatus":3,
                    "monthshomelesspastthreeyears":7,
                    "monthshomelessthistime":1,
                    "otherresidenceprior":"1",
                    "personalid":"ba0ce84a-412e-4f3b-ae93-b903eb349754",
                    "projectentryid":"a70b3fe4-1e0f-4288-835f-d88dacd2b84c",
                    "projectid":"c7c41281-411b-4c93-a382-2cb20bc24a34",
                    "relationshiptohoh":2,
                    "residenceprior":2,
                    "residencepriorlengthofstay":4,
                    "statusdocumented":1,
                    "timeshomelesspastthreeyears":1,
                    "yearshomeless":2,
                    "entryfromstreetessh":2,
                    "datetostreetessh":1
                 }
              }
            schema_id_json_example: |-
              {
                 "enrollment":{
                    "enrollmentId":"cc1da849-b877-4455-ab44-84bdb9991f97",
                    "yearshomeless":0
                 }
              }
        get:
          description: 'Searches for enrollment.  Returns a list of enrollment ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.'
          responses:
            '400':
              description: Bad Request – The request was invalid or cannot be served.
            '403':
              description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
            '404':
              description: Not found – There is no resource behind the URI.
            '500':
              description: 500 – Internal Server Error
        post:
          description: |
            Add a enrollment
          responses:
            '400':
              description: Bad Request – The request was invalid or cannot be served.
            '401':
              description: Unauthorized – The request requires user authentication.
            '403':
              description: 'Forbidden – The server understood the request, but is refusing it or access is not allowed.'
            '404':
              description: Not found – There is no resource behind the URI.
            '422':
              description: Unprocessable Entity - Request body is incorrect.
            '500':
              description: 500 – Internal Server Error.
        '/{enrollmentid}':
          type:
            member:
              schema_json: enrollments_json
              schema_id_json: enrollment_id_json
              schema_id_json_example: |-
                {
                   "enrollment":{
                      "enrollmentId":"cc1da849-b877-4455-ab44-84bdb9991f97",
                      "disablingcondition":0,
                      "entrydate":1459517941736,
                      "householdid":"eca19be3-303b-47b0-a9ef-8832ab0fa13d",
                      "housingstatus":3,
                      "monthshomelesspastthreeyears":7,
                      "otherresidenceprior":"1",
                      "relationshiptohoh":2,
                      "residenceprior":2,
                      "residencepriorlengthofstay":4,
                      "timeshomelesspastthreeyears":1,
                      "yearshomeless":0,
                      "entryfromstreetessh":1,
                      "dateCreated":"05-13-2016",
                      "dateUpdated":"05-13-2016"
                   }
                }
              schema_json_example: |-
                {
                   "enrollment":{
                      "continuouslyhomelessoneyear":1,
                      "disablingcondition":0,
                      "entrydate":1459517941736,
                      "householdid":"eca19be3-303b-47b0-a9ef-8832ab0fa13d",
                      "housingstatus":3,
                      "monthshomelesspastthreeyears":7,
                      "monthshomelessthistime":1,
                      "otherresidenceprior":"1",
                      "personalid":"ba0ce84a-412e-4f3b-ae93-b903eb349754",
                      "projectentryid":"a70b3fe4-1e0f-4288-835f-d88dacd2b84c",
                      "projectid":"c7c41281-411b-4c93-a382-2cb20bc24a34",
                      "relationshiptohoh":2,
                      "residenceprior":2,
                      "residencepriorlengthofstay":4,
                      "statusdocumented":1,
                      "timeshomelesspastthreeyears":1,
                      "yearshomeless":2,
                      "entryfromstreetessh":2,
                      "datetostreetessh":1
                   }
                }
          get:
            description: Gets a enrollment using a URI resource parameter/ID.
            responses:
              '400':
                description: Bad Request – The request was invalid or cannot be served.
              '401':
                description: Unauthorized – The request requires an user authentication.
              '403':
                description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
              '404':
                description: Not found – There is no resource behind the URI.
              '500':
                description: Internal Server Error
          put:
            description: Updates a specific enrollment specified by the URI resource parameter/ID.
            responses:
              '200':
                description: OK – Everything is working.
              '304':
                description: Not Modified – The client can use cached data.
              '400':
                description: Bad Request – The request was invalid or cannot be served.
              '401':
                description: Unauthorized – The request requires a user.
              '403':
                description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
              '404':
                description: Not found – There is no resource behind the URI.
              '500':
                description: Internal Server Error.
          delete:
            description: Deletes a specific enrollment specified by the URI resource parameter/ID.
            responses:
              '204':
                description: OK – The resource was successfully deleted.
              '400':
                description: Bad Request – The request was invalid or cannot be served.
              '401':
                description: Unauthorized – The request requires user authentication.
              '403':
                description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
              '404':
                description: Not found – There is no resource behind the URI.
              '500':
                description: Internal Server Error.
          uriParameters:
            enrollmentid:
              example: ADBC1111211111114111111111D1111V
              type: string
              displayName: Client Identifier
          /enrollmentcocs:
            description: 'Operations performed on the set of all HMIS enrollmentcocs within the system, and for adding a new enrollmentcoc to the set of enrollmentcocs '
            type:
              collection:
                schema_id_json: id_enrollmentcoc_json
                schema_json: enrollmentcoc_json
                schema_ids_json: enrollmentcoc_ids_json
                schema_ids_json_example: |-
                  {
                     "enrollmentCocs":{
                        "pagination":{
                           "from":0,
                           "returned":1,
                           "total":1,
                           "maximum":30,
                           "sort":{

                           }
                        },
                        "enrollmentCocs":[
                           {
                              "enrollmentCocId":"60071b3a-2625-45b8-aa6e-23e99096b343",
                              "clientCode":"Test                ",
                              "informationDate":"04-18-2016"
                           }
                        ]
                     }
                  }
                schema_json_example: |-
                  {
                     "enrollmentCoc":{
                        "enrollmentCocId":"60071b3a-2625-45b8-aa6e-23e99096b343",
                        "informationDate":"04-15-2016 11:11",
                        "clientCode":"Test"
                     }
                  }
                schema_id_json_example: |-
                  {
                     "enrollmentCoc":{
                        "enrollmentCocId":"60071b3a-2625-45b8-aa6e-23e99096b343"
                     }
                  }
            get:
              description: 'Searches for enrollmentcoc.  Returns a list of enrollmentcoc ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.'
              responses:
                '400':
                  description: Bad Request – The request was invalid or cannot be served.
                '403':
                  description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                '404':
                  description: Not found – There is no resource behind the URI.
                '500':
                  description: 500 – Internal Server Error
            post:
              description: |
                Add a enrollmentcoc
              responses:
                '400':
                  description: Bad Request – The request was invalid or cannot be served.
                '401':
                  description: Unauthorized – The request requires user authentication.
                '403':
                  description: 'Forbidden – The server understood the request, but is refusing it or access is not allowed.'
                '404':
                  description: Not found – There is no resource behind the URI.
                '422':
                  description: Unprocessable Entity - Request body is incorrect.
                '500':
                  description: 500 – Internal Server Error.
            '/{enrollmentcocid}':
              type:
                member:
                  schema_json: enrollmentcoc_json
                  schema_id_json: enrollmentcoc_id_json
                  schema_id_json_example: |-
                    {
                       "enrollmentCoc":{
                          "enrollmentCocId":"60071b3a-2625-45b8-aa6e-23e99096b343",
                          "clientCode":"Test                ",
                          "informationDate":"04-18-2016"
                       }
                    }
                  schema_json_example: |-
                    {
                       "enrollmentCoc":{
                          "enrollmentCocId":"60071b3a-2625-45b8-aa6e-23e99096b343",
                          "informationDate":"04-15-2016 11:11",
                          "clientCode":"Test"
                       }
                    }
              get:
                description: Gets a enrollmentcoc using a URI resource parameter/ID.
                responses:
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires an user authentication.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error
              put:
                description: Updates a specific enrollmentcoc specified by the URI resource parameter/ID.
                responses:
                  '200':
                    description: OK – Everything is working.
                  '304':
                    description: Not Modified – The client can use cached data.
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires a user.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error.
              delete:
                description: Deletes a specific enrollmentcoc specified by the URI resource parameter/ID.
                responses:
                  '204':
                    description: OK – The resource was successfully deleted.
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires user authentication.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error.
              uriParameters:
                enrollmentcocid:
                  example: ADBC1111211111114111111111D1111V
                  type: string
                  displayName: EnrollmentCoC Identifier
          /educations:
            description: 'Operations performed on the set of all HMIS educations within the system, and for adding a new education to the set of educations '
            type:
              collection:
                schema_id_json: id_education_json
                schema_json: education_json
                schema_ids_json: education_ids_json
                schema_ids_json_example: |-
                  {
                     "educations":{
                        "pagination":{
                           "from":0,
                           "returned":1,
                           "total":1,
                           "maximum":30,
                           "sort":{

                           }
                        },
                        "educations":[
                           {
                              "educationId":"f91547a2-d13b-40a1-a1be-fed415c468a6",
                              "lastgradecompleted":10,
                              "schoolStatus":6
                           }
                        ]
                     }
                  }
                schema_json_example: |-
                  {
                     "education":{
                        "lastgradecompleted":10,
                        "schoolStatus":6
                     }
                  }
                schema_id_json_example: |-
                  {
                     "education":{
                        "educationId":"f91547a2-d13b-40a1-a1be-fed415c468a6"
                     }
                  }
            get:
              description: 'Searches for education.  Returns a list of education ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.'
              responses:
                '400':
                  description: Bad Request – The request was invalid or cannot be served.
                '403':
                  description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                '404':
                  description: Not found – There is no resource behind the URI.
                '500':
                  description: 500 – Internal Server Error
            post:
              description: |
                Add a education
              responses:
                '400':
                  description: Bad Request – The request was invalid or cannot be served.
                '401':
                  description: Unauthorized – The request requires user authentication.
                '403':
                  description: 'Forbidden – The server understood the request, but is refusing it or access is not allowed.'
                '404':
                  description: Not found – There is no resource behind the URI.
                '422':
                  description: Unprocessable Entity - Request body is incorrect.
                '500':
                  description: 500 – Internal Server Error.
            '/{educationid}':
              type:
                member:
                  schema_json: education_json
                  schema_id_json: education_id_json
                  schema_id_json_example: |-
                    {
                       "education":{
                          "educationId":"f91547a2-d13b-40a1-a1be-fed415c468a6",
                          "lastgradecompleted":10,
                          "schoolStatus":6
                       }
                    }
                  schema_json_example: |-
                    {
                       "education":{
                          "lastgradecompleted":10,
                          "schoolStatus":6
                       }
                    }
              get:
                description: Gets a education using a URI resource parameter/ID.
                responses:
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires an user authentication.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error
              put:
                description: Updates a specific education specified by the URI resource parameter/ID.
                responses:
                  '200':
                    description: OK – Everything is working.
                  '304':
                    description: Not Modified – The client can use cached data.
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires a user.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error.
              delete:
                description: Deletes a specific education specified by the URI resource parameter/ID.
                responses:
                  '204':
                    description: OK – The resource was successfully deleted.
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires user authentication.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error.
              uriParameters:
                educationid:
                  example: ADBC1111211111114111111111D1111V
                  type: string
                  displayName: Education Identifier
          /contacts:
            description: 'Operations performed on the set of all HMIS contacts within the system, and for adding a new contact to the set of contacts '
            type:
              collection:
                schema_id_json: id_contact_json
                schema_json: contact_json
                schema_ids_json: contact_ids_json
                schema_ids_json_example: |-
                  {
                     "contacts":{
                        "pagination":{
                           "from":0,
                           "returned":1,
                           "total":1,
                           "maximum":30,
                           "sort":{

                           }
                        },
                        "contacts":[
                           {
                              "contactId":"169da295-22f9-41d9-b991-ada835b1e123",
                              "contactLocation":3
                           }
                        ]
                     }
                  }
                schema_json_example: |-
                  {
                     "contact":{
                        "contactLocation":3
                     }
                  }
                schema_id_json_example: |-
                  {
                     "contact":{
                        "contactId":"169da295-22f9-41d9-b991-ada835b1e123"
                     }
                  }
            get:
              description: 'Searches for contact.  Returns a list of contact ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.'
              responses:
                '400':
                  description: Bad Request – The request was invalid or cannot be served.
                '403':
                  description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                '404':
                  description: Not found – There is no resource behind the URI.
                '500':
                  description: 500 – Internal Server Error
            post:
              description: |
                Add a contact
              responses:
                '400':
                  description: Bad Request – The request was invalid or cannot be served.
                '401':
                  description: Unauthorized – The request requires user authentication.
                '403':
                  description: 'Forbidden – The server understood the request, but is refusing it or access is not allowed.'
                '404':
                  description: Not found – There is no resource behind the URI.
                '422':
                  description: Unprocessable Entity - Request body is incorrect.
                '500':
                  description: 500 – Internal Server Error.
            '/{contactid}':
              type:
                member:
                  schema_json: contact_json
                  schema_id_json: contact_id_json
                  schema_id_json_example: |-
                    {
                       "contact":{
                          "contactId":"169da295-22f9-41d9-b991-ada835b1e123",
                          "contactLocation":3
                       }
                    }
                  schema_json_example: |-
                    {
                       "contact":{
                          "contactLocation":3
                       }
                    }
              get:
                description: Gets a contact using a URI resource parameter/ID.
                responses:
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires an user authentication.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error
              put:
                description: Updates a specific contact specified by the URI resource parameter/ID.
                responses:
                  '200':
                    description: OK – Everything is working.
                  '304':
                    description: Not Modified – The client can use cached data.
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires a user.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error.
              delete:
                description: Deletes a specific contact specified by the URI resource parameter/ID.
                responses:
                  '204':
                    description: OK – The resource was successfully deleted.
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires user authentication.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error.
              uriParameters:
                contactid:
                  example: ADBC1111211111114111111111D1111V
                  type: string
                  displayName: Contact Identifier
          /dateofengagements:
            description: 'Operations performed on the set of all HMIS dateofengagements within the system, and for adding a new dateofengagement to the set of dateofengagements '
            type:
              collection:
                schema_id_json: id_dateofengagements_json
                schema_json: dateofengagements_json
                schema_ids_json: dateofengagements_ids_json
                schema_json_example: |-
                  {
                     "dateofengagement":{
                        "dateofengagement":"04-07-2016 17:50"
                     }
                  }
                schema_ids_json_example: |-
                  {
                     "dateofengagements":{
                        "pagination":{
                           "from":0,
                           "returned":1,
                           "total":1,
                           "maximum":30,
                           "sort":{

                           }
                        },
                        "dateofengagements":[
                           {
                              "dateofengagementId":"61d17265-aa9f-4ed2-a146-2a94846f3dd3",
                              "dateofengagement":"04-07-2016 17:50"
                           }
                        ]
                     }
                  }
                schema_id_json_example: |-
                  {
                     "dateofengagement":{
                        "dateofengagementId":"61d17265-aa9f-4ed2-a146-2a94846f3dd3"
                     }
                  }
            get:
              description: 'Searches for dateofengagement.  Returns a list of dateofengagement ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.'
              responses:
                '400':
                  description: Bad Request – The request was invalid or cannot be served.
                '403':
                  description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                '404':
                  description: Not found – There is no resource behind the URI.
                '500':
                  description: 500 – Internal Server Error
            post:
              description: |
                Add a dateofengagement
              responses:
                '400':
                  description: Bad Request – The request was invalid or cannot be served.
                '401':
                  description: Unauthorized – The request requires user authentication.
                '403':
                  description: 'Forbidden – The server understood the request, but is refusing it or access is not allowed.'
                '404':
                  description: Not found – There is no resource behind the URI.
                '422':
                  description: Unprocessable Entity - Request body is incorrect.
                '500':
                  description: 500 – Internal Server Error.
            '/{dateofengagementsid}':
              type:
                member:
                  schema_json: dateofengagements_json
                  schema_id_json: dateofengagements_id_json
                  schema_id_json_example: |-
                    {
                       "dateofengagement":{
                          "dateofengagementId":"61d17265-aa9f-4ed2-a146-2a94846f3dd3",
                          "dateofengagement":"04-07-2016 17:50"
                       }
                    }
                  schema_json_example: |-
                    {
                       "dateofengagement":{
                          "dateofengagement":"04-07-2016 17:50"
                       }
                    }
              get:
                description: Gets a dateofengagement using a URI resource parameter/ID.
                responses:
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires an user authentication.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error
              put:
                description: Updates a specific dateofengagement specified by the URI resource parameter/ID.
                responses:
                  '200':
                    description: OK – Everything is working.
                  '304':
                    description: Not Modified – The client can use cached data.
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires a user.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error.
              delete:
                description: Deletes a specific dateofengagement specified by the URI resource parameter/ID.
                responses:
                  '204':
                    description: OK – The resource was successfully deleted.
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires user authentication.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error.
              uriParameters:
                dateofengagementsid:
                  example: ADBC1111211111114111111111D1111V
                  type: string
                  displayName: DateOfEngagements Identifier
          /disabilities:
            description: 'Operations performed on the set of all HMIS disabilities within the system, and for adding a new disability to the set of disabilities '
            type:
              collection:
                schema_id_json: id_disabilities_json
                schema_json: disabilities_json
                schema_ids_json: disabilities_ids_json
                schema_json_example: |-
                  {
                     "disabilities":{
                        "disabilitytype":6,
                        "disabilityresponse":-1994754550,
                        "documentationonfile":0,
                        "indefiniteandimpairs":0,
                        "pathhowconfirmed":99,
                        "receivingservices":0,
                        "pathsmiinformation":0,
                        "tcellcountavailable":1,
                        "tcellcount":2,
                        "tcellcountsource":3,
                        "viralLoadAvailable":4,
                        "viralLoad":5,
                        "viralLoadSource":"test",
                        "informationDate":"04-05-2016 11:12"
                     }
                  }
                schema_ids_json_example: |-
                  {
                     "disabilitiesList":{
                        "pagination":{
                           "from":0,
                           "returned":1,
                           "total":1,
                           "maximum":30,
                           "sort":{

                           }
                        },
                        "disabilitiesList":[
                           {
                              "disabilitiesId":"afeb939c-72d9-43e8-95e6-045a39843c10",
                              "disabilitytype":6,
                              "disabilityresponse":-1994754550,
                              "indefiniteandimpairs":0,
                              "documentationonfile":0,
                              "receivingservices":0,
                              "pathhowconfirmed":99,
                              "pathsmiinformation":0,
                              "tcellcountavailable":1,
                              "tcellcount":2,
                              "tcellcountsource":"3       ",
                              "viralLoadAvailable":4,
                              "viralLoad":5,
                              "viralLoadSource":"test    ",
                              "informationDate":"04-05-2016"
                           }
                        ]
                     }
                  }
                schema_id_json_example: |-
                  {
                     "disabilities":{
                        "disabilitiesId":"80f63d5d-f4db-43a5-afb6-74421df88375"
                     }
                  }
            get:
              description: 'Searches for disability.  Returns a list of disability ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.'
              responses:
                '400':
                  description: Bad Request – The request was invalid or cannot be served.
                '403':
                  description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                '404':
                  description: Not found – There is no resource behind the URI.
                '500':
                  description: 500 – Internal Server Error
            post:
              description: |
                Add a disability
              responses:
                '400':
                  description: Bad Request – The request was invalid or cannot be served.
                '401':
                  description: Unauthorized – The request requires user authentication.
                '403':
                  description: 'Forbidden – The server understood the request, but is refusing it or access is not allowed.'
                '404':
                  description: Not found – There is no resource behind the URI.
                '422':
                  description: Unprocessable Entity - Request body is incorrect.
                '500':
                  description: 500 – Internal Server Error.
            '/{disabilitiesid}':
              type:
                member:
                  schema_json: disabilities_json
                  schema_id_json: disabilities_id_json
                  schema_json_example: |-
                    {
                       "disabilities":{
                          "disabilitytype":6,
                          "disabilityresponse":-1994754550,
                          "documentationonfile":0,
                          "indefiniteandimpairs":0,
                          "pathhowconfirmed":99,
                          "receivingservices":0,
                          "pathsmiinformation":0,
                          "tcellcountavailable":1,
                          "tcellcount":2,
                          "tcellcountsource":3,
                          "viralLoadAvailable":4,
                          "viralLoad":5,
                          "viralLoadSource":"test",
                          "informationDate":"04-05-2016 11:12"
                       }
                    }
                  schema_id_json_example: |-
                    {
                       "disabilities":{
                          "disabilitiesId":"afeb939c-72d9-43e8-95e6-045a39843c10",
                          "disabilitytype":6,
                          "disabilityresponse":-1994754550,
                          "indefiniteandimpairs":0,
                          "documentationonfile":0,
                          "receivingservices":0,
                          "pathhowconfirmed":99,
                          "pathsmiinformation":0,
                          "tcellcountavailable":1,
                          "tcellcount":2,
                          "tcellcountsource":"3       ",
                          "viralLoadAvailable":4,
                          "viralLoad":5,
                          "viralLoadSource":"test    ",
                          "informationDate":"04-05-2016"
                       }
                    }
              get:
                description: Gets a disability using a URI resource parameter/ID.
                responses:
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires an user authentication.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error
              put:
                description: Updates a specific disability specified by the URI resource parameter/ID.
                responses:
                  '200':
                    description: OK – Everything is working.
                  '304':
                    description: Not Modified – The client can use cached data.
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires a user.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error.
              delete:
                description: Deletes a specific disability specified by the URI resource parameter/ID.
                responses:
                  '204':
                    description: OK – The resource was successfully deleted.
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires user authentication.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error.
              uriParameters:
                disabilitiesid:
                  example: ADBC1111211111114111111111D1111V
                  type: string
                  displayName: Disabilities Identifier
          /domesticviolences:
            description: 'Operations performed on the set of all HMIS domesticviolences within the system, and for adding a new domesticviolence to the set of domesticviolences '
            type:
              collection:
                schema_id_json: id_domesticviolences_json
                schema_json: domesticviolence_json
                schema_ids_json: domesticviolence_ids_json
                schema_json_example: |-
                  {
                     "domesticviolence":{
                        "domesticviolencevictim":9,
                        "whenoccurred":8,
                        "currentlyFleeing":-588416505
                     }
                  }
                schema_ids_json_example: |-
                  {
                     "domesticviolences":{
                        "pagination":{
                           "from":0,
                           "returned":1,
                           "total":1,
                           "maximum":30,
                           "sort":{

                           }
                        },
                        "domesticviolences":[
                           {
                              "domesticviolenceId":"b4dcd92a-4d6c-44bb-bb07-4431ab48e806",
                              "domesticviolencevictim":9,
                              "whenoccurred":8,
                              "currentlyFleeing":-588416505
                           }
                        ]
                     }
                  }
                schema_id_json_example: |-
                  {
                     "domesticviolence":{
                        "domesticviolenceId":"e416137a-b8fa-4724-8e3b-35ae0e4ef270"
                     }
                  }
            get:
              description: 'Searches for domesticviolence.  Returns a list of domesticviolence ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.'
              responses:
                '400':
                  description: Bad Request – The request was invalid or cannot be served.
                '403':
                  description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                '404':
                  description: Not found – There is no resource behind the URI.
                '500':
                  description: 500 – Internal Server Error
            post:
              description: |
                Add a domesticviolence
              responses:
                '400':
                  description: Bad Request – The request was invalid or cannot be served.
                '401':
                  description: Unauthorized – The request requires user authentication.
                '403':
                  description: 'Forbidden – The server understood the request, but is refusing it or access is not allowed.'
                '404':
                  description: Not found – There is no resource behind the URI.
                '422':
                  description: Unprocessable Entity - Request body is incorrect.
                '500':
                  description: 500 – Internal Server Error.
            '/{domesticviolenceid}':
              type:
                member:
                  schema_json: domesticviolence_json
                  schema_id_json: domesticviolence_id_json
                  schema_json_example: |-
                    {
                       "domesticviolence":{
                          "domesticviolencevictim":9,
                          "whenoccurred":8,
                          "currentlyFleeing":-588416505
                       }
                    }
                  schema_id_json_example: |-
                    {
                       "domesticviolence":{
                          "domesticviolenceId":"b4dcd92a-4d6c-44bb-bb07-4431ab48e806",
                          "domesticviolencevictim":9,
                          "whenoccurred":8,
                          "currentlyFleeing":-588416505
                       }
                    }
              get:
                description: Gets a domesticviolence using a URI resource parameter/ID.
                responses:
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires an user authentication.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error
              put:
                description: Updates a specific domesticviolence specified by the URI resource parameter/ID.
                responses:
                  '200':
                    description: OK – Everything is working.
                  '304':
                    description: Not Modified – The client can use cached data.
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires a user.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error.
              delete:
                description: Deletes a specific domesticviolence specified by the URI resource parameter/ID.
                responses:
                  '204':
                    description: OK – The resource was successfully deleted.
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires user authentication.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error.
              uriParameters:
                domesticviolenceid:
                  example: ADBC1111211111114111111111D1111V
                  type: string
                  displayName: DomesticViolence Identifier
          /employments:
            description: 'Operations performed on the set of all HMIS employments within the system, and for adding a new employment to the set of employments '
            type:
              collection:
                schema_id_json: id_employments_json
                schema_json: employments_json
                schema_ids_json: employments_ids_json
                schema_json_example: |-
                  {
                     "employment":{
                        "employed":0,
                        "employmentType":2,
                        "notEmployedReason":3,
                        "informationDate":"04-07-2016 17:50"
                     }
                  }
                schema_ids_json_example: |-
                  {
                     "employments":{
                        "pagination":{
                           "from":0,
                           "returned":1,
                           "total":1,
                           "maximum":30,
                           "sort":{

                           }
                        },
                        "employments":[
                           {
                              "employmentId":"61fa7069-3d46-4b4f-86f5-44fc4e1d6131",
                              "employed":0,
                              "employmentType":2,
                              "notEmployedReason":3,
                              "informationDate":"04-07-2016"
                           }
                        ]
                     }
                  }
                schema_id_json_example: |-
                  {
                     "employment":{
                        "employmentId":"00756afb-fddd-4341-a758-a5e6c46d809f"
                     }
                  }
            get:
              description: 'Searches for employment.  Returns a list of employment ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.'
              responses:
                '400':
                  description: Bad Request – The request was invalid or cannot be served.
                '403':
                  description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                '404':
                  description: Not found – There is no resource behind the URI.
                '500':
                  description: 500 – Internal Server Error
            post:
              description: |
                Add a employment
              responses:
                '400':
                  description: Bad Request – The request was invalid or cannot be served.
                '401':
                  description: Unauthorized – The request requires user authentication.
                '403':
                  description: 'Forbidden – The server understood the request, but is refusing it or access is not allowed.'
                '404':
                  description: Not found – There is no resource behind the URI.
                '422':
                  description: Unprocessable Entity - Request body is incorrect.
                '500':
                  description: 500 – Internal Server Error.
            '/{employmentsid}':
              type:
                member:
                  schema_json: employments_json
                  schema_id_json: employment_id_json
                  schema_id_json_example: |-
                    {
                       "employment":{
                          "employmentId":"61fa7069-3d46-4b4f-86f5-44fc4e1d6131",
                          "employed":0,
                          "employmentType":2,
                          "notEmployedReason":3,
                          "informationDate":"04-07-2016"
                       }
                    }
                  schema_json_example: |-
                    {
                       "employment":{
                          "employed":0,
                          "employmentType":2,
                          "notEmployedReason":3,
                          "informationDate":"04-07-2016 17:50"
                       }
                    }
              get:
                description: Gets a employment using a URI resource parameter/ID.
                responses:
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires an user authentication.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error
              put:
                description: Updates a specific employment specified by the URI resource parameter/ID.
                responses:
                  '200':
                    description: OK – Everything is working.
                  '304':
                    description: Not Modified – The client can use cached data.
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires a user.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error.
              delete:
                description: Deletes a specific employment specified by the URI resource parameter/ID.
                responses:
                  '204':
                    description: OK – The resource was successfully deleted.
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires user authentication.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error.
              uriParameters:
                employmentsid:
                  example: ADBC1111211111114111111111D1111V
                  type: string
                  displayName: Employments Identifier
          /exits:
            description: 'Operations performed on the set of all HMIS exits within the system, and for adding a new exit to the set of exits '
            type:
              collection:
                schema_id_json: id_exits_json
                schema_json: exit_json
                schema_ids_json: exit_ids_json
                schema_json_example: |-
                  {
                     "exit":{
                        "exitDate":1459518853883,
                        "otherDestination":"TWENTY_FOUR",
                        "destination":6
                     }
                  }
                schema_ids_json_example: |-
                  {
                     "exits":{
                        "pagination":{
                           "from":0,
                           "returned":1,
                           "total":1,
                           "maximum":30,
                           "sort":{

                           }
                        },
                        "exits":[
                           {
                              "exitId":"89c350f4-9165-4898-bb8b-f8b096a1aa2d",
                              "exitDate":1459518853883,
                              "otherDestination":"TWENTY_FOUR",
                              "destination":6,
                              "dateCreated":"05-11-2016"
                           }
                        ]
                     }
                  }
                schema_id_json_example: |-
                  {
                     "exit":{
                        "exitId":"a9c3708e-0ac2-4b80-ad2b-52d8ff7e0ed2"
                     }
                  }
            get:
              description: 'Searches for exit.  Returns a list of exit ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.'
              responses:
                '400':
                  description: Bad Request – The request was invalid or cannot be served.
                '403':
                  description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                '404':
                  description: Not found – There is no resource behind the URI.
                '500':
                  description: 500 – Internal Server Error
            post:
              description: |
                Add a exit
              responses:
                '400':
                  description: Bad Request – The request was invalid or cannot be served.
                '401':
                  description: Unauthorized – The request requires user authentication.
                '403':
                  description: 'Forbidden – The server understood the request, but is refusing it or access is not allowed.'
                '404':
                  description: Not found – There is no resource behind the URI.
                '422':
                  description: Unprocessable Entity - Request body is incorrect.
                '500':
                  description: 500 – Internal Server Error.
            '/{exitsid}':
              type:
                member:
                  schema_json: exit_json
                  schema_id_json: exit_id_json
                  schema_id_json_example: |-
                    {
                       "exit":{
                          "exitId":"89c350f4-9165-4898-bb8b-f8b096a1aa2d",
                          "exitDate":1459518853883,
                          "otherDestination":"TWENTY_FOUR",
                          "destination":6,
                          "dateCreated":"05-11-2016",
                          "dateUpdated":"05-11-2016"
                       }
                    }
                  schema_json_example: |-
                    {
                       "exit":{
                          "exitDate":1459518853883,
                          "otherDestination":"TWENTY_FOUR",
                          "destination":6
                       }
                    }
              get:
                description: Gets a exit using a URI resource parameter/ID.
                responses:
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires an user authentication.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error
              put:
                description: Updates a specific exit specified by the URI resource parameter/ID.
                responses:
                  '200':
                    description: OK – Everything is working.
                  '304':
                    description: Not Modified – The client can use cached data.
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires a user.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error.
              delete:
                description: Deletes a specific exit specified by the URI resource parameter/ID.
                responses:
                  '204':
                    description: OK – The resource was successfully deleted.
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires user authentication.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error.
              uriParameters:
                exitsid:
                  example: ADBC1111211111114111111111D1111V
                  type: string
                  displayName: Exits Identifier
              /exithousingassesments:
                description: 'Operations performed on the set of all HMIS exithousingassesments within the system, and for adding a new exithousingassesment to the set of exithousingassesments '
                type:
                  collection:
                    schema_id_json: id_exithousingassesment_json
                    schema_json: exithosingassessments_json
                    schema_ids_json: exithosingassessments_ids_json
                    schema_json_example: |-
                      {
                         "exithousingassessment":{
                            "housingassessment":5,
                            "subsidyinformation":4
                         }
                      }
                    schema_ids_json_example: |-
                      {
                         "exithousingassessments":{
                            "pagination":{
                               "from":0,
                               "returned":1,
                               "total":1,
                               "maximum":30,
                               "sort":{

                               }
                            },
                            "exithousingassessments":[
                               {
                                  "exithousingassessmentId":"a45e96ba-0287-4c9f-a1c2-5058a4acc1aa",
                                  "housingassessment":5,
                                  "subsidyinformation":4
                               }
                            ]
                         }
                      }
                    schema_id_json_example: |-
                      {
                         "exithousingassessment":{
                            "exithousingassessmentId":"a45e96ba-0287-4c9f-a1c2-5058a4acc1aa"
                         }
                      }
                get:
                  description: 'Searches for exithousingassesment.  Returns a list of exithousingassesment ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.'
                  responses:
                    '400':
                      description: Bad Request – The request was invalid or cannot be served.
                    '403':
                      description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                    '404':
                      description: Not found – There is no resource behind the URI.
                    '500':
                      description: 500 – Internal Server Error
                post:
                  description: |
                    Add a exithousingassesment
                  responses:
                    '400':
                      description: Bad Request – The request was invalid or cannot be served.
                    '401':
                      description: Unauthorized – The request requires user authentication.
                    '403':
                      description: 'Forbidden – The server understood the request, but is refusing it or access is not allowed.'
                    '404':
                      description: Not found – There is no resource behind the URI.
                    '422':
                      description: Unprocessable Entity - Request body is incorrect.
                    '500':
                      description: 500 – Internal Server Error.
                '/{exithousingassesmentid}':
                  type:
                    member:
                      schema_json: exithosingassessments_json
                      schema_id_json: exithosingassessments_id_json
                      schema_json_example: |-
                        {
                           "exithousingassessment":{
                              "housingassessment":5,
                              "subsidyinformation":4
                           }
                        }
                      schema_id_json_example: |-
                        {
                           "exithousingassessment":{
                              "exithousingassessmentId":"a45e96ba-0287-4c9f-a1c2-5058a4acc1aa",
                              "housingassessment":5,
                              "subsidyinformation":4
                           }
                        }
                  get:
                    description: Gets a exithousingassesment using a URI resource parameter/ID.
                    responses:
                      '400':
                        description: Bad Request – The request was invalid or cannot be served.
                      '401':
                        description: Unauthorized – The request requires an user authentication.
                      '403':
                        description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                      '404':
                        description: Not found – There is no resource behind the URI.
                      '500':
                        description: Internal Server Error
                  put:
                    description: Updates a specific exithousingassesment specified by the URI resource parameter/ID.
                    responses:
                      '200':
                        description: OK – Everything is working.
                      '304':
                        description: Not Modified – The client can use cached data.
                      '400':
                        description: Bad Request – The request was invalid or cannot be served.
                      '401':
                        description: Unauthorized – The request requires a user.
                      '403':
                        description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                      '404':
                        description: Not found – There is no resource behind the URI.
                      '500':
                        description: Internal Server Error.
                  delete:
                    description: Deletes a specific exithousingassesment specified by the URI resource parameter/ID.
                    responses:
                      '204':
                        description: OK – The resource was successfully deleted.
                      '400':
                        description: Bad Request – The request was invalid or cannot be served.
                      '401':
                        description: Unauthorized – The request requires user authentication.
                      '403':
                        description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                      '404':
                        description: Not found – There is no resource behind the URI.
                      '500':
                        description: Internal Server Error.
                  uriParameters:
                    exithousingassesmentid:
                      example: ADBC1111211111114111111111D1111V
                      type: string
                      displayName: ExitHousingAssesments Identifier
              /housingassesmentdispositions:
                description: 'Operations performed on the set of all HMIS housingassesmentdispositions within the system, and for adding a new housingassesmentdisposition to the set of housingassesmentdispositions '
                type:
                  collection:
                    schema_id_json: id_housingassesmentdispositions_json
                    schema_json: housingassesmentdispositions_json
                    schema_ids_json: housingassesmentdispositions_ids_json
                    schema_json_example: |-
                      {
                         "housingAssessmentDisposition":{
                            "assessmentdisposition":3,
                            "otherdisposition":"lAP0q07uSY"
                         }
                      }
                    schema_ids_json_example: |-
                      {
                         "HousingAssessmentDispositions":{
                            "pagination":{
                               "from":0,
                               "returned":1,
                               "total":1,
                               "maximum":30,
                               "sort":{

                               }
                            },
                            "housingAssessmentDispositions":[
                               {
                                  "housingAssessmentDispositionId":"c08b6685-c03e-4151-87dc-34f367a4a968",
                                  "assessmentdisposition":3,
                                  "otherdisposition":"lAP0q07uSY",
                                  "dateCreated":"05-11-2016"
                               }
                            ]
                         }
                      }
                    schema_id_json_example: |-
                      {
                         "housingAssessmentDisposition":{
                            "housingAssessmentDispositionId":"c08b6685-c03e-4151-87dc-34f367a4a968"
                         }
                      }
                get:
                  description: 'Searches for housingassesmentdisposition.  Returns a list of housingassesmentdisposition ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.'
                  responses:
                    '400':
                      description: Bad Request – The request was invalid or cannot be served.
                    '403':
                      description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                    '404':
                      description: Not found – There is no resource behind the URI.
                    '500':
                      description: 500 – Internal Server Error
                post:
                  description: |
                    Add a housingassesmentdisposition
                  responses:
                    '400':
                      description: Bad Request – The request was invalid or cannot be served.
                    '401':
                      description: Unauthorized – The request requires user authentication.
                    '403':
                      description: 'Forbidden – The server understood the request, but is refusing it or access is not allowed.'
                    '404':
                      description: Not found – There is no resource behind the URI.
                    '422':
                      description: Unprocessable Entity - Request body is incorrect.
                    '500':
                      description: 500 – Internal Server Error.
                '/{housingassesmentdispositionid}':
                  type:
                    member:
                      schema_json: housingassesmentdispositions_json
                      schema_id_json: housingassesmentdispositions_id_json
                      schema_json_example: |-
                        {
                           "housingAssessmentDisposition":{
                              "assessmentdisposition":3,
                              "otherdisposition":"lAP0q07uSY"
                           }
                        }
                      schema_id_json_example: |-
                        {
                           "housingAssessmentDisposition":{
                              "housingAssessmentDispositionId":"c08b6685-c03e-4151-87dc-34f367a4a968",
                              "assessmentdisposition":3,
                              "otherdisposition":"lAP0q07uSYlSKUifs",
                              "dateCreated":"05-11-2016",
                              "dateUpdated":"05-11-2016"
                           }
                        }
                  get:
                    description: Gets a housingassesmentdisposition using a URI resource parameter/ID.
                    responses:
                      '400':
                        description: Bad Request – The request was invalid or cannot be served.
                      '401':
                        description: Unauthorized – The request requires an user authentication.
                      '403':
                        description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                      '404':
                        description: Not found – There is no resource behind the URI.
                      '500':
                        description: Internal Server Error
                  put:
                    description: Updates a specific housingassesmentdisposition specified by the URI resource parameter/ID.
                    responses:
                      '200':
                        description: OK – Everything is working.
                      '304':
                        description: Not Modified – The client can use cached data.
                      '400':
                        description: Bad Request – The request was invalid or cannot be served.
                      '401':
                        description: Unauthorized – The request requires a user.
                      '403':
                        description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                      '404':
                        description: Not found – There is no resource behind the URI.
                      '500':
                        description: Internal Server Error.
                  delete:
                    description: Deletes a specific housingassesmentdisposition specified by the URI resource parameter/ID.
                    responses:
                      '204':
                        description: OK – The resource was successfully deleted.
                      '400':
                        description: Bad Request – The request was invalid or cannot be served.
                      '401':
                        description: Unauthorized – The request requires user authentication.
                      '403':
                        description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                      '404':
                        description: Not found – There is no resource behind the URI.
                      '500':
                        description: Internal Server Error.
                  uriParameters:
                    housingassesmentdispositionid:
                      example: ADBC1111211111114111111111D1111V
                      type: string
                      displayName: HousingAssesmentDisposition Identifier
            '/{exitid}':
              /exitpaths:
                description: 'Operations performed on the set of all HMIS exitpaths within the system, and for adding a new exitpath to the set of exitpaths '
                type:
                  collection:
                    schema_id_json: id_exitpath_json
                    schema_json: exitpath_json
                    schema_ids_json: exitpath_ids_json
                    schema_json_example: |-
                      {
                         "exitpath":{
                            "connectionWithSoar":9
                         }
                      }
                    schema_ids_json_example: |-
                      {
                         "exitpaths":{
                            "pagination":{
                               "from":0,
                               "returned":1,
                               "total":1,
                               "maximum":30,
                               "sort":{

                               }
                            },
                            "exitpaths":[
                               {
                                  "exitpathId":"46b4e67b-08f4-4962-9a1e-3ff614aaea23",
                                  "connectionWithSoar":9
                               }
                            ]
                         }
                      }
                    schema_id_json_example: |-
                      {
                        "exitpath": {
                          "exitpathId": "b5598c6c-d021-4f5f-9695-77f7f4685ed2"
                        }
                      }
                get:
                  description: 'Searches for exitpath.  Returns a list of exitpath ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.'
                  responses:
                    '400':
                      description: Bad Request – The request was invalid or cannot be served.
                    '403':
                      description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                    '404':
                      description: Not found – There is no resource behind the URI.
                    '500':
                      description: 500 – Internal Server Error
                post:
                  description: |
                    Add a exitpath
                  responses:
                    '400':
                      description: Bad Request – The request was invalid or cannot be served.
                    '401':
                      description: Unauthorized – The request requires user authentication.
                    '403':
                      description: 'Forbidden – The server understood the request, but is refusing it or access is not allowed.'
                    '404':
                      description: Not found – There is no resource behind the URI.
                    '422':
                      description: Unprocessable Entity - Request body is incorrect.
                    '500':
                      description: 500 – Internal Server Error.
                '/{exitpathid}':
                  type:
                    member:
                      schema_json: exitpath_json
                      schema_id_json: exitpath_id_json
                      schema_json_example: |-
                        {
                           "exitpath":{
                              "connectionWithSoar":9
                           }
                        }
                      schema_id_json_example: |-
                        {
                           "exitpath":{
                              "exitpathId":"46b4e67b-08f4-4962-9a1e-3ff614aaea23"
                           }
                        }
                  get:
                    description: Gets a exitpath using a URI resource parameter/ID.
                    responses:
                      '400':
                        description: Bad Request – The request was invalid or cannot be served.
                      '401':
                        description: Unauthorized – The request requires an user authentication.
                      '403':
                        description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                      '404':
                        description: Not found – There is no resource behind the URI.
                      '500':
                        description: Internal Server Error
                  put:
                    description: Updates a specific exitpath specified by the URI resource parameter/ID.
                    responses:
                      '200':
                        description: OK – Everything is working.
                      '304':
                        description: Not Modified – The client can use cached data.
                      '400':
                        description: Bad Request – The request was invalid or cannot be served.
                      '401':
                        description: Unauthorized – The request requires a user.
                      '403':
                        description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                      '404':
                        description: Not found – There is no resource behind the URI.
                      '500':
                        description: Internal Server Error.
                  delete:
                    description: Deletes a specific exitpath specified by the URI resource parameter/ID.
                    responses:
                      '204':
                        description: OK – The resource was successfully deleted.
                      '400':
                        description: Bad Request – The request was invalid or cannot be served.
                      '401':
                        description: Unauthorized – The request requires user authentication.
                      '403':
                        description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                      '404':
                        description: Not found – There is no resource behind the URI.
                      '500':
                        description: Internal Server Error.
                  uriParameters:
                    exitpathid:
                      example: ADBC1111211111114111111111D1111V
                      type: string
                      displayName: ExitPath Identifier
              uriParameters:
                exitid: {}
              /exitrhys:
                description: 'Operations performed on the set of all HMIS exitrhys within the system, and for adding a new exitrhy to the set of exitrhys '
                type:
                  collection:
                    schema_id_json: id_exitrhy_json
                    schema_json: exitrhy_json
                    schema_ids_json: exitrhy_ids_json
                    schema_json_example: |-
                      {
                         "exitrhy":{
                            "projectCompletionStatus":3,
                            "earlyExitReason":1,
                            "familyReunificationAchieved":0,
                            "writtenAfterCarePlan":2,
                            "assistanceMainStreamBenefits":0,
                            "permenantHousingPlacement":1,
                            "tempShelterPlacement":2,
                            "exitCounseling":0,
                            "furtherFollowupServices":1,
                            "scheduledFollowupContacts":1,
                            "resourcePackage":1,
                            "otherAftercarePlanOrAction":2
                         }
                      }
                    schema_ids_json_example: |-
                      {
                         "exitrhys":{
                            "pagination":{
                               "from":0,
                               "returned":1,
                               "total":1,
                               "maximum":30,
                               "sort":{

                               }
                            },
                            "exitrhys":[
                               {
                                  "exitrhyId":"878d7b3f-91d8-4a5d-9eba-81b081f0a9f8",
                                  "projectCompletionStatus":3,
                                  "earlyExitReason":1,
                                  "familyReunificationAchieved":0,
                                  "writtenAfterCarePlan":2,
                                  "assistanceMainStreamBenefits":0,
                                  "permenantHousingPlacement":1,
                                  "tempShelterPlacement":2,
                                  "exitCounseling":0,
                                  "furtherFollowupServices":1,
                                  "scheduledFollowupContacts":1,
                                  "resourcePackage":1,
                                  "otherAftercarePlanOrAction":2
                               }
                            ]
                         }
                      }
                    schema_id_json_example: |-
                      {
                         "exitrhy":{
                            "exitrhyId":"878d7b3f-91d8-4a5d-9eba-81b081f0a9f8"
                         }
                      }
                get:
                  description: 'Searches for exitrhy.  Returns a list of exitrhy ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.'
                  responses:
                    '400':
                      description: Bad Request – The request was invalid or cannot be served.
                    '403':
                      description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                    '404':
                      description: Not found – There is no resource behind the URI.
                    '500':
                      description: 500 – Internal Server Error
                post:
                  description: |
                    Add a exitrhy
                  responses:
                    '400':
                      description: Bad Request – The request was invalid or cannot be served.
                    '401':
                      description: Unauthorized – The request requires user authentication.
                    '403':
                      description: 'Forbidden – The server understood the request, but is refusing it or access is not allowed.'
                    '404':
                      description: Not found – There is no resource behind the URI.
                    '422':
                      description: Unprocessable Entity - Request body is incorrect.
                    '500':
                      description: 500 – Internal Server Error.
                '/{exitrhyid}':
                  type:
                    member:
                      schema_json: exitrhy_json
                      schema_id_json: exitrhy_id_json
                      schema_json_example: |-
                        {
                           "exitrhy":{
                              "projectCompletionStatus":3,
                              "earlyExitReason":1,
                              "familyReunificationAchieved":0,
                              "writtenAfterCarePlan":2,
                              "assistanceMainStreamBenefits":0,
                              "permenantHousingPlacement":1,
                              "tempShelterPlacement":2,
                              "exitCounseling":0,
                              "furtherFollowupServices":1,
                              "scheduledFollowupContacts":1,
                              "resourcePackage":1,
                              "otherAftercarePlanOrAction":2
                           }
                        }
                      schema_id_json_example: |-
                        {
                           "exitrhy":{
                              "exitrhyId":"878d7b3f-91d8-4a5d-9eba-81b081f0a9f8",
                              "projectCompletionStatus":3,
                              "earlyExitReason":1,
                              "familyReunificationAchieved":0,
                              "writtenAfterCarePlan":2,
                              "assistanceMainStreamBenefits":0,
                              "permenantHousingPlacement":1,
                              "tempShelterPlacement":2,
                              "exitCounseling":1,
                              "furtherFollowupServices":1,
                              "scheduledFollowupContacts":2,
                              "resourcePackage":1,
                              "otherAftercarePlanOrAction":2
                           }
                        }
                  get:
                    description: Gets a exitrhy using a URI resource parameter/ID.
                    responses:
                      '400':
                        description: Bad Request – The request was invalid or cannot be served.
                      '401':
                        description: Unauthorized – The request requires an user authentication.
                      '403':
                        description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                      '404':
                        description: Not found – There is no resource behind the URI.
                      '500':
                        description: Internal Server Error
                  put:
                    description: Updates a specific exitrhy specified by the URI resource parameter/ID.
                    responses:
                      '200':
                        description: OK – Everything is working.
                      '304':
                        description: Not Modified – The client can use cached data.
                      '400':
                        description: Bad Request – The request was invalid or cannot be served.
                      '401':
                        description: Unauthorized – The request requires a user.
                      '403':
                        description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                      '404':
                        description: Not found – There is no resource behind the URI.
                      '500':
                        description: Internal Server Error.
                  delete:
                    description: Deletes a specific exitrhy specified by the URI resource parameter/ID.
                    responses:
                      '204':
                        description: OK – The resource was successfully deleted.
                      '400':
                        description: Bad Request – The request was invalid or cannot be served.
                      '401':
                        description: Unauthorized – The request requires user authentication.
                      '403':
                        description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                      '404':
                        description: Not found – There is no resource behind the URI.
                      '500':
                        description: Internal Server Error.
                  uriParameters:
                    exitrhyid:
                      example: ADBC1111211111114111111111D1111V
                      type: string
                      displayName: Exitrhy Identifier
          /heathinsurances:
            description: 'Operations performed on the set of all HMIS heathinsurances within the system, and for adding a new heathinsurance to the set of heathinsurances '
            type:
              collection:
                schema_id_json: id_healthinsurance_json
                schema_json: healthinsurance_json
                schema_ids_json: healthinsurances_ids_json
                schema_json_example: |-
                  {
                     "healthinsurance":{
                        "insurancefromanysource":99,
                        "medicaid":1,
                        "nomedicaidreason":8,
                        "medicare":99,
                        "nomedicarereason":4,
                        "schip":1,
                        "noschipreason":2,
                        "vamedicalservices":9,
                        "novamedreason":9,
                        "employerprovided":1929555170,
                        "noemployerprovidedreason":99,
                        "cobra":1401014227,
                        "nocobrareason":2,
                        "privatepay":0,
                        "noprivatepayreason":4,
                        "statehealthins":0,
                        "nostatehealthinsreason":8,
                        "otherSource":688424562,
                        "otherSourceIdentify":"test"
                     }
                  }
                schema_ids_json_example: |-
                  {
                     "healthinsurances":{
                        "pagination":{
                           "from":0,
                           "returned":1,
                           "total":1,
                           "maximum":30,
                           "sort":{

                           }
                        },
                        "healthinsurances":[
                           {
                              "healthinsuranceId":"b7ccbf4c-980d-4163-a7a5-7eecf6829946",
                              "insurancefromanysource":99,
                              "medicaid":1,
                              "nomedicaidreason":8,
                              "medicare":99,
                              "nomedicarereason":4,
                              "schip":1,
                              "noschipreason":2,
                              "novamedreason":9,
                              "employerprovided":1929555170,
                              "noemployerprovidedreason":99,
                              "cobra":1401014227,
                              "nocobrareason":2,
                              "privatepay":0,
                              "noprivatepayreason":4,
                              "statehealthins":0,
                              "nostatehealthinsreason":8,
                              "otherSource":688424562,
                              "otherSourceIdentify":"test    "
                           }
                        ]
                     }
                  }
                schema_id_json_example: |-
                  {
                     "healthinsurance":{
                        "healthinsuranceId":"054629bc-b89c-4fdb-99fb-100245c33312"
                     }
                  }
            get:
              description: 'Searches for heathinsurance.  Returns a list of heathinsurance ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.'
              responses:
                '400':
                  description: Bad Request – The request was invalid or cannot be served.
                '403':
                  description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                '404':
                  description: Not found – There is no resource behind the URI.
                '500':
                  description: 500 – Internal Server Error
            post:
              description: |
                Add a heathinsurance
              responses:
                '400':
                  description: Bad Request – The request was invalid or cannot be served.
                '401':
                  description: Unauthorized – The request requires user authentication.
                '403':
                  description: 'Forbidden – The server understood the request, but is refusing it or access is not allowed.'
                '404':
                  description: Not found – There is no resource behind the URI.
                '422':
                  description: Unprocessable Entity - Request body is incorrect.
                '500':
                  description: 500 – Internal Server Error.
            '/{healthinsuranceid}':
              type:
                member:
                  schema_json: healthinsurance_json
                  schema_id_json: healthinsurance_id_json
                  schema_json_example: |-
                    {
                       "healthinsurance":{
                          "insurancefromanysource":99,
                          "medicaid":1,
                          "nomedicaidreason":8,
                          "medicare":99,
                          "nomedicarereason":4,
                          "schip":1,
                          "noschipreason":2,
                          "vamedicalservices":9,
                          "novamedreason":9,
                          "employerprovided":1929555170,
                          "noemployerprovidedreason":99,
                          "cobra":1401014227,
                          "nocobrareason":2,
                          "privatepay":0,
                          "noprivatepayreason":4,
                          "statehealthins":0,
                          "nostatehealthinsreason":8,
                          "otherSource":688424562,
                          "otherSourceIdentify":"test"
                       }
                    }
                  schema_id_json_example: |-
                    {
                       "healthinsurance":{
                          "healthinsuranceId":"b7ccbf4c-980d-4163-a7a5-7eecf6829946",
                          "insurancefromanysource":99,
                          "medicaid":1,
                          "nomedicaidreason":8,
                          "medicare":99,
                          "nomedicarereason":4,
                          "schip":1,
                          "noschipreason":2,
                          "novamedreason":9,
                          "employerprovided":1929555170,
                          "noemployerprovidedreason":99,
                          "cobra":1401014227,
                          "nocobrareason":2,
                          "privatepay":0,
                          "noprivatepayreason":4,
                          "statehealthins":0,
                          "nostatehealthinsreason":8,
                          "otherSource":688424562,
                          "otherSourceIdentify":"test    "
                       }
                    }
              get:
                description: Gets a heathinsurance using a URI resource parameter/ID.
                responses:
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires an user authentication.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error
              put:
                description: Updates a specific heathinsurance specified by the URI resource parameter/ID.
                responses:
                  '200':
                    description: OK – Everything is working.
                  '304':
                    description: Not Modified – The client can use cached data.
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires a user.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error.
              delete:
                description: Deletes a specific heathinsurance specified by the URI resource parameter/ID.
                responses:
                  '204':
                    description: OK – The resource was successfully deleted.
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires user authentication.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error.
              uriParameters:
                healthinsuranceid:
                  example: ADBC1111211111114111111111D1111V
                  type: string
                  displayName: HealthInsurance Identifier
          /healthstatuses:
            description: 'Operations performed on the set of all HMIS healthstatuses within the system, and for adding a new healthstatus to the set of healthstatuses '
            type:
              collection:
                schema_id_json: id_healthstatus_json
                schema_json: healthstatus_json
                schema_ids_json: healthstatus_ids_json
                schema_json_example: |-
                  {
                     "healthstatus":{
                        "healthCategory":27,
                        "healthStatus":3,
                        "informationDate":"04-05-2016 11:12",
                        "dueDate":"04-05-2016 11:12"
                     }
                  }
                schema_ids_json_example: |-
                  {
                     "healthstatuses":{
                        "pagination":{
                           "from":0,
                           "returned":1,
                           "total":1,
                           "maximum":30,
                           "sort":{

                           }
                        },
                        "healthstatuses":[
                           {
                              "healthstatusId":"81057685-4120-424f-9378-23bc45e01925",
                              "healthCategory":27,
                              "healthStatus":3,
                              "informationDate":"04-05-2016",
                              "dueDate":"04-05-2016"
                           }
                        ]
                     }
                  }
                schema_id_json_example: |-
                  {
                     "healthstatus":{
                        "healthstatusId":"1e727168-1df8-47d8-aa6f-e1f3fc713bcc"
                     }
                  }
            get:
              description: 'Searches for healthstatus.  Returns a list of healthstatus ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.'
              responses:
                '400':
                  description: Bad Request – The request was invalid or cannot be served.
                '403':
                  description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                '404':
                  description: Not found – There is no resource behind the URI.
                '500':
                  description: 500 – Internal Server Error
            post:
              description: |
                Add a healthstatus
              responses:
                '400':
                  description: Bad Request – The request was invalid or cannot be served.
                '401':
                  description: Unauthorized – The request requires user authentication.
                '403':
                  description: 'Forbidden – The server understood the request, but is refusing it or access is not allowed.'
                '404':
                  description: Not found – There is no resource behind the URI.
                '422':
                  description: Unprocessable Entity - Request body is incorrect.
                '500':
                  description: 500 – Internal Server Error.
            '/{healthstatusid}':
              type:
                member:
                  schema_json: healthstatus_json
                  schema_id_json: healthstatus_id_json
                  schema_json_example: |-
                    {
                       "healthstatus":{
                          "healthCategory":27,
                          "healthStatus":3,
                          "informationDate":"04-05-2016 11:12",
                          "dueDate":"04-05-2016 11:12"
                       }
                    }
                  schema_id_json_example: |-
                    {
                       "healthstatus":{
                          "healthstatusId":"81057685-4120-424f-9378-23bc45e01925",
                          "healthCategory":27,
                          "healthStatus":3,
                          "informationDate":"04-05-2016",
                          "dueDate":"04-05-2016"
                       }
                    }
              get:
                description: Gets a healthstatus using a URI resource parameter/ID.
                responses:
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires an user authentication.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error
              put:
                description: Updates a specific healthstatus specified by the URI resource parameter/ID.
                responses:
                  '200':
                    description: OK – Everything is working.
                  '304':
                    description: Not Modified – The client can use cached data.
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires a user.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error.
              delete:
                description: Deletes a specific healthstatus specified by the URI resource parameter/ID.
                responses:
                  '204':
                    description: OK – The resource was successfully deleted.
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires user authentication.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error.
              uriParameters:
                healthstatusid:
                  example: ADBC1111211111114111111111D1111V
                  type: string
                  displayName: HealthStatus Identifier
          /incomeandsources:
            description: 'Operations performed on the set of all HMIS incomeandsources within the system, and for adding a new incomeandsource to the set of incomeandsources '
            type:
              collection:
                schema_id_json: id_incomeandsources_json
                schema_json: incomeandsource_json
                schema_ids_json: incomeandsources_ids_json
                schema_json_example: |-
                  {
                     "incomeAndSource":{
                        "alimony":0,
                        "alimonyamount":0.68303245,
                        "childsupport":0,
                        "childsupportamount":0.37502742,
                        "earned":0,
                        "earnedamount":0.9737119,
                        "ga":0,
                        "gaamount":0.63814074,
                        "incomefromanysource":0,
                        "othersource":0,
                        "othersourceamount":0.8665285,
                        "othersourceidentify":"TestData",
                        "pension":0,
                        "pensionamount":0.37544388,
                        "privatedisability":0,
                        "privatedisabilityamount":0.96586764,
                        "socsecretirement":0,
                        "socsecretirementamount":0.63478535,
                        "ssdi":0,
                        "ssdiamount":0.42890108,
                        "ssi":0,
                        "ssiamount":0.32970047,
                        "tanf":0,
                        "tanfamount":0.36064345,
                        "totalmonthlyincome":0.2729566,
                        "unemployment":0,
                        "unemploymentamount":0.58434963,
                        "vadisabilitynonservice":0,
                        "vadisabilitynonserviceamount":0.81583244,
                        "vadisabilityservice":0,
                        "vadisabilityserviceamount":0.1477319,
                        "workerscomp":0,
                        "workerscompamount":0.14441723
                     }
                  }
                schema_ids_json_example: |-
                  {
                     "IncomeAndSources":{
                        "pagination":{
                           "from":0,
                           "returned":1,
                           "total":1,
                           "maximum":30,
                           "sort":{

                           }
                        },
                        "incomeAndSources":[
                           {
                              "incomeAndSourceId":"07577bdf-d44d-4a2f-b0f5-952098158242",
                              "alimony":0,
                              "alimonyamount":0.683,
                              "childsupport":0,
                              "childsupportamount":0.375,
                              "earned":0,
                              "earnedamount":0.974,
                              "ga":0,
                              "gaamount":0.638,
                              "incomefromanysource":0,
                              "othersource":0,
                              "othersourceamount":0.867,
                              "othersourceidentify":"TestData",
                              "pension":0,
                              "pensionamount":0.375,
                              "privatedisability":0,
                              "privatedisabilityamount":0.966,
                              "socsecretirement":0,
                              "socsecretirementamount":0.635,
                              "ssdi":0,
                              "ssdiamount":0.429,
                              "ssi":0,
                              "ssiamount":0.33,
                              "tanf":0,
                              "tanfamount":0.361,
                              "totalmonthlyincome":0.273,
                              "unemployment":0,
                              "unemploymentamount":0.584,
                              "vadisabilitynonservice":0,
                              "vadisabilitynonserviceamount":0.816,
                              "vadisabilityservice":0,
                              "vadisabilityserviceamount":0.148,
                              "workerscomp":0,
                              "workerscompamount":0.144,
                              "dateCreated":"04-11-2016 10:32"
                           }
                        ]
                     }
                  }
                schema_id_json_example: |-
                  {
                     "incomeAndSource":{
                        "incomeAndSourceId":"07577bdf-d44d-4a2f-b0f5-952098158242",
                        "alimonyamount":0.0,
                        "childsupportamount":0.0,
                        "earnedamount":0.0,
                        "gaamount":0.0,
                        "othersourceamount":0.0,
                        "pensionamount":0.0,
                        "privatedisabilityamount":0.0,
                        "socsecretirementamount":0.0,
                        "ssdiamount":0.0,
                        "ssiamount":0.0,
                        "tanfamount":0.0,
                        "totalmonthlyincome":0.0,
                        "unemploymentamount":0.0,
                        "vadisabilitynonserviceamount":0.0,
                        "vadisabilityserviceamount":0.0,
                        "workerscompamount":0.0
                     }
                  }
            get:
              description: 'Searches for incomeandsource.  Returns a list of incomeandsource ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.'
              responses:
                '400':
                  description: Bad Request – The request was invalid or cannot be served.
                '403':
                  description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                '404':
                  description: Not found – There is no resource behind the URI.
                '500':
                  description: 500 – Internal Server Error
            post:
              description: |
                Add a incomeandsource
              responses:
                '400':
                  description: Bad Request – The request was invalid or cannot be served.
                '401':
                  description: Unauthorized – The request requires user authentication.
                '403':
                  description: 'Forbidden – The server understood the request, but is refusing it or access is not allowed.'
                '404':
                  description: Not found – There is no resource behind the URI.
                '422':
                  description: Unprocessable Entity - Request body is incorrect.
                '500':
                  description: 500 – Internal Server Error.
            '/{incomeandsourcesid}':
              type:
                member:
                  schema_json: incomeandsource_json
                  schema_id_json: incomeandsource_id_json
                  schema_json_example: |-
                    {
                       "incomeAndSource":{
                          "alimony":0,
                          "alimonyamount":0.68303245,
                          "childsupport":0,
                          "childsupportamount":0.37502742,
                          "earned":0,
                          "earnedamount":0.9737119,
                          "ga":0,
                          "gaamount":0.63814074,
                          "incomefromanysource":0,
                          "othersource":0,
                          "othersourceamount":0.8665285,
                          "othersourceidentify":"TestData",
                          "pension":0,
                          "pensionamount":0.37544388,
                          "privatedisability":0,
                          "privatedisabilityamount":0.96586764,
                          "socsecretirement":0,
                          "socsecretirementamount":0.63478535,
                          "ssdi":0,
                          "ssdiamount":0.42890108,
                          "ssi":0,
                          "ssiamount":0.32970047,
                          "tanf":0,
                          "tanfamount":0.36064345,
                          "totalmonthlyincome":0.2729566,
                          "unemployment":0,
                          "unemploymentamount":0.58434963,
                          "vadisabilitynonservice":0,
                          "vadisabilitynonserviceamount":0.81583244,
                          "vadisabilityservice":0,
                          "vadisabilityserviceamount":0.1477319,
                          "workerscomp":0,
                          "workerscompamount":0.14441723
                       }
                    }
                  schema_id_json_example: |-
                    {
                       "incomeAndSource":{
                          "incomeAndSourceId":"07577bdf-d44d-4a2f-b0f5-952098158242",
                          "alimony":0,
                          "alimonyamount":0.683,
                          "childsupport":0,
                          "childsupportamount":0.375,
                          "earned":0,
                          "earnedamount":0.974,
                          "ga":0,
                          "gaamount":0.638,
                          "incomefromanysource":0,
                          "othersource":0,
                          "othersourceamount":0.867,
                          "othersourceidentify":"TestData",
                          "pension":0,
                          "pensionamount":0.375,
                          "privatedisability":0,
                          "privatedisabilityamount":0.966,
                          "socsecretirement":0,
                          "socsecretirementamount":0.635,
                          "ssdi":0,
                          "ssdiamount":0.429,
                          "ssi":0,
                          "ssiamount":0.33,
                          "tanf":0,
                          "tanfamount":0.361,
                          "totalmonthlyincome":0.273,
                          "unemployment":0,
                          "unemploymentamount":0.584,
                          "vadisabilitynonservice":0,
                          "vadisabilitynonserviceamount":0.816,
                          "vadisabilityservice":0,
                          "vadisabilityserviceamount":0.148,
                          "workerscomp":0,
                          "workerscompamount":0.144,
                          "dateCreated":"04-11-2016 10:32",
                          "dateUpdated":"04-11-2016 10:32"
                       }
                    }
              get:
                description: Gets a incomeandsource using a URI resource parameter/ID.
                responses:
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires an user authentication.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error
              put:
                description: Updates a specific incomeandsource specified by the URI resource parameter/ID.
                responses:
                  '200':
                    description: OK – Everything is working.
                  '304':
                    description: Not Modified – The client can use cached data.
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires a user.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error.
              delete:
                description: Deletes a specific incomeandsource specified by the URI resource parameter/ID.
                responses:
                  '204':
                    description: OK – The resource was successfully deleted.
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires user authentication.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error.
              uriParameters:
                incomeandsourcesid:
                  example: ADBC1111211111114111111111D1111V
                  type: string
                  displayName: HealthStatus Identifier
          /medicalassistences:
            description: 'Operations performed on the set of all HMIS medicalassistences within the system, and for adding a new medicalassistence to the set of medicalassistences '
            type:
              collection:
                schema_id_json: id_medicalassistances_json
                schema_json: medicalassistance_json
                schema_ids_json: medicalassistances_ids_json
                schema_json_example: |-
                  {
                     "medicalassistance":{
                        "adap":0,
                        "informationDate":"04-05-2016 11:12",
                        "hivaidsassistance":9,
                        "nohivaidsassistancereason":3,
                        "noadapreason":2
                     }
                  }
                schema_ids_json_example: |-
                  {
                     "medicalassistances":{
                        "pagination":{
                           "from":0,
                           "returned":1,
                           "total":1,
                           "maximum":30,
                           "sort":{

                           }
                        },
                        "medicalassistances":[
                           {
                              "medicalassistanceId":"17125891-0fa3-4680-9093-fc866cf2f838",
                              "hivaidsassistance":9,
                              "nohivaidsassistancereason":3,
                              "adap":0,
                              "noadapreason":2,
                              "informationDate":"04-05-2016"
                           }
                        ]
                     }
                  }
                schema_id_json_example: |-
                  {
                     "medicalassistance":{
                        "medicalassistanceId":"6c570aea-ba70-4784-b2e8-bb33caa5eafe"
                     }
                  }
            get:
              description: 'Searches for medicalassistence.  Returns a list of medicalassistence ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.'
              responses:
                '400':
                  description: Bad Request – The request was invalid or cannot be served.
                '403':
                  description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                '404':
                  description: Not found – There is no resource behind the URI.
                '500':
                  description: 500 – Internal Server Error
            post:
              description: |
                Add a medicalassistence
              responses:
                '400':
                  description: Bad Request – The request was invalid or cannot be served.
                '401':
                  description: Unauthorized – The request requires user authentication.
                '403':
                  description: 'Forbidden – The server understood the request, but is refusing it or access is not allowed.'
                '404':
                  description: Not found – There is no resource behind the URI.
                '422':
                  description: Unprocessable Entity - Request body is incorrect.
                '500':
                  description: 500 – Internal Server Error.
            '/{medicalassistancesid}':
              type:
                member:
                  schema_json: medicalassistance_json
                  schema_id_json: medicalassistances_id_json
                  schema_json_example: |-
                    {
                       "medicalassistance":{
                          "adap":0,
                          "informationDate":"04-05-2016 11:12",
                          "hivaidsassistance":9,
                          "nohivaidsassistancereason":3,
                          "noadapreason":2
                       }
                    }
                  schema_id_json_example: |-
                    {
                       "medicalassistance":{
                          "medicalassistanceId":"7bad6629-48da-49b2-aebe-3ff449ee5b91",
                          "hivaidsassistance":9,
                          "nohivaidsassistancereason":3,
                          "adap":0,
                          "noadapreason":2,
                          "informationDate":"04-05-2016"
                       }
                    }
              get:
                description: Gets a medicalassistence using a URI resource parameter/ID.
                responses:
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires an user authentication.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error
              put:
                description: Updates a specific medicalassistence specified by the URI resource parameter/ID.
                responses:
                  '200':
                    description: OK – Everything is working.
                  '304':
                    description: Not Modified – The client can use cached data.
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires a user.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error.
              delete:
                description: Deletes a specific medicalassistence specified by the URI resource parameter/ID.
                responses:
                  '204':
                    description: OK – The resource was successfully deleted.
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires user authentication.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error.
              uriParameters:
                medicalassistancesid:
                  example: ADBC1111211111114111111111D1111V
                  type: string
                  displayName: MedicalAssistances Identifier
          /noncashbenefits:
            description: 'Operations performed on the set of all HMIS noncashbenefits within the system, and for adding a new noncashbenefit to the set of noncashbenefits '
            type:
              collection:
                schema_id_json: id_noncashbenefits_json
                schema_json: noncashbenefits_json
                schema_ids_json: noncashbenefits_ids_json
                schema_json_example: |-
                  {
                     "noncashbenefits":{
                        "benefitsfromanysource":0,
                        "othersource":99,
                        "othertanf":0,
                        "rentalassistanceongoing":0,
                        "rentalassistancetemp":0,
                        "snap":0,
                        "tanfchildcare":0,
                        "tanftransportation":0,
                        "wic":0,
                        "othersourceidentify":"test"
                     }
                  }
                schema_ids_json_example: |-
                  {
                     "noncashbenefitsList":{
                        "pagination":{
                           "from":0,
                           "returned":1,
                           "total":1,
                           "maximum":30,
                           "sort":{

                           }
                        },
                        "noncashbenefitsList":[
                           {
                              "noncashbenefitsID":"80dfa67e-bf60-4227-822f-6d3850d9c5e5",
                              "benefitsfromanysource":0,
                              "othersource":99,
                              "othersourceidentify":"test",
                              "othertanf":0,
                              "rentalassistanceongoing":0,
                              "rentalassistancetemp":0,
                              "snap":0,
                              "tanfchildcare":0,
                              "tanftransportation":0,
                              "wic":0
                           }
                        ]
                     }
                  }
                schema_id_json_example: |-
                  {
                     "noncashbenefits":{
                        "noncashbenefitsID":"520f2a27-e92d-4dc2-946f-54bcdd334114"
                     }
                  }
            get:
              description: 'Searches for noncashbenefit.  Returns a list of noncashbenefit ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.'
              responses:
                '400':
                  description: Bad Request – The request was invalid or cannot be served.
                '403':
                  description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                '404':
                  description: Not found – There is no resource behind the URI.
                '500':
                  description: 500 – Internal Server Error
            post:
              description: |
                Add a noncashbenefit
              responses:
                '400':
                  description: Bad Request – The request was invalid or cannot be served.
                '401':
                  description: Unauthorized – The request requires user authentication.
                '403':
                  description: 'Forbidden – The server understood the request, but is refusing it or access is not allowed.'
                '404':
                  description: Not found – There is no resource behind the URI.
                '422':
                  description: Unprocessable Entity - Request body is incorrect.
                '500':
                  description: 500 – Internal Server Error.
            '/{noncashbenefitsid}':
              type:
                member:
                  schema_json: noncashbenefits_json
                  schema_id_json: noncashbenefits_id_json
                  schema_json_example: |-
                    {
                       "noncashbenefits":{
                          "benefitsfromanysource":0,
                          "othersource":99,
                          "othertanf":0,
                          "rentalassistanceongoing":0,
                          "rentalassistancetemp":0,
                          "snap":0,
                          "tanfchildcare":0,
                          "tanftransportation":0,
                          "wic":0,
                          "othersourceidentify":"test"
                       }
                    }
                  schema_id_json_example: |-
                    {
                       "noncashbenefits":{
                          "noncashbenefitsID":"520f2a27-e92d-4dc2-946f-54bcdd334114",
                          "benefitsfromanysource":0,
                          "othersource":0,
                          "othertanf":0,
                          "rentalassistanceongoing":0,
                          "rentalassistancetemp":0,
                          "snap":0,
                          "tanfchildcare":0,
                          "tanftransportation":0,
                          "wic":0,
                          "othersourceidentify":"test"
                       }
                    }
              get:
                description: Gets a noncashbenefit using a URI resource parameter/ID.
                responses:
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires an user authentication.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error
              put:
                description: Updates a specific noncashbenefit specified by the URI resource parameter/ID.
                responses:
                  '200':
                    description: OK – Everything is working.
                  '304':
                    description: Not Modified – The client can use cached data.
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires a user.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error.
              delete:
                description: Deletes a specific noncashbenefit specified by the URI resource parameter/ID.
                responses:
                  '204':
                    description: OK – The resource was successfully deleted.
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires user authentication.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error.
              uriParameters:
                noncashbenefitsid:
                  example: ADBC1111211111114111111111D1111V
                  type: string
                  displayName: NonCashBenefits Identifier
          /residentialmoveindates:
            description: 'Operations performed on the set of all HMIS residentialmoveindates within the system, and for adding a new residentialmoveindate to the set of residentialmoveindates '
            type:
              collection:
                schema_id_json: id_residentialmoveindate_json
                schema_json: residentialmoveindate_json
                schema_ids_json: residentialmoveindate_ids_json
                schema_json_example: |-
                  {
                     "residentialmoveindate":{
                        "inpermanenthousing":0,
                        "residentialmoveindate":"04-05-2016 11:12"
                     }
                  }
                schema_ids_json_example: |-
                  {
                     "residentialmoveindates":{
                        "pagination":{
                           "from":0,
                           "returned":1,
                           "total":1,
                           "maximum":30,
                           "sort":{

                           }
                        },
                        "residentialmoveindates":[
                           {
                              "residentialmoveindateId":"37775c5e-72ea-4b1d-92ad-91c76decebd1",
                              "inpermanenthousing":0,
                              "residentialmoveindate":"04-05-2016"
                           }
                        ]
                     }
                  }
                schema_id_json_example: |-
                  {
                     "residentialmoveindate":{
                        "residentialmoveindateId":"8967ae96-79d1-43a9-97da-66179bbb7c71"
                     }
                  }
            get:
              description: 'Searches for residentialmoveindate.  Returns a list of residentialmoveindate ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.'
              responses:
                '400':
                  description: Bad Request – The request was invalid or cannot be served.
                '403':
                  description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                '404':
                  description: Not found – There is no resource behind the URI.
                '500':
                  description: 500 – Internal Server Error
            post:
              description: |
                Add a residentialmoveindate
              responses:
                '400':
                  description: Bad Request – The request was invalid or cannot be served.
                '401':
                  description: Unauthorized – The request requires user authentication.
                '403':
                  description: 'Forbidden – The server understood the request, but is refusing it or access is not allowed.'
                '404':
                  description: Not found – There is no resource behind the URI.
                '422':
                  description: Unprocessable Entity - Request body is incorrect.
                '500':
                  description: 500 – Internal Server Error.
            '/{residentialmoveindatesid}':
              type:
                member:
                  schema_json: residentialmoveindate_json
                  schema_id_json: residentialmoveindate_id_json
                  schema_json_example: |-
                    {
                       "residentialmoveindate":{
                          "inpermanenthousing":0,
                          "residentialmoveindate":"04-05-2016 11:12"
                       }
                    }
                  schema_id_json_example: |-
                    {
                       "residentialmoveindate":{
                          "residentialmoveindateId":"37775c5e-72ea-4b1d-92ad-91c76decebd1",
                          "inpermanenthousing":0
                       }
                    }
              get:
                description: Gets a residentialmoveindate using a URI resource parameter/ID.
                responses:
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires an user authentication.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error
              put:
                description: Updates a specific residentialmoveindate specified by the URI resource parameter/ID.
                responses:
                  '200':
                    description: OK – Everything is working.
                  '304':
                    description: Not Modified – The client can use cached data.
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires a user.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error.
              delete:
                description: Deletes a specific residentialmoveindate specified by the URI resource parameter/ID.
                responses:
                  '204':
                    description: OK – The resource was successfully deleted.
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires user authentication.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error.
              uriParameters:
                residentialmoveindatesid:
                  example: ADBC1111211111114111111111D1111V
                  type: string
                  displayName: ResidentialMoveInDate Identifier
          /pathstatuses:
            description: 'Operations performed on the set of all HMIS pathstatuses within the system, and for adding a new pathstatus to the set of pathstatuses '
            type:
              collection:
                schema_id_json: id_pathstatus_json
                schema_json: pathstatus_json
                schema_ids_json: pathstatus_ids_json
                schema_json_example: |-
                  {
                     "pathstatus":{
                        "clientenrolledinpath":-170011723306562553,
                        "dateOfStatus":"04-16-2016 11:11",
                        "clientEnrolledInPath":123545,
                        "reasonNotEnrolled":99
                     }
                  }
                schema_ids_json_example: |-
                  {
                     "pathstatuses":{
                        "pagination":{
                           "from":0,
                           "returned":1,
                           "total":1,
                           "maximum":30,
                           "sort":{

                           }
                        },
                        "pathstatuses":[
                           {
                              "pathstatusId":"5c70ea90-df48-4a5a-8d48-6fee70e3c4ec",
                              "clientEnrolledInPath":123545,
                              "reasonNotEnrolled":99,
                              "dateOfStatus":"04-16-2016"
                           }
                        ]
                     }
                  }
                schema_id_json_example: |-
                  {
                     "pathstatus":{
                        "pathstatusId":"478449dc-c26a-4784-bf16-93df65898ed2"
                     }
                  }
            get:
              description: 'Searches for pathstatus.  Returns a list of pathstatus ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.'
              responses:
                '400':
                  description: Bad Request – The request was invalid or cannot be served.
                '403':
                  description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                '404':
                  description: Not found – There is no resource behind the URI.
                '500':
                  description: 500 – Internal Server Error
            post:
              description: |
                Add a pathstatus
              responses:
                '400':
                  description: Bad Request – The request was invalid or cannot be served.
                '401':
                  description: Unauthorized – The request requires user authentication.
                '403':
                  description: 'Forbidden – The server understood the request, but is refusing it or access is not allowed.'
                '404':
                  description: Not found – There is no resource behind the URI.
                '422':
                  description: Unprocessable Entity - Request body is incorrect.
                '500':
                  description: 500 – Internal Server Error.
            '/{pathstatusid}':
              type:
                member:
                  schema_json: pathstatus_json
                  schema_id_json: pathstatus_id_json
                  schema_json_example: |-
                    {
                       "pathstatus":{
                          "clientenrolledinpath":-170011723306562553,
                          "dateOfStatus":"04-16-2016 11:11",
                          "clientEnrolledInPath":123545,
                          "reasonNotEnrolled":99
                       }
                    }
                  schema_id_json_example: |-
                    {
                       "pathstatus":{
                          "pathstatusId":"5c70ea90-df48-4a5a-8d48-6fee70e3c4ec",
                          "clientEnrolledInPath":123545,
                          "reasonNotEnrolled":99,
                          "dateOfStatus":"04-16-2016"
                       }
                    }
              get:
                description: Gets a pathstatus using a URI resource parameter/ID.
                responses:
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires an user authentication.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error
              put:
                description: Updates a specific pathstatus specified by the URI resource parameter/ID.
                responses:
                  '200':
                    description: OK – Everything is working.
                  '304':
                    description: Not Modified – The client can use cached data.
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires a user.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error.
              delete:
                description: Deletes a specific pathstatus specified by the URI resource parameter/ID.
                responses:
                  '204':
                    description: OK – The resource was successfully deleted.
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires user authentication.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error.
              uriParameters:
                pathstatusid:
                  example: ADBC1111211111114111111111D1111V
                  type: string
                  displayName: PathStatus Identifier
          /entryrhsps:
            description: 'Operations performed on the set of all HMIS entryrhsps within the system, and for adding a new entryrhsp to the set of entryrhsps '
            type:
              collection:
                schema_id_json: id_entryrhsp_json
                schema_json: entryrhsp_json
                schema_ids_json: entryrhsp_ids_json
                schema_json_example: |-
                  {
                     "entryrhsp":{
                        "worstHousingSituation":781317225
                     }
                  }
                schema_ids_json_example: |-
                  {
                     "entryrhsps":{
                        "pagination":{
                           "from":0,
                           "returned":1,
                           "total":1,
                           "maximum":30,
                           "sort":{

                           }
                        },
                        "entryrhsps":[
                           {
                              "entryrhspId":"4fe746e5-0323-46b9-866f-209d81dbda51",
                              "worstHousingSituation":781317225
                           }
                        ]
                     }
                  }
                schema_id_json_example: |-
                  {
                     "entryrhsp":{
                        "entryrhspId":"c10f31e4-9e09-4fab-b788-e89fc074c9f8"
                     }
                  }
            get:
              description: 'Searches for entryrhsp.  Returns a list of entryrhsp ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.'
              responses:
                '400':
                  description: Bad Request – The request was invalid or cannot be served.
                '403':
                  description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                '404':
                  description: Not found – There is no resource behind the URI.
                '500':
                  description: 500 – Internal Server Error
            post:
              description: |
                Add a entryrhsp
              responses:
                '400':
                  description: Bad Request – The request was invalid or cannot be served.
                '401':
                  description: Unauthorized – The request requires user authentication.
                '403':
                  description: 'Forbidden – The server understood the request, but is refusing it or access is not allowed.'
                '404':
                  description: Not found – There is no resource behind the URI.
                '422':
                  description: Unprocessable Entity - Request body is incorrect.
                '500':
                  description: 500 – Internal Server Error.
            '/{entryrhspid}':
              type:
                member:
                  schema_json: entryrhsp_json
                  schema_id_json: entryrhsp_id_json
                  schema_json_example: |-
                    {
                       "entryrhsp":{
                          "worstHousingSituation":781317225
                       }
                    }
                  schema_id_json_example: |-
                    {
                       "entryrhsp":{
                          "entryrhspId":"c10f31e4-9e09-4fab-b788-e89fc074c9f8",
                          "worstHousingSituation":781317225
                       }
                    }
              get:
                description: Gets a entryrhsp using a URI resource parameter/ID.
                responses:
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires an user authentication.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error
              put:
                description: Updates a specific entryrhsp specified by the URI resource parameter/ID.
                responses:
                  '200':
                    description: OK – Everything is working.
                  '304':
                    description: Not Modified – The client can use cached data.
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires a user.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error.
              delete:
                description: Deletes a specific entryrhsp specified by the URI resource parameter/ID.
                responses:
                  '204':
                    description: OK – The resource was successfully deleted.
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires user authentication.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error.
              uriParameters:
                entryrhspid:
                  example: ADBC1111211111114111111111D1111V
                  type: string
                  displayName: Entryrhsp Identifier
          /entryrhys:
            description: 'Operations performed on the set of all HMIS entryrhys within the system, and for adding a new entryrhy to the set of entryrhys '
            type:
              collection:
                schema_id_json: id_entryrhy_json
                schema_json: entryrhy_json
                schema_ids_json: entryrhy_ids_json
                schema_json_example: |-
                  {
                     "entryrhy":{
                        "formerlyWardChildWelfrForestCare":99,
                        "yearsChildWelfrForestCare":2,
                        "monthsChildWelfrForestCare":4538,
                        "formerlyWardOfJuvenileJustice":8,
                        "yearsJuvenileJustice":3,
                        "houseHoldDynamics":1,
                        "sexualOrientatiionGenderIdentityYouth":99,
                        "sexualOrientatiionGenderIdentityFamilyMbr":1,
                        "housingIssuesYouth":99,
                        "housingIssuesFamilyMbr":1,
                        "schoolEducationIssuesYouth":99,
                        "schoolEducationIssuesFamilyMbr":1,
                        "unemployementYouth":99,
                        "unemployementFamilyMbr":1,
                        "mentalHealthIssuesYouth":99,
                        "mentalHealthIssuesFamilyMbr":1,
                        "healthIssuesYouth":1,
                        "healthIssuesFamilyMbr":99,
                        "physicalDisabilityYouth":1,
                        "physicalDisabilityFamilyMbr":99,
                        "mentalDisabilityYouth":99,
                        "mentalDisabilityFamilyMbr":99,
                        "abuseAndNeglectYouth":99,
                        "abuseAndNeglectFamilyMbr":99,
                        "alcoholDrugAbuseYouth":99,
                        "alcoholDrugAbuseFamilyMbr":99,
                        "insufficientIncomeToSupportYouth":1,
                        "activeMilitaryParent":1,
                        "incarceratedParent":1,
                        "incarceratedParentStatus":3,
                        "referralSource":663,
                        "countOutReachReferralApproaches":234,
                        "exchangeForSex":8,
                        "exchangeForSexPastThreeMonths":9,
                        "countOfExchangeForSex":4,
                        "askedOfForcedToExchangeForSex":8,
                        "askedOfForcedToExchangeForSexPastThreeMonths":8,
                        "workPlaceViolenceThreat":1,
                        "workPlacePromiseDifference":8,
                        "coercedToContinueWork":9,
                        "laborExploitPastThreeMonths":420
                     }
                  }
                schema_ids_json_example: |-
                  {
                     "entryrhys":{
                        "pagination":{
                           "from":0,
                           "returned":1,
                           "total":1,
                           "maximum":30,
                           "sort":{

                           }
                        },
                        "entryrhys":[
                           {
                              "entryrhyId":"6304041b-b997-4b01-9987-63d7e78070f1",
                              "formerlyWardChildWelfrForestCare":99,
                              "yearsChildWelfrForestCare":2,
                              "monthsChildWelfrForestCare":4538,
                              "formerlyWardOfJuvenileJustice":8,
                              "yearsJuvenileJustice":3,
                              "houseHoldDynamics":1,
                              "sexualOrientatiionGenderIdentityYouth":99,
                              "sexualOrientatiionGenderIdentityFamilyMbr":1,
                              "housingIssuesYouth":99,
                              "housingIssuesFamilyMbr":1,
                              "schoolEducationIssuesYouth":99,
                              "schoolEducationIssuesFamilyMbr":1,
                              "unemployementYouth":99,
                              "unemployementFamilyMbr":1,
                              "mentalHealthIssuesYouth":99,
                              "mentalHealthIssuesFamilyMbr":1,
                              "healthIssuesYouth":1,
                              "healthIssuesFamilyMbr":99,
                              "physicalDisabilityYouth":1,
                              "physicalDisabilityFamilyMbr":99,
                              "mentalDisabilityYouth":99,
                              "mentalDisabilityFamilyMbr":99,
                              "abuseAndNeglectYouth":99,
                              "abuseAndNeglectFamilyMbr":99,
                              "alcoholDrugAbuseYouth":99,
                              "alcoholDrugAbuseFamilyMbr":99,
                              "insufficientIncomeToSupportYouth":1,
                              "activeMilitaryParent":1,
                              "incarceratedParent":1,
                              "incarceratedParentStatus":3,
                              "referralSource":663,
                              "countOutReachReferralApproaches":234,
                              "exchangeForSex":8,
                              "exchangeForSexPastThreeMonths":9,
                              "countOfExchangeForSex":4,
                              "askedOfForcedToExchangeForSex":8,
                              "askedOfForcedToExchangeForSexPastThreeMonths":8,
                              "workPlaceViolenceThreat":1,
                              "workPlacePromiseDifference":8,
                              "coercedToContinueWork":9,
                              "laborExploitPastThreeMonths":420
                           }
                        ]
                     }
                  }
                schema_id_json_example: |-
                  {
                     "entryrhy":{
                        "entryrhyId":"6304041b-b997-4b01-9987-63d7e78070f1"
                     }
                  }
            get:
              description: 'Searches for entryrhy.  Returns a list of entryrhy ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.'
              responses:
                '400':
                  description: Bad Request – The request was invalid or cannot be served.
                '403':
                  description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                '404':
                  description: Not found – There is no resource behind the URI.
                '500':
                  description: 500 – Internal Server Error
            post:
              description: |
                Add a entryrhy
              responses:
                '400':
                  description: Bad Request – The request was invalid or cannot be served.
                '401':
                  description: Unauthorized – The request requires user authentication.
                '403':
                  description: 'Forbidden – The server understood the request, but is refusing it or access is not allowed.'
                '404':
                  description: Not found – There is no resource behind the URI.
                '422':
                  description: Unprocessable Entity - Request body is incorrect.
                '500':
                  description: 500 – Internal Server Error.
            '/{entryrhyid}':
              type:
                member:
                  schema_json: entryrhy_json
                  schema_id_json: entryrhy_id_json
                  schema_json_example: |-
                    {
                       "entryrhy":{
                          "formerlyWardChildWelfrForestCare":99,
                          "yearsChildWelfrForestCare":2,
                          "monthsChildWelfrForestCare":4538,
                          "formerlyWardOfJuvenileJustice":8,
                          "yearsJuvenileJustice":3,
                          "houseHoldDynamics":1,
                          "sexualOrientatiionGenderIdentityYouth":99,
                          "sexualOrientatiionGenderIdentityFamilyMbr":1,
                          "housingIssuesYouth":99,
                          "housingIssuesFamilyMbr":1,
                          "schoolEducationIssuesYouth":99,
                          "schoolEducationIssuesFamilyMbr":1,
                          "unemployementYouth":99,
                          "unemployementFamilyMbr":1,
                          "mentalHealthIssuesYouth":99,
                          "mentalHealthIssuesFamilyMbr":1,
                          "healthIssuesYouth":1,
                          "healthIssuesFamilyMbr":99,
                          "physicalDisabilityYouth":1,
                          "physicalDisabilityFamilyMbr":99,
                          "mentalDisabilityYouth":99,
                          "mentalDisabilityFamilyMbr":99,
                          "abuseAndNeglectYouth":99,
                          "abuseAndNeglectFamilyMbr":99,
                          "alcoholDrugAbuseYouth":99,
                          "alcoholDrugAbuseFamilyMbr":99,
                          "insufficientIncomeToSupportYouth":1,
                          "activeMilitaryParent":1,
                          "incarceratedParent":1,
                          "incarceratedParentStatus":3,
                          "referralSource":663,
                          "countOutReachReferralApproaches":234,
                          "exchangeForSex":8,
                          "exchangeForSexPastThreeMonths":9,
                          "countOfExchangeForSex":4,
                          "askedOfForcedToExchangeForSex":8,
                          "askedOfForcedToExchangeForSexPastThreeMonths":8,
                          "workPlaceViolenceThreat":1,
                          "workPlacePromiseDifference":8,
                          "coercedToContinueWork":9,
                          "laborExploitPastThreeMonths":420
                       }
                    }
                  schema_id_json_example: |-
                    {
                       "entryrhy":{
                          "entryrhyId":"6304041b-b997-4b01-9987-63d7e78070f1",
                          "formerlyWardChildWelfrForestCare":99,
                          "yearsChildWelfrForestCare":2,
                          "monthsChildWelfrForestCare":4538,
                          "formerlyWardOfJuvenileJustice":8,
                          "yearsJuvenileJustice":3,
                          "houseHoldDynamics":1,
                          "sexualOrientatiionGenderIdentityYouth":99,
                          "sexualOrientatiionGenderIdentityFamilyMbr":1,
                          "housingIssuesYouth":99,
                          "housingIssuesFamilyMbr":1,
                          "schoolEducationIssuesYouth":99,
                          "schoolEducationIssuesFamilyMbr":1,
                          "unemployementYouth":99,
                          "unemployementFamilyMbr":1,
                          "mentalHealthIssuesYouth":99,
                          "mentalHealthIssuesFamilyMbr":1,
                          "healthIssuesYouth":1,
                          "healthIssuesFamilyMbr":99,
                          "physicalDisabilityYouth":1,
                          "physicalDisabilityFamilyMbr":99,
                          "mentalDisabilityYouth":99,
                          "mentalDisabilityFamilyMbr":99,
                          "abuseAndNeglectYouth":99,
                          "abuseAndNeglectFamilyMbr":99,
                          "alcoholDrugAbuseYouth":99,
                          "alcoholDrugAbuseFamilyMbr":99,
                          "insufficientIncomeToSupportYouth":1,
                          "activeMilitaryParent":1,
                          "incarceratedParent":1,
                          "incarceratedParentStatus":3,
                          "referralSource":663,
                          "countOutReachReferralApproaches":234,
                          "exchangeForSex":8,
                          "exchangeForSexPastThreeMonths":9,
                          "countOfExchangeForSex":4,
                          "askedOfForcedToExchangeForSex":8,
                          "askedOfForcedToExchangeForSexPastThreeMonths":8,
                          "workPlaceViolenceThreat":1,
                          "workPlacePromiseDifference":8,
                          "coercedToContinueWork":9,
                          "laborExploitPastThreeMonths":420
                       }
                    }
              get:
                description: Gets a entryrhy using a URI resource parameter/ID.
                responses:
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires an user authentication.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error
              put:
                description: Updates a specific entryrhy specified by the URI resource parameter/ID.
                responses:
                  '200':
                    description: OK – Everything is working.
                  '304':
                    description: Not Modified – The client can use cached data.
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires a user.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error.
              delete:
                description: Deletes a specific entryrhy specified by the URI resource parameter/ID.
                responses:
                  '204':
                    description: OK – The resource was successfully deleted.
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires user authentication.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error.
              uriParameters:
                entryrhyid:
                  example: ADBC1111211111114111111111D1111V
                  type: string
                  displayName: Entryrhy Identifier
          /entryssvfs:
            description: 'Operations performed on the set of all HMIS entryssvfs within the system, and for adding a new entryssvf to the set of entryssvfs '
            type:
              collection:
                schema_id_json: id_entryssvf_json
                schema_json: entryssvf_json
                schema_ids_json: entryssvf_ids_json
                schema_json_example: |-
                  {
                     "entryssvf":{
                        "percentami":1,
                        "lastPermanentStreet":"T3Jjj1bpCBUlIZKpFdty",
                        "lastPermanentCity":"kqF7MpodPSizewhiiTuX",
                        "lastPermanentState":"F8NdGzYX5ghd8lam535D",
                        "lastPermanentZip":"mIJY7hM4DW",
                        "addressDataQuality":-1958091791,
                        "hpScreenScore":-2033078268,
                        "vamcStaction":"DcM25FFnWsll4D9HAsjCeaqzRDyvM0"
                     }
                  }
                schema_ids_json_example: |-
                  {
                     "entryssvfs":{
                        "pagination":{
                           "from":0,
                           "returned":1,
                           "total":1,
                           "maximum":30,
                           "sort":{

                           }
                        },
                        "entryssvfs":[
                           {
                              "entryssvfId":"9f992ad8-ab78-474e-a2ae-c7c9db551d27",
                              "percentami":1,
                              "lastPermanentStreet":"T3Jjj1bpCBUlIZKpFdty                              ",
                              "lastPermanentCity":"kqF7MpodPSizewhiiTuX                              ",
                              "lastPermanentState":"F8NdGzYX5ghd8lam535D                              ",
                              "lastPermanentZip":"mIJY7hM4DW                                        ",
                              "addressDataQuality":-1958091791,
                              "hpScreenScore":-2033078268,
                              "vamcStaction":"DcM25FFnWsll4D9HAsjCeaqzRDyvM0                    "
                           }
                        ]
                     }
                  }
                schema_id_json_example: |-
                  {
                    "entryssvf": {
                      "entryssvfId": "7b66e9d4-49e5-4584-a8cf-fe4f9a5882b8"
                    }
                  }
            get:
              description: 'Searches for entryssvf.  Returns a list of entryssvf ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.'
              responses:
                '400':
                  description: Bad Request – The request was invalid or cannot be served.
                '403':
                  description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                '404':
                  description: Not found – There is no resource behind the URI.
                '500':
                  description: 500 – Internal Server Error
            post:
              description: |
                Add a entryssvf
              responses:
                '400':
                  description: Bad Request – The request was invalid or cannot be served.
                '401':
                  description: Unauthorized – The request requires user authentication.
                '403':
                  description: 'Forbidden – The server understood the request, but is refusing it or access is not allowed.'
                '404':
                  description: Not found – There is no resource behind the URI.
                '422':
                  description: Unprocessable Entity - Request body is incorrect.
                '500':
                  description: 500 – Internal Server Error.
            '/{entryssvfid}':
              type:
                member:
                  schema_json: entryssvf_json
                  schema_id_json: entryssvf_id_json
                  schema_json_example: |-
                    {
                       "entryssvf":{
                          "percentami":1,
                          "lastPermanentStreet":"T3Jjj1bpCBUlIZKpFdty",
                          "lastPermanentCity":"kqF7MpodPSizewhiiTuX",
                          "lastPermanentState":"F8NdGzYX5ghd8lam535D",
                          "lastPermanentZip":"mIJY7hM4DW",
                          "addressDataQuality":-1958091791,
                          "hpScreenScore":-2033078268,
                          "vamcStaction":"DcM25FFnWsll4D9HAsjCeaqzRDyvM0"
                       }
                    }
                  schema_id_json_example: |-
                    {
                       "entryssvf":{
                          "entryssvfId":"9f992ad8-ab78-474e-a2ae-c7c9db551d27",
                          "percentami":2,
                          "lastPermanentStreet":"T3Jjj1bpCBUlIZKpFdty                              ",
                          "lastPermanentCity":"kqF7MpodPSizewhiiTuX                              ",
                          "lastPermanentState":"F8NdGzYX5ghd8lam535D                              ",
                          "lastPermanentZip":"mIJY7hM4DW                                        ",
                          "addressDataQuality":-1958091791,
                          "hpScreenScore":-2033078268,
                          "vamcStaction":"DcM25FFnWsll4D9HAsjCeaqzRDyvM0                    "
                       }
                    }
              get:
                description: Gets a entryssvf using a URI resource parameter/ID.
                responses:
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires an user authentication.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error
              put:
                description: Updates a specific entryssvf specified by the URI resource parameter/ID.
                responses:
                  '200':
                    description: OK – Everything is working.
                  '304':
                    description: Not Modified – The client can use cached data.
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires a user.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error.
              delete:
                description: Deletes a specific entryssvf specified by the URI resource parameter/ID.
                responses:
                  '204':
                    description: OK – The resource was successfully deleted.
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires user authentication.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error.
              uriParameters:
                entryssvfid:
                  example: ADBC1111211111114111111111D1111V
                  type: string
                  displayName: Entryssvf Identifier
          /servicefareferrals:
            description: 'Operations performed on the set of all HMIS servicefareferrals within the system, and for adding a new servicefareferral to the set of servicefareferrals '
            type:
              collection:
                schema_id_json: id_servicefareferral_json
                schema_json: servicefareferral_json
                schema_ids_json: servicefareferrals_ids_json
                schema_json_example: |-
                  {
                     "servicefareferral":{
                        "serviceCategory":8945,
                        "funderList":1234,
                        "typeProvided":4566,
                        "otherTypeProvided":"Test",
                        "subTypeProvided":1234,
                        "referralOutcome":1234,
                        "faAmount":20.4
                     }
                  }
                schema_ids_json_example: |-
                  {
                     "servicefareferrals":{
                        "pagination":{
                           "from":0,
                           "returned":1,
                           "total":0,
                           "maximum":30,
                           "sort":{

                           }
                        },
                        "servicefareferrals":[
                           {
                              "servicefareferralId":"bf09eb50-b641-486e-bf7e-49e9faa37c41",
                              "serviceCategory":8945,
                              "funderList":1234,
                              "typeProvided":4566,
                              "otherTypeProvided":"Test",
                              "subTypeProvided":1234,
                              "faAmount":20.40,
                              "referralOutcome":1234
                           }
                        ]
                     }
                  }
                schema_id_json_example: |-
                  {
                     "servicefareferral":{
                        "servicefareferralId":"bf09eb50-b641-486e-bf7e-49e9faa37c41"
                     }
                  }
            get:
              description: 'Searches for servicefareferral.  Returns a list of servicefareferral ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.'
              responses:
                '400':
                  description: Bad Request – The request was invalid or cannot be served.
                '403':
                  description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                '404':
                  description: Not found – There is no resource behind the URI.
                '500':
                  description: 500 – Internal Server Error
            post:
              description: |
                Add a servicefareferral
              responses:
                '400':
                  description: Bad Request – The request was invalid or cannot be served.
                '401':
                  description: Unauthorized – The request requires user authentication.
                '403':
                  description: 'Forbidden – The server understood the request, but is refusing it or access is not allowed.'
                '404':
                  description: Not found – There is no resource behind the URI.
                '422':
                  description: Unprocessable Entity - Request body is incorrect.
                '500':
                  description: 500 – Internal Server Error.
            '/{servicefareferralid}':
              type:
                member:
                  schema_json: servicefareferral_json
                  schema_id_json: servicefareferral_id_json
                  schema_json_example: |-
                    {
                       "servicefareferral":{
                          "serviceCategory":8945,
                          "funderList":1234,
                          "typeProvided":4566,
                          "otherTypeProvided":"Test",
                          "subTypeProvided":1234,
                          "referralOutcome":1234,
                          "faAmount":20.4
                       }
                    }
                  schema_id_json_example: |-
                    {
                       "servicefareferral":{
                          "servicefareferralId":"408f4b64-4044-4e6d-86df-a1c080de3c65",
                          "serviceCategory":263773532,
                          "funderList":745361973,
                          "typeProvided":2086918905,
                          "otherTypeProvided":"jiXUV3kg8qIAsApVR40P",
                          "subTypeProvided":-36199245,
                          "faAmount":3.14,
                          "referralOutcome":804780709
                       }
                    }
              get:
                description: Gets a servicefareferral using a URI resource parameter/ID.
                responses:
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires an user authentication.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error
              put:
                description: Updates a specific servicefareferral specified by the URI resource parameter/ID.
                responses:
                  '200':
                    description: OK – Everything is working.
                  '304':
                    description: Not Modified – The client can use cached data.
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires a user.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error.
              delete:
                description: Deletes a specific servicefareferral specified by the URI resource parameter/ID.
                responses:
                  '204':
                    description: OK – The resource was successfully deleted.
                  '400':
                    description: Bad Request – The request was invalid or cannot be served.
                  '401':
                    description: Unauthorized – The request requires user authentication.
                  '403':
                    description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
                  '404':
                    description: Not found – There is no resource behind the URI.
                  '500':
                    description: Internal Server Error.
              uriParameters:
                servicefareferralid:
                  example: ADBC1111211111114111111111D1111V
                  type: string
                  displayName: ServiceFaReferral Identifier
      /veteraninfos:
        description: 'Operations performed on the set of all HMIS veteraninfos within the system, and for adding a new veteraninfo to the set of veteraninfos '
        type:
          collection:
            schema_id_json: id_veteraninfo_json
            schema_json: veteraninfo_json
            schema_ids_json: veteraninfo_ids_json
            schema_json_example: |-
              {
                 "veteranInfo":{
                    "yearEntrdService":1164728538,
                    "yearSeperated":-410173299,
                    "worldWar2":1,
                    "koreanWar":8,
                    "vietnamWar":9,
                    "desertStorm":8,
                    "afghanistanOef":99,
                    "iraqOif":1,
                    "iraqOnd":1,
                    "otherTheater":9,
                    "militaryBranch":2,
                    "dischargeStatus":5
                 }
              }
            schema_ids_json_example: |-
              {
                 "veteranInfos":{
                    "pagination":{
                       "from":0,
                       "returned":1,
                       "total":1,
                       "maximum":30,
                       "sort":{

                       }
                    },
                    "veteranInfos":[
                       {
                          "veteranInfoId":"d0f7f763-dba8-4bc5-9602-d6e3775c59d3",
                          "yearEntrdService":1164728538,
                          "yearSeperated":-410173299,
                          "worldWar2":1,
                          "koreanWar":8,
                          "vietnamWar":9,
                          "desertStorm":8,
                          "afghanistanOef":99,
                          "iraqOif":1,
                          "iraqOnd":1,
                          "otherTheater":9,
                          "militaryBranch":2,
                          "dischargeStatus":5
                       }
                    ]
                 }
              }
            schema_id_json_example: |-
              {
                 "veteranInfo":{
                    "veteranInfoId":"d0f7f763-dba8-4bc5-9602-d6e3775c59d3"
                 }
              }
        get:
          description: 'Searches for veteraninfo.  Returns a list of veteraninfo ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.'
          responses:
            '400':
              description: Bad Request – The request was invalid or cannot be served.
            '403':
              description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
            '404':
              description: Not found – There is no resource behind the URI.
            '500':
              description: 500 – Internal Server Error
        post:
          description: |
            Add a veteraninfo
          responses:
            '400':
              description: Bad Request – The request was invalid or cannot be served.
            '401':
              description: Unauthorized – The request requires user authentication.
            '403':
              description: 'Forbidden – The server understood the request, but is refusing it or access is not allowed.'
            '404':
              description: Not found – There is no resource behind the URI.
            '422':
              description: Unprocessable Entity - Request body is incorrect.
            '500':
              description: 500 – Internal Server Error.
        '/{veteraninfoid}':
          type:
            member:
              schema_json: veteraninfo_json
              schema_id_json: veteraninfo_id_json
              schema_json_example: |-
                {
                   "veteranInfo":{
                      "yearEntrdService":1164728538,
                      "yearSeperated":-410173299,
                      "worldWar2":1,
                      "koreanWar":8,
                      "vietnamWar":9,
                      "desertStorm":8,
                      "afghanistanOef":99,
                      "iraqOif":1,
                      "iraqOnd":1,
                      "otherTheater":9,
                      "militaryBranch":2,
                      "dischargeStatus":5
                   }
                }
              schema_id_json_example: |
                {
                   "veteranInfo":{
                      "veteranInfoId":"bf09eb50-b641-486e-bf7e-49e9faa37c41",
                      "yearEnteredService":1970,
                      "yearSeparated":1972,
                      "worldWar2":1234,
                      "koreanWar":1,
                      "vietnamWar":0,
                      "desertStorm":0,
                      "afghanistanOef":1,
                      "iraqOif":1,
                      "iraqOnd":0,
                      "otherTheater":1,
                      "militaryBranch":1,
                      "dischargeStatus":0
                   }
                }
          get:
            description: Gets a veteraninfo using a URI resource parameter/ID.
            responses:
              '400':
                description: Bad Request – The request was invalid or cannot be served.
              '401':
                description: Unauthorized – The request requires an user authentication.
              '403':
                description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
              '404':
                description: Not found – There is no resource behind the URI.
              '500':
                description: Internal Server Error
          put:
            description: Updates a specific veteraninfo specified by the URI resource parameter/ID.
            responses:
              '200':
                description: OK – Everything is working.
              '304':
                description: Not Modified – The client can use cached data.
              '400':
                description: Bad Request – The request was invalid or cannot be served.
              '401':
                description: Unauthorized – The request requires a user.
              '403':
                description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
              '404':
                description: Not found – There is no resource behind the URI.
              '500':
                description: Internal Server Error.
          delete:
            description: Deletes a specific veteraninfo specified by the URI resource parameter/ID.
            responses:
              '204':
                description: OK – The resource was successfully deleted.
              '400':
                description: Bad Request – The request was invalid or cannot be served.
              '401':
                description: Unauthorized – The request requires user authentication.
              '403':
                description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
              '404':
                description: Not found – There is no resource behind the URI.
              '500':
                description: Internal Server Error.
          uriParameters:
            veteraninfoid:
              example: ADBC1111211111114111111111D1111V
              type: string
              displayName: VeteranInfo Identifier
  /projects:
    description: 'Operations performed on the set of all HMIS projects within the system, and for adding a new project to the set of projects '
    type:
      collection:
        schema_id_json: id_projects_json
        schema_json: project_json
        schema_ids_json: projects_ids_json
        schema_json_example: |-
          {
             "project":{
                "projectName":"ProjectName_1459515376900",
                "projectCommonName":"ProjectCommonName_1459515376900",
                "continuumProject":0,
                "projectType":2,
                "residentialAffiliation":0,
                "targetPopulation":3,
                "trackingMethod":0
             }
          }
        schema_ids_json_example: |-
          {
            "projects": {
              "pagination": {
                "from": 0,
                "returned": 1,
                "total": 1,
                "maximum": 30,
                "sort": {}
              },
              "projects": [
                {
                  "projectId": "0dda7333-0592-4fa7-ba79-1fe2dfaaff4e",
                  "projectName": "Homeless People Project",
                  "projectCommonName": "Homeless People Project",
                  "continuumProject": 0,
                  "projectType": 1,
                  "residentialAffiliation": 0,
                  "targetPopulation": 1,
                  "trackingMethod": 0,
                  "dateCreated": "03-15-2016"
                }
              ]
            }
          }
        schema_id_json_example: |-
          {
             "project":{
                "projectId":"0a4819f4-7aff-4beb-b525-26e46c4f5b75"
             }
          }
    get:
      description: 'Searches for project.  Returns a list of project ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.'
      responses:
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: 500 – Internal Server Error
    post:
      description: |
        Add a project
      responses:
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: 'Forbidden – The server understood the request, but is refusing it or access is not allowed.'
        '404':
          description: Not found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: 500 – Internal Server Error.
    '/{projectsid}':
      type:
        member:
          schema_json: project_json
          schema_id_json: projects_id_json
          schema_id_json_example: |-
            {
               "project":{
                  "projectId":"d12a5b43-9411-4fe3-8cd3-0778459d0911",
                  "projectName":"ProjectName_1459515376900",
                  "projectCommonName":"ProjectCommonName_1459515376900",
                  "continuumProject":0,
                  "projectType":2,
                  "targetPopulation":3,
                  "trackingMethod":0,
                  "dateCreated":"05-11-2016",
                  "dateUpdated":"05-11-2016"
               }
            }
          schema_json_example: |-
            {
               "project":{
                  "projectName":"ProjectName_1459515376900",
                  "projectCommonName":"ProjectCommonName_1459515376900",
                  "continuumProject":0,
                  "projectType":2,
                  "residentialAffiliation":0,
                  "targetPopulation":3,
                  "trackingMethod":0
               }
            }
      get:
        description: Gets a project using a URI resource parameter/ID.
        responses:
          '400':
            description: Bad Request – The request was invalid or cannot be served.
          '401':
            description: Unauthorized – The request requires an user authentication.
          '403':
            description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
          '404':
            description: Not found – There is no resource behind the URI.
          '500':
            description: Internal Server Error
      put:
        description: Updates a specific project specified by the URI resource parameter/ID.
        responses:
          '200':
            description: OK – Everything is working.
          '304':
            description: Not Modified – The client can use cached data.
          '400':
            description: Bad Request – The request was invalid or cannot be served.
          '401':
            description: Unauthorized – The request requires a user.
          '403':
            description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
          '404':
            description: Not found – There is no resource behind the URI.
          '500':
            description: Internal Server Error.
      delete:
        description: Deletes a specific project specified by the URI resource parameter/ID.
        responses:
          '204':
            description: OK – The resource was successfully deleted.
          '400':
            description: Bad Request – The request was invalid or cannot be served.
          '401':
            description: Unauthorized – The request requires user authentication.
          '403':
            description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
          '404':
            description: Not found – There is no resource behind the URI.
          '500':
            description: Internal Server Error.
      uriParameters:
        projectsid:
          example: ADBC1111211111114111111111D1111V
          type: string
          displayName: Project Identifier
      /projectcocs:
        description: 'Operations performed on the set of all HMIS projectcocs within the system, and for adding a new projectcoc to the set of projectcocs '
        type:
          collection:
            schema_id_json: id_projectcoc_json
            schema_json: projectcoc_json
            schema_ids_json: projectcoc_ids_json
            schema_json_example: "{\r\n   \"projectcoc\":{\r\n      \"coccode\":\"HPltHrjWAdDWKDYBj7dvUfzEvrNc2Y\"\r\n   }\r\n}"
            schema_ids_json_example: |-
              {
                 "projectcocs":{
                    "pagination":{
                       "from":0,
                       "returned":1,
                       "total":1,
                       "maximum":30,
                       "sort":{

                       }
                    },
                    "projectcocs":[
                       {
                          "projectcocId":"a72c1666-cf51-47e4-8c2e-6ae5b8688cca",
                          "coccode":"HPltHrjWAdDWKDYBj7dvUfzEvrNc2Y",
                          "dateCreated":"05-11-2016"
                       }
                    ]
                 }
              }
            schema_id_json_example: "{\r\n   \"projectcoc\":{\r\n      \"projectcocId\":\"b71b97e5-389e-4e01-971c-c106a3776df7\"\r\n   }\r\n}"
        get:
          description: 'Searches for projectcoc.  Returns a list of projectcoc ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.'
          responses:
            '400':
              description: Bad Request – The request was invalid or cannot be served.
            '403':
              description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
            '404':
              description: Not found – There is no resource behind the URI.
            '500':
              description: 500 – Internal Server Error
        post:
          description: |
            Add a projectcoc
          responses:
            '400':
              description: Bad Request – The request was invalid or cannot be served.
            '401':
              description: Unauthorized – The request requires user authentication.
            '403':
              description: 'Forbidden – The server understood the request, but is refusing it or access is not allowed.'
            '404':
              description: Not found – There is no resource behind the URI.
            '422':
              description: Unprocessable Entity - Request body is incorrect.
            '500':
              description: 500 – Internal Server Error.
        '/{projectcocid}':
          type:
            member:
              schema_json: projectcoc_json
              schema_id_json: projectcoc_id_json
              schema_json_example: "{\r\n   \"projectcoc\":{\r\n      \"coccode\":\"HPltHrjWAdDWKDYBj7dvUfzEvrNc2Y\"\r\n   }\r\n}"
              schema_id_json_example: |-
                {
                   "projectcoc":{
                      "projectcocId":"a72c1666-cf51-47e4-8c2e-6ae5b8688cca",
                      "coccode":"HPltHrjWAdDWKDYBj7dvUfzEvrNc2Y",
                      "dateCreated":"05-11-2016",
                      "dateUpdated":"05-11-2016"
                   }
                }
          get:
            description: Gets a projectcoc using a URI resource parameter/ID.
            responses:
              '400':
                description: Bad Request – The request was invalid or cannot be served.
              '401':
                description: Unauthorized – The request requires an user authentication.
              '403':
                description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
              '404':
                description: Not found – There is no resource behind the URI.
              '500':
                description: Internal Server Error
          put:
            description: Updates a specific projectcoc specified by the URI resource parameter/ID.
            responses:
              '200':
                description: OK – Everything is working.
              '304':
                description: Not Modified – The client can use cached data.
              '400':
                description: Bad Request – The request was invalid or cannot be served.
              '401':
                description: Unauthorized – The request requires a user.
              '403':
                description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
              '404':
                description: Not found – There is no resource behind the URI.
              '500':
                description: Internal Server Error.
          delete:
            description: Deletes a specific projectcoc specified by the URI resource parameter/ID.
            responses:
              '204':
                description: OK – The resource was successfully deleted.
              '400':
                description: Bad Request – The request was invalid or cannot be served.
              '401':
                description: Unauthorized – The request requires user authentication.
              '403':
                description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
              '404':
                description: Not found – There is no resource behind the URI.
              '500':
                description: Internal Server Error.
          uriParameters:
            projectcocid:
              example: ADBC1111211111114111111111D1111V
              type: string
              displayName: ProjectCoc Identifier
      /inventories:
        description: 'Operations performed on the set of all HMIS inventories within the system, and for adding a new inventory to the set of inventories '
        type:
          collection:
            schema_id_json: id_inventories_json
            schema_json: inventories_json
            schema_ids_json: inventories_ids_json
            schema_json_example: |-
              {
                 "inventory":{
                    "availabilty":"2",
                    "bedinventory":"3a1827bc-4fe3-40e7-abba-7956939fae05",
                    "bedtype":1,
                    "hmisparticipatingbeds":-791575690,
                    "householdtype":3,
                    "inventoryenddate":"02-04-2016 12:12",
                    "inventorystartdate":"02-04-2016 12:12",
                    "unitinventory":1579850350,
                    "chbedinventory":1,
                    "vetbedinventory":2,
                    "youthbedinventory":3,
                    "youthagegroup":4
                 }
              }
            schema_ids_json_example: |-
              {
                 "Inventories":{
                    "pagination":{
                       "from":0,
                       "returned":1,
                       "total":1,
                       "maximum":30,
                       "sort":{

                       }
                    },
                    "inventories":[
                       {
                          "inventoryId":"74e4ed15-688e-4dfa-9609-1c6161d0dedd",
                          "availabilty":2,
                          "bedtype":1,
                          "hmisparticipatingbeds":-791575690,
                          "householdtype":3,
                          "chbedinventory":1,
                          "vetbedinventory":2,
                          "youthbedinventory":3,
                          "youthagegroup":4,
                          "unitinventory":1579850350,
                          "dateCreated":"05-12-2016",
                          "inventoryenddate":"02-04-2016",
                          "inventorystartdate":"02-04-2016"
                       }
                    ]
                 }
              }
            schema_id_json_example: |-
              {
                 "inventory":{
                    "inventoryId":"74e4ed15-688e-4dfa-9609-1c6161d0dedd"
                 }
              }
        get:
          description: 'Searches for inventory.  Returns a list of inventory ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.'
          responses:
            '400':
              description: Bad Request – The request was invalid or cannot be served.
            '403':
              description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
            '404':
              description: Not found – There is no resource behind the URI.
            '500':
              description: 500 – Internal Server Error
        post:
          description: |
            Add a inventory
          responses:
            '400':
              description: Bad Request – The request was invalid or cannot be served.
            '401':
              description: Unauthorized – The request requires user authentication.
            '403':
              description: 'Forbidden – The server understood the request, but is refusing it or access is not allowed.'
            '404':
              description: Not found – There is no resource behind the URI.
            '422':
              description: Unprocessable Entity - Request body is incorrect.
            '500':
              description: 500 – Internal Server Error.
        '/{inventoriesid}':
          type:
            member:
              schema_json: inventories_json
              schema_id_json: inventories_id_json
              schema_id_json_example: |-
                {
                   "inventory":{
                      "inventoryId":"74e4ed15-688e-4dfa-9609-1c6161d0dedd",
                      "availabilty":2,
                      "bedtype":1,
                      "hmisparticipatingbeds":-791575690,
                      "householdtype":3,
                      "chbedinventory":1,
                      "vetbedinventory":2,
                      "youthbedinventory":3,
                      "youthagegroup":4,
                      "unitinventory":1579850350,
                      "dateCreated":"05-12-2016",
                      "dateUpdated":"05-12-2016",
                      "inventoryenddate":"02-04-2016",
                      "inventorystartdate":"02-04-2016"
                   }
                }
              schema_json_example: |-
                {
                   "inventory":{
                      "availabilty":"2",
                      "bedinventory":"3a1827bc-4fe3-40e7-abba-7956939fae05",
                      "bedtype":1,
                      "hmisparticipatingbeds":-791575690,
                      "householdtype":3,
                      "inventoryenddate":"02-04-2016 12:12",
                      "inventorystartdate":"02-04-2016 12:12",
                      "unitinventory":1579850350,
                      "chbedinventory":1,
                      "vetbedinventory":2,
                      "youthbedinventory":3,
                      "youthagegroup":4
                   }
                }
          get:
            description: Gets a inventory using a URI resource parameter/ID.
            responses:
              '400':
                description: Bad Request – The request was invalid or cannot be served.
              '401':
                description: Unauthorized – The request requires an user authentication.
              '403':
                description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
              '404':
                description: Not found – There is no resource behind the URI.
              '500':
                description: Internal Server Error
          put:
            description: Updates a specific inventory specified by the URI resource parameter/ID.
            responses:
              '200':
                description: OK – Everything is working.
              '304':
                description: Not Modified – The client can use cached data.
              '400':
                description: Bad Request – The request was invalid or cannot be served.
              '401':
                description: Unauthorized – The request requires a user.
              '403':
                description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
              '404':
                description: Not found – There is no resource behind the URI.
              '500':
                description: Internal Server Error.
          delete:
            description: Deletes a specific inventory specified by the URI resource parameter/ID.
            responses:
              '204':
                description: OK – The resource was successfully deleted.
              '400':
                description: Bad Request – The request was invalid or cannot be served.
              '401':
                description: Unauthorized – The request requires user authentication.
              '403':
                description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
              '404':
                description: Not found – There is no resource behind the URI.
              '500':
                description: Internal Server Error.
          uriParameters:
            inventoriesid:
              example: ADBC1111211111114111111111D1111V
              type: string
              displayName: Inventories Identifier
      /sites:
        description: 'Operations performed on the set of all HMIS sites within the system, and for adding a new site to the set of sites '
        type:
          collection:
            schema_id_json: id_sites_json
            schema_json: sites_json
            schema_ids_json: sites_ids_json
            schema_json_example: |-
              {
                 "site":{
                    "address":"n4wuRkopYjCtFz52omPRSIyO0o6e1LuZ6XPafjcqPZCgYBphlu",
                    "city":"GZbBVvo6rm",
                    "geocode":-206855564,
                    "principalsite":0,
                    "state":"MN",
                    "zip":123456
                 }
              }
            schema_ids_json_example: |-
              {
                 "sites":{
                    "pagination":{
                       "from":0,
                       "returned":1,
                       "total":1,
                       "maximum":30,
                       "sort":{

                       }
                    },
                    "sites":[
                       {
                          "siteId":"336b4b5f-8e07-4582-bf88-a7c1d17bd3fc",
                          "address":"n4wuRkopYjCtFz52omPRSIyO0o6e1LuZ6XPafjcqPZCgYBphlu",
                          "city":"GZbBVvo6rm",
                          "geocode":-206855564,
                          "principalsite":0,
                          "state":"MN",
                          "zip":"123456",
                          "dateCreated":"05-11-2016"
                       }
                    ]
                 }
              }
            schema_id_json_example: |-
              {
                 "site":{
                    "siteId":"7977f2cc-7058-4958-9aac-309c4f220041"
                 }
              }
        get:
          description: 'Searches for site.  Returns a list of site ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.'
          responses:
            '400':
              description: Bad Request – The request was invalid or cannot be served.
            '403':
              description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
            '404':
              description: Not found – There is no resource behind the URI.
            '500':
              description: 500 – Internal Server Error
        post:
          description: |
            Add a site
          responses:
            '400':
              description: Bad Request – The request was invalid or cannot be served.
            '401':
              description: Unauthorized – The request requires user authentication.
            '403':
              description: 'Forbidden – The server understood the request, but is refusing it or access is not allowed.'
            '404':
              description: Not found – There is no resource behind the URI.
            '422':
              description: Unprocessable Entity - Request body is incorrect.
            '500':
              description: 500 – Internal Server Error.
        '/{sitesid}':
          type:
            member:
              schema_json: sites_json
              schema_id_json: sites_id_json
              schema_json_example: |-
                {
                   "site":{
                      "address":"n4wuRkopYjCtFz52omPRSIyO0o6e1LuZ6XPafjcqPZCgYBphlu",
                      "city":"GZbBVvo6rm",
                      "geocode":-206855564,
                      "principalsite":0,
                      "state":"MN",
                      "zip":123456
                   }
                }
              schema_id_json_example: |-
                {
                   "site":{
                      "siteId":"336b4b5f-8e07-4582-bf88-a7c1d17bd3fc",
                      "address":"n4wuRkopYjCtFz52omPRSIyO0o6e1LuZ6XPafjcqPZCgYBphlu",
                      "city":"GZbBVvo6rm",
                      "geocode":-206855564,
                      "principalsite":0,
                      "state":"MN",
                      "zip":"123456",
                      "dateCreated":"05-11-2016",
                      "dateUpdated":"05-11-2016"
                   }
                }
          get:
            description: Gets a site using a URI resource parameter/ID.
            responses:
              '400':
                description: Bad Request – The request was invalid or cannot be served.
              '401':
                description: Unauthorized – The request requires an user authentication.
              '403':
                description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
              '404':
                description: Not found – There is no resource behind the URI.
              '500':
                description: Internal Server Error
          put:
            description: Updates a specific site specified by the URI resource parameter/ID.
            responses:
              '200':
                description: OK – Everything is working.
              '304':
                description: Not Modified – The client can use cached data.
              '400':
                description: Bad Request – The request was invalid or cannot be served.
              '401':
                description: Unauthorized – The request requires a user.
              '403':
                description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
              '404':
                description: Not found – There is no resource behind the URI.
              '500':
                description: Internal Server Error.
          delete:
            description: Deletes a specific site specified by the URI resource parameter/ID.
            responses:
              '204':
                description: OK – The resource was successfully deleted.
              '400':
                description: Bad Request – The request was invalid or cannot be served.
              '401':
                description: Unauthorized – The request requires user authentication.
              '403':
                description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
              '404':
                description: Not found – There is no resource behind the URI.
              '500':
                description: Internal Server Error.
          uriParameters:
            sitesid:
              example: ADBC1111211111114111111111D1111V
              type: string
              displayName: Sites Identifier
      /funders:
        description: 'Operations performed on the set of all HMIS funders within the system, and for adding a new funder to the set of funders '
        type:
          collection:
            schema_id_json: id_funders_json
            schema_json: funders_json
            schema_ids_json: funders_ids_json
            schema_json_example: |-
              {
                 "funder":{
                    "enddate":"04-16-2016 11:11",
                    "funder":8,
                    "grantid":"a2cac563-e852-487b-996d-b1bae8225234",
                    "startdate":"02-04-2016 12:12"
                 }
              }
            schema_ids_json_example: |-
              {
                 "funders":{
                    "pagination":{
                       "from":0,
                       "returned":1,
                       "total":1,
                       "maximum":30,
                       "sort":{

                       }
                    },
                    "funders":[
                       {
                          "funderId":"8f11979d-8402-49a8-8253-f5f16c57d63f",
                          "funder":8,
                          "grantid":"a2cac563-e852-487b-996d-b1bae8225234",
                          "dateCreated":"05-11-2016",
                          "enddate":"04-16-2016",
                          "startdate":"02-04-2016"
                       }
                    ]
                 }
              }
            schema_id_json_example: |-
              {
                 "funder":{
                    "funderId":"47fee5b8-092e-4487-85e6-bfb01ee480f3"
                 }
              }
        get:
          description: 'Searches for funder.  Returns a list of funder ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.'
          responses:
            '400':
              description: Bad Request – The request was invalid or cannot be served.
            '403':
              description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
            '404':
              description: Not found – There is no resource behind the URI.
            '500':
              description: 500 – Internal Server Error
        post:
          description: |
            Add a funder
          responses:
            '400':
              description: Bad Request – The request was invalid or cannot be served.
            '401':
              description: Unauthorized – The request requires user authentication.
            '403':
              description: 'Forbidden – The server understood the request, but is refusing it or access is not allowed.'
            '404':
              description: Not found – There is no resource behind the URI.
            '422':
              description: Unprocessable Entity - Request body is incorrect.
            '500':
              description: 500 – Internal Server Error.
        '/{fundersid}':
          type:
            member:
              schema_json: funders_json
              schema_id_json: funder_id_json
              schema_json_example: |-
                {
                   "funder":{
                      "enddate":"04-16-2016 11:11",
                      "funder":8,
                      "grantid":"a2cac563-e852-487b-996d-b1bae8225234",
                      "startdate":"02-04-2016 12:12"
                   }
                }
              schema_id_json_example: |-
                {
                   "funder":{
                      "funderId":"8f11979d-8402-49a8-8253-f5f16c57d63f",
                      "funder":8,
                      "grantid":"a2cac563-e852-487b-996d-b1bae8225234",
                      "dateCreated":"05-11-2016",
                      "dateUpdated":"05-11-2016",
                      "enddate":"04-16-2016",
                      "startdate":"02-04-2016"
                   }
                }
          get:
            description: Gets a funder using a URI resource parameter/ID.
            responses:
              '400':
                description: Bad Request – The request was invalid or cannot be served.
              '401':
                description: Unauthorized – The request requires an user authentication.
              '403':
                description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
              '404':
                description: Not found – There is no resource behind the URI.
              '500':
                description: Internal Server Error
          put:
            description: Updates a specific funder specified by the URI resource parameter/ID.
            responses:
              '200':
                description: OK – Everything is working.
              '304':
                description: Not Modified – The client can use cached data.
              '400':
                description: Bad Request – The request was invalid or cannot be served.
              '401':
                description: Unauthorized – The request requires a user.
              '403':
                description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
              '404':
                description: Not found – There is no resource behind the URI.
              '500':
                description: Internal Server Error.
          delete:
            description: Deletes a specific funder specified by the URI resource parameter/ID.
            responses:
              '204':
                description: OK – The resource was successfully deleted.
              '400':
                description: Bad Request – The request was invalid or cannot be served.
              '401':
                description: Unauthorized – The request requires user authentication.
              '403':
                description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
              '404':
                description: Not found – There is no resource behind the URI.
              '500':
                description: Internal Server Error.
          uriParameters:
            fundersid:
              example: ADBC1111211111114111111111D1111V
              type: string
              displayName: Funders Identifier
      /affiliations:
        description: 'Operations performed on the set of all HMIS affiliations within the system, and for adding a new affiliation to the set of affiliations '
        type:
          collection:
            schema_id_json: id_affiliation_json
            schema_json: affiliations_json
            schema_ids_json: affiliations_ids_json
            schema_json_example: |-
              {
                 "affiliation":{
                    "resprojectid":"lVkFrvuVDsJcxR9z1cNC"
                 }
              }
            schema_ids_json_example: |-
              {
                 "affiliations":{
                    "pagination":{
                       "from":0,
                       "returned":1,
                       "total":1,
                       "maximum":30,
                       "sort":{

                       }
                    },
                    "affiliations":[
                       {
                          "affiliationId":"f3c479a5-041a-49f6-b3ce-c999ec0bee40",
                          "resprojectid":"lVkFrvuVDsJcxR9z1cNC",
                          "dateCreated":"04-25-2016"
                       }
                    ]
                 }
              }
            schema_id_json_example: |-
              {
                 "affiliation":{
                    "affiliationId":"f3c479a5-041a-49f6-b3ce-c999ec0bee40"
                 }
              }
        get:
          description: 'Searches for affiliation.  Returns a list of affiliation ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.'
          responses:
            '400':
              description: Bad Request – The request was invalid or cannot be served.
            '403':
              description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
            '404':
              description: Not found – There is no resource behind the URI.
            '500':
              description: 500 – Internal Server Error
        post:
          description: |
            Add a affiliation
          responses:
            '400':
              description: Bad Request – The request was invalid or cannot be served.
            '401':
              description: Unauthorized – The request requires user authentication.
            '403':
              description: 'Forbidden – The server understood the request, but is refusing it or access is not allowed.'
            '404':
              description: Not found – There is no resource behind the URI.
            '422':
              description: Unprocessable Entity - Request body is incorrect.
            '500':
              description: 500 – Internal Server Error.
        '/{affiliationid}':
          type:
            member:
              schema_json: affiliations_json
              schema_id_json: affiliation_id_json
              schema_json_example: |-
                {
                   "affiliation":{
                      "resprojectid":"lVkFrvuVDsJcxR9z1cNC"
                   }
                }
              schema_id_json_example: |-
                {
                   "affiliation":{
                      "affiliationId":"f3c479a5-041a-49f6-b3ce-c999ec0bee40",
                      "resprojectid":"lVkFrvuVDsJcxR9z1cNC",
                      "dateCreated":"04-25-2016",
                      "dateUpdated":"04-25-2016"
                   }
                }
          get:
            description: Gets a affiliation using a URI resource parameter/ID.
            responses:
              '400':
                description: Bad Request – The request was invalid or cannot be served.
              '401':
                description: Unauthorized – The request requires an user authentication.
              '403':
                description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
              '404':
                description: Not found – There is no resource behind the URI.
              '500':
                description: Internal Server Error
          put:
            description: Updates a specific affiliation specified by the URI resource parameter/ID.
            responses:
              '200':
                description: OK – Everything is working.
              '304':
                description: Not Modified – The client can use cached data.
              '400':
                description: Bad Request – The request was invalid or cannot be served.
              '401':
                description: Unauthorized – The request requires a user.
              '403':
                description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
              '404':
                description: Not found – There is no resource behind the URI.
              '500':
                description: Internal Server Error.
          delete:
            description: Deletes a specific affiliation specified by the URI resource parameter/ID.
            responses:
              '204':
                description: OK – The resource was successfully deleted.
              '400':
                description: Bad Request – The request was invalid or cannot be served.
              '401':
                description: Unauthorized – The request requires user authentication.
              '403':
                description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
              '404':
                description: Not found – There is no resource behind the URI.
              '500':
                description: Internal Server Error.
          uriParameters:
            affiliationid:
              example: ADBC1111211111114111111111D1111V
              type: string
              displayName: Affiliation Identifier
  /organizations:
    description: 'Operations performed on the set of all HMIS organizations within the system, and for adding a new organization to the set of organizations '
    type:
      collection:
        schema_id_json: id_organization_json
        schema_json: organization_json
        schema_ids_json: organization_ids_json
        schema_json_example: |-
          {
             "organization":{
                "organizationName":"BBjksdjgjdR",
                "organizationCommonName":"BBR"
             }
          }
        schema_ids_json_example: |-
          {
             "Organizations":{
                "pagination":{
                   "from":0,
                   "returned":16,
                   "total":16,
                   "maximum":30,
                   "sort":{

                   }
                },
                "organizations":[
                   {
                      "organizationId":"81a20cb3-e000-473c-a3e6-cddcba15a02f",
                      "organizationCommonName":"BBR",
                      "organizationName": "BBjksdjgjdR"
                   },
                   {
                      "organizationId":"f6807bb4-fb1e-4ce4-aa28-ba61b2ee4342",
                      "organizationCommonName":"BBR",
                      "organizationName": "BBjksdjgjdR"
                   }
                ]
             }
          }
        schema_id_json_example: |-
          {
             "organization":{
                "organizationId":"8dff4029-09b7-4293-b24b-b077b39ee673",
                "organizationName":"BBjksdjgjdR",
                "organizationCommonName":"BBR"
             }
          }
    get:
      description: 'Searches for organization.  Returns a list of organization ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.'
      responses:
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: 500 – Internal Server Error
    post:
      description: |
        Add a organization
      responses:
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: 'Forbidden – The server understood the request, but is refusing it or access is not allowed.'
        '404':
          description: Not found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: 500 – Internal Server Error.
    '/{organizationid}':
      type:
        member:
          schema_json: organization_json
          schema_id_json: organization_id_json
          schema_id_json_example: |-
            {
               "organization":{
                  "organizationId":"8dff4029-09b7-4293-b24b-b077b39ee673",
                  "organizationCommonName":"BBR"
               }
            }
          schema_json_example: |-
            {
               "organization":{
                  "organizationName":"BBjksdjgjdR",
                  "organizationCommonName":"BBR"
               }
            }
      get:
        description: Gets a organization using a URI resource parameter/ID.
        responses:
          '400':
            description: Bad Request – The request was invalid or cannot be served.
          '401':
            description: Unauthorized – The request requires an user authentication.
          '403':
            description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
          '404':
            description: Not found – There is no resource behind the URI.
          '500':
            description: Internal Server Error
      put:
        description: Updates a specific organization specified by the URI resource parameter/ID.
        responses:
          '200':
            description: OK – Everything is working.
          '304':
            description: Not Modified – The client can use cached data.
          '400':
            description: Bad Request – The request was invalid or cannot be served.
          '401':
            description: Unauthorized – The request requires a user.
          '403':
            description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
          '404':
            description: Not found – There is no resource behind the URI.
          '500':
            description: Internal Server Error.
      delete:
        description: Deletes a specific organization specified by the URI resource parameter/ID.
        responses:
          '204':
            description: OK – The resource was successfully deleted.
          '400':
            description: Bad Request – The request was invalid or cannot be served.
          '401':
            description: Unauthorized – The request requires user authentication.
          '403':
            description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
          '404':
            description: Not found – There is no resource behind the URI.
          '500':
            description: Internal Server Error.
      uriParameters:
        organizationid:
          example: ADBC1111211111114111111111D1111V
          type: string
          displayName: organization Identifier
/search:
  '/{searchentity}':
    get:
      description: |
        The Search API is optimized to find the specific entity you're looking for (e.g., a client, enrollments, etc.).It's designed to  find the one result you're looking for (or maybe the few results you're looking for). Currently hmislynk supporting search on 'clients' entity only. Just like searching on Google, you sometimes want to see a few pages of search results so that you can find the item that best meets your needs.  HMISLynk Search API provides up to 50 results for each searh. However, the search results can be limited by the client.
          Note: Current supporting URI  is /search/clients

      responses:
        '200':
          description: |
            example: |
              {
              "searchResults": {
                "pagination": {
                  "total":"2"
                  "from": "0",
                  "maximum": "50",
                  "returned":"2"
                },
                "items": [
                  {
                    "clientId": "65e3df62-dd22-4d07-83ef-6858a6322839",
                    "firstName": "Eric",
                    "middleName": "Eric",
                    "lastName": "Eric",
                    "nameSuffix": "NS ",
                    "nameDataQuality": "1",
                    "ssn": "ssn ",
                    "ssnDataQuality": "1",
                    "dob": "1459498034983",
                    "dobDataQuality": "1",
                    "race": "1",
                    "ethnicity": "1",
                    "gender": "1",
                    "otherGender": "Test",
                    "veteranStatus": "8",
                    "link":"/hmis-clientapi/rest/v2015/clients/65e3df62-dd22-4d07-83ef-6858a6322839"
                  },
                  {
                    "clientId": "cf98b9b2-9a77-4133-99a3-b60f05a12ad1",
                    "firstName": "Eric",
                    "middleName": "Eric",
                    "lastName": "Eric",
                    "nameSuffix": "NS ",
                    "nameDataQuality": "1",
                    "ssn": "ssn ",
                    "ssnDataQuality": "1",
                    "dob": "1459498034983",
                    "dobDataQuality": "1",
                    "race": "1",
                    "ethnicity": "1",
                    "gender": "1",
                    "otherGender": "Test",
                    "veteranStatus": "8",
                    "link":"/hmis-clientapi/rest/v2014/clients/cf98b9b2-9a77-4133-99a3-b60f05a12ad1"
                  }
                ]
              }
              }

      queryParameters:
        q:
          description: |
            The search keywords, as well as any qualifiers. Currently supported search fields are first name,middle name,last name,dob,source system id and ssn. For search on "date of birth" field the format MM-dd-YYYY should be used for the search keyword.
        sort:
          description: The sort field. Default- results are sorted by "created date".
          example: created date
          type: string
        order:
          description: The sort order if sort parameter is provided. One of asc or desc. Default- desc.
          example: desc
          default: desc
          type: string
        startIndex:
          description: The start Index from where the search results should be returned. Default - 0
          example: 0
          default: 0
          type: integer
        maxItems:
          description: the number or Items that should be included in the results . Default - 50
          example: 50
          default: 50
          type: integer
        exclude:
          description: |
            Excludes flieds from the search.Currently it suppoted value is "ssi" (to exclude         source system id) only.
    uriParameters:
      searchentity: {}
