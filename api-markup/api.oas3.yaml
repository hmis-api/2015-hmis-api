openapi: 3.0.0
info:
  title: 2015 HMIS API
  version: 1.2.8
  contact:
    name: API Source
    email: support@hslynk.com
    url: https://github.com/hmis-api/2015-hmis-api
  # Name of the license and a URL to the license description.
  license:
    name: Open Source License
    url: https://github.com/hmis-api/2014-hmis-api/blob/master/LICENSE
  description: |
       **Note :**
              Please note that the partial updates are supported via PUT APIs. However, Note that If "null" value is passed for any element, in the PUT request body, it will be ignored. An empty string value should be sent (instead of "null" value) for the elements that need to be updated with NULL values.
servers:
  - url: 'https://api.hslynk.com/hmis-clientapi/rest/v2015'
paths:
  /clients:
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "Clients"
                    ],
                    "properties": {
                      "Clients": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "clients"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "clients": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "clientId",
                                "dedupClientId",
                                "firstName",
                                "middleName",
                                "lastName",
                                "nameSuffix",
                                "nameDataQuality",
                                "ssn",
                                "ssnDataQuality",
                                "dob",
                                "dobDataQuality",
                                "race",
                                "ethnicity",
                                "gender",
                                "otherGender",
                                "veteranStatus",
                                "phoneNumber",
                                "emailAddress"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "clientId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "dedupClientId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "firstName": {
                                  "type": "string",
                                },
                                "middleName": {
                                  "type": "string",
                                },
                                "lastName": {
                                  "type": "string",
                                },
                                "nameSuffix": {
                                  "type": "string",
                                },
                                "nameDataQuality": {
                                  "type": "integer"
                                },
                                "ssn": {
                                  "type": "string",
                                },
                                "ssnDataQuality": {
                                  "type": "integer"
                                },
                                "dob": {
                                  "type": "integer"
                                },
                                "dobDataQuality": {
                                  "type": "integer"
                                },
                                "race": {
                                  "type": "integer"
                                },
                                "ethnicity": {
                                  "type": "integer"
                                },
                                "gender": {
                                  "type": "integer"
                                },
                                "otherGender": {
                                  "type": "string",
                                },
                                "veteranStatus": {
                                  "type": "string",
                                },
                                "phoneNumber": {
                                  "type": "string",
                                },
                                "emailAddress": {
                                  "type": "string",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    Clients:
                      pagination:
                        from: 0
                        returned: 27
                        total: 30
                        maximum: 30
                        sort: {}
                      clients:
                        - links:
                          - rel: history
                            href: "/clients/e7f87b3b-9282-4031-af3f-34bebc2c6cbf/history"
                          clientId: e7f87b3b-9282-4031-af3f-34bebc2c6cbf
                          dedupClientId: 46b89200-656a-11e8-985f-02fe61f7863e
                          firstName: Bob
                          middleName: Irwin
                          lastName: Smith
                          nameSuffix: Jr
                          nameDataQuality: 1
                          ssn: '123456789'
                          ssnDataQuality: 1
                          dob: 1459517834983
                          dobDataQuality: 1
                          race: 1
                          ethnicity: 1
                          gender: 1
                          otherGender: Test
                          veteranStatus: '8'
                          phoneNumber: 1-541-754-3010
                          emailAddress: Jeanette@gmail.com
                        - links:
                          - rel: history
                            href: "/clients/bb1c4869-52af-4b4f-a9b6-a48f93c35294/history"
                          clientId: bb1c4869-52af-4b4f-a9b6-a48f93c35294
                          firstName: Fred
                          middleName: Amos
                          lastName: Bunyan
                          nameSuffix: Sr.
                          nameDataQuality: 1
                          ssn: 'ssn      '
                          ssnDataQuality: 1
                          dob: 1459517834983
                          dobDataQuality: 1
                          race: 1
                          ethnicity: 1
                          gender: 1
                          otherGender: Test
                          veteranStatus: '8'
                        - links:
                          - rel: history
                            href: "/clients/2e31aed0-eb42-484d-9b42-8395b65a9ac7/history"
                          clientId: 2e31aed0-eb42-484d-9b42-8395b65a9ac7
                          firstName: Agnes
                          middleName: Faye
                          lastName: Baker
                          nameSuffix: III
                          nameDataQuality: 1
                          ssn: '123456788'
                          ssnDataQuality: 1
                          dob: 1459517834983
                          dobDataQuality: 1
                          race: 1
                          ethnicity: 1
                          gender: 1
                          otherGender: Test
                          veteranStatus: '8'
                        - links:
                          - rel: history
                            href: "/clients/edf4594b-8a89-4ee9-b5dc-3e7dd3374c8f/history"
                          clientId: edf4594b-8a89-4ee9-b5dc-3e7dd3374c8f
                          firstName: Chester
                          middleName: Blythe
                          lastName: Mayhew
                          nameSuffix: Jr
                          nameDataQuality: 1
                          ssn: '123456787'
                          ssnDataQuality: 1
                          dob: 1459517834983
                          dobDataQuality: 1
                          race: 1
                          ethnicity: 1
                          gender: 1
                          otherGender: Test
                          veteranStatus: '8'
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for client.  Returns a list of client ids, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "client"
                    ],
                    "properties": {
                      "client": {
                        "type": "object",
                        "required": [
                          "clientId",
                          "dedupClientId",
                          "firstName",
                          "middleName",
                          "lastName",
                          "nameSuffix",
                          "nameDataQuality",
                          "ssn",
                          "ssnDataQuality",
                          "dob",
                          "dobDataQuality",
                          "race",
                          "ethnicity",
                          "gender",
                          "otherGender",
                          "veteranStatus",
                          "phoneNumber",
                          "emailAddress"
                        ],
                        "properties": {
                          "clientId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "dedupClientId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "firstName": {
                            "type": "string",
                          },
                          "middleName": {
                            "type": "string",
                          },
                          "lastName": {
                            "type": "string",
                          },
                          "nameSuffix": {
                            "type": "string",
                          },
                          "nameDataQuality": {
                            "type": "integer"
                          },
                          "ssn": {
                            "type": "string",
                          },
                          "ssnDataQuality": {
                            "type": "integer"
                          },
                          "dob": {
                            "type": "integer"
                          },
                          "dobDataQuality": {
                            "type": "integer"
                          },
                          "race": {
                            "type": "integer"
                          },
                          "ethnicity": {
                            "type": "integer"
                          },
                          "gender": {
                            "type": "integer"
                          },
                          "otherGender": {
                            "type": "string",
                          },
                          "veteranStatus": {
                            "type": "string",
                          },
                          "phoneNumber": {
                            "type": "string",
                          },
                          "emailAddress": {
                            "type": "string",
                          }
                        }
                      }
                    }
                  }
                example:
                  client:
                    clientId: 8547a63e-4659-412f-b5fa-200e03b62ae8
                    dedupClientId: 46b89200-656a-11e8-985f-02fe61f7863e
                    firstName: Bob
                    middleName: Edward
                    lastName: Blass
                    nameSuffix: Jr
                    nameDataQuality: 1
                    ssn: '123456789'
                    ssnDataQuality: 1
                    dob: 1459517834983
                    dobDataQuality: 1
                    race: 1
                    ethnicity: 1
                    gender: 1
                    otherGender: Test
                    veteranStatus: '8'
                    phoneNumber: 1-541-754-3010
                    emailAddress: Jeanette@gmail.com
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found â€“ There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
                    1)  an SSN value submitted as an empty string (not null) will be treated and stored by HSLynk as a nullified/deleted SSN data element
                    2) a full 9 digit SSN may be submitted
                    3) a partial SSN may be submitted, but one or more lower case 'x'(s) must be present in the locations of the missing actual SSN digits.
      operationId: POST_clients
      requestBody:
        content:
          application/json:
              schema:
                  {
                    "type": "object",
                    "required": [
                      "client"
                    ],
                    "properties": {
                      "client": {
                        "type": "object",
                        "required": [
                          "firstName",
                          "middleName",
                          "lastName",
                          "nameSuffix",
                          "nameDataQuality",
                          "ssn",
                          "ssnDataQuality",
                          "dob",
                          "dobDataQuality",
                          "race",
                          "ethnicity",
                          "gender",
                          "otherGender",
                          "veteranStatus",
                          "sourceSystemId",
                          "phoneNumber",
                          "emailAddress"
                        ],
                        "properties": {
                          "firstName": {
                            "type": "string",
                          },
                          "middleName": {
                            "type": "string",
                          },
                          "lastName": {
                            "type": "string",
                          },
                          "nameSuffix": {
                            "type": "string",
                          },
                          "nameDataQuality": {
                            "type": "integer"
                          },
                          "ssn": {
                            "type": "string",
                          },
                          "ssnDataQuality": {
                            "type": "integer"
                          },
                          "dob": {
                            "type": "integer"
                          },
                          "dobDataQuality": {
                            "type": "integer"
                          },
                          "race": {
                            "type": "integer"
                          },
                          "ethnicity": {
                            "type": "integer"
                          },
                          "gender": {
                            "type": "integer"
                          },
                          "otherGender": {
                            "type": "string",
                          },
                          "veteranStatus": {
                            "type": "integer"
                          },
                          "sourceSystemId": {
                            "type": "string",
                          },
                          "phoneNumber": {
                            "type": "string",
                          },
                          "emailAddress": {
                            "type": "string",
                          }
                        }
                      }
                    }
                  }
              example:
                  client:
                    firstName: First Name
                    middleName: Middle Name
                    lastName: LAST NAME
                    nameSuffix: NS
                    nameDataQuality: 1
                    ssn: 123-45-6789
                    ssnDataQuality: 1
                    dob: 1459517834983
                    dobDataQuality: 1
                    race: 1
                    ethnicity: 1
                    gender: 1
                    otherGender: Test
                    veteranStatus: 8
                    sourceSystemId: ssid
                    phoneNumber: 1-541-754-3010
                    emailAddress: Jeanette@gmail.com
        required: true
  '/clients/{clientid}':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                        type: object
                        properties:
                          client:
                            type: object
                            properties:
                              links:
                                type: array
                                items:
                                  anyOf:
                                  - type: object
                                    properties:
                                      rel:
                                        type: string
                                      href:
                                        type: string
                              clientId:
                                type: string
                                format: uuid
                              dedupClientId:
                                type: string
                                format: uuid
                              firstName:
                                type: string
                              middleName:
                                type: string
                              lastName:
                                type: string
                              nameSuffix:
                                type: string
                              nameDataQuality:
                                type: integer
                              ssn:
                                type: string
                              ssnDataQuality:
                                type: integer
                              dob:
                                type: integer
                              dobDataQuality:
                                type: integer
                              race:
                                type: integer
                              ethnicity:
                                type: integer
                              gender:
                                type: integer
                              veteranStatus:
                                type: string
                              sourceSystemId:
                                type: string
                              clildLinks:
                                type: object
                                properties:
                                  surveySubmissions:
                                    type: object
                                    properties:
                                      data:
                                        type: array
                                        items:
                                          anyOf:
                                          - type: object
                                            properties:
                                              rel:
                                                type: string
                                              href:
                                                type: string
                                  globalHouseHolds:
                                    type: object
                                    properties:
                                      data:
                                        type: array
                                        items:
                                          anyOf:
                                          - type: object
                                            properties:
                                              rel:
                                                type: string
                                              href:
                                                type: string
                                  eligibleClients:
                                    type: object
                                    properties:
                                      data:
                                        type: array
                                        items:
                                          anyOf:
                                          - type: object
                                            properties:
                                              rel:
                                                type: string
                                              href:
                                                type: string
                                  enrollments:
                                    type: object
                                    properties:
                                      data:
                                        type: array
                                        items:
                                          anyOf:
                                          - type: object
                                            properties:
                                              rel:
                                                type: string
                                              href:
                                                type: string

                example:
                    client:
                      links:
                      - rel: history
                        href: "/client/39059154-3c39-43d1-a137-df9a374cdfc1/history"
                      clientId: 39059154-3c39-43d1-a137-df9a374cdfc1
                      dedupClientId: 0e2ebdf0-95f2-11ea-b546-02fe61f7863e
                      firstName: 'Rainstorm                                         '
                      middleName: "                                                  "
                      lastName: 'Lace                                              '
                      nameSuffix: "                                                  "
                      nameDataQuality: 1
                      ssn: '101231'
                      ssnDataQuality: 1
                      dob: 89856000000
                      dobDataQuality: 1
                      race: 1
                      ethnicity: 0
                      gender: 0
                      veteranStatus: '0'
                      sourceSystemId: '61948'
                      clildLinks:
                        surveySubmissions:
                          data:
                          - rel: 2832b90d-1931-4f2d-a5cd-d8b289932b30
                            href: https://api.hslynk.com/survey-api/rest/clients/030522ec-c25e-4b84-b95d-2ae9d5a39af9/surveys/8860fc8b-b127-4811-b458-0ee8840962a9/submissions/2832b90d-1931-4f2d-a5cd-d8b289932b30
                          - rel: 71d17a8c-fc98-4a69-8e12-ac833c43f6b7
                            href: https://api.hslynk.com/survey-api/rest/clients/030522ec-c25e-4b84-b95d-2ae9d5a39af9/surveys/8860fc8b-b127-4811-b458-0ee8840962a9/submissions/71d17a8c-fc98-4a69-8e12-ac833c43f6b7
                          - rel: 57f3108d-2655-45c9-902d-2d7ec0d98a02
                            href: https://api.hslynk.com/survey-api/rest/clients/030522ec-c25e-4b84-b95d-2ae9d5a39af9/surveys/8860fc8b-b127-4811-b458-0ee8840962a9/submissions/57f3108d-2655-45c9-902d-2d7ec0d98a02
                        globalHouseHolds:
                          data:
                          - rel: 163fe034-162d-426c-b090-cb45c38f438d
                            href: https://api.hslynk.com/hmis-globalapi/rest/globalhouseholds/163fe034-162d-426c-b090-cb45c38f438d
                          - rel: 10da724e-bb2f-4094-bf9a-1c4ae1f6d378
                            href: https://api.hslynk.com/hmis-globalapi/rest/globalhouseholds/10da724e-bb2f-4094-bf9a-1c4ae1f6d378
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires an user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a client using a URI resource parameter/ID.
      operationId: GET_clients-clientid
    put:
      responses:
        '200':
          description: OK â€“ Everything is working.
        '304':
          description: Not Modified â€“ The client can use cached data.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires a user.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: |
                    Updates a specific client specified by the URI resource parameter
                    /ID.
                    1)  an SSN value submitted as an empty string (not null) will be treated and stored by HSLynk as a nullified/deleted SSN data element
                    2) a full 9 digit SSN may be submitted
                    3) a partial SSN may be submitted, but one or more lower case 'x'(s) must be present in the locations of the missing actual SSN digits.
      operationId: PUT_clients-clientid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "client"
                  ],
                  "properties": {
                    "client": {
                      "type": "object",
                      "required": [
                        "firstName",
                        "middleName",
                        "lastName",
                        "nameSuffix",
                        "nameDataQuality",
                        "ssn",
                        "ssnDataQuality",
                        "dob",
                        "dobDataQuality",
                        "race",
                        "ethnicity",
                        "gender",
                        "otherGender",
                        "veteranStatus",
                        "sourceSystemId",
                        "phoneNumber",
                        "emailAddress"
                      ],
                      "properties": {
                        "firstName": {
                          "type": "string",
                        },
                        "middleName": {
                          "type": "string",
                        },
                        "lastName": {
                          "type": "string",
                        },
                        "nameSuffix": {
                          "type": "string",
                        },
                        "nameDataQuality": {
                          "type": "integer"
                        },
                        "ssn": {
                          "type": "string",
                        },
                        "ssnDataQuality": {
                          "type": "integer"
                        },
                        "dob": {
                          "type": "integer"
                        },
                        "dobDataQuality": {
                          "type": "integer"
                        },
                        "race": {
                          "type": "integer"
                        },
                        "ethnicity": {
                          "type": "integer"
                        },
                        "gender": {
                          "type": "integer"
                        },
                        "otherGender": {
                          "type": "string",
                        },
                        "veteranStatus": {
                          "type": "integer"
                        },
                        "sourceSystemId": {
                          "type": "string",
                        },
                        "phoneNumber": {
                          "type": "string",
                        },
                        "emailAddress": {
                          "type": "string",
                        }
                      }
                    }
                  }
                }
              example:
                  client:
                    firstName: First Name
                    middleName: Middle Name
                    lastName: LAST NAME
                    nameSuffix: NS
                    nameDataQuality: 1
                    ssn: 123-45-6789
                    ssnDataQuality: 1
                    dob: 1459517834983
                    dobDataQuality: 1
                    race: 1
                    ethnicity: 1
                    gender: 1
                    otherGender: Test
                    veteranStatus: 8
                    sourceSystemId: ssid
                    phoneNumber: 1-541-754-3010
                    emailAddress: Jeanette@gmail.com
        required: true
    delete:
      responses:
        '204':
          description: OK â€“ The resource was successfully deleted.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific client specified by the URI resource parameter/ID.
      operationId: DELETE_clients-clientid
    parameters:
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/history':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "Clients"
                    ],
                    "properties": {
                      "Clients": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "clients"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "clients": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "clientId",
                                "dedupClientId",
                                "firstName",
                                "middleName",
                                "lastName",
                                "nameSuffix",
                                "nameDataQuality",
                                "ssn",
                                "ssnDataQuality",
                                "dob",
                                "dobDataQuality",
                                "race",
                                "ethnicity",
                                "gender",
                                "otherGender",
                                "veteranStatus",
                                "phoneNumber",
                                "emailAddress"
                              ],
                              "properties": {
                                "clientId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "dedupClientId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "firstName": {
                                  "type": "string",
                                },
                                "middleName": {
                                  "type": "string",
                                },
                                "lastName": {
                                  "type": "string",
                                },
                                "nameSuffix": {
                                  "type": "string",
                                },
                                "nameDataQuality": {
                                  "type": "integer"
                                },
                                "ssn": {
                                  "type": "string",
                                },
                                "ssnDataQuality": {
                                  "type": "integer"
                                },
                                "dob": {
                                  "type": "integer"
                                },
                                "dobDataQuality": {
                                  "type": "integer"
                                },
                                "race": {
                                  "type": "integer"
                                },
                                "ethnicity": {
                                  "type": "integer"
                                },
                                "gender": {
                                  "type": "integer"
                                },
                                "otherGender": {
                                  "type": "string",
                                },
                                "veteranStatus": {
                                  "type": "string",
                                },
                                "phoneNumber": {
                                  "type": "string",
                                },
                                "emailAddress": {
                                  "type": "string",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    Clients:
                      pagination:
                        from: 0
                        returned: 27
                        total: 30
                        maximum: 30
                        sort: {}
                      clients:
                        - clientId: e7f87b3b-9282-4031-af3f-34bebc2c6cbf
                          dedupClientId: 46b89200-656a-11e8-985f-02fe61f7863e
                          firstName: Bob
                          middleName: Irwin
                          lastName: Smith
                          nameSuffix: Jr
                          nameDataQuality: 1
                          ssn: '123456789'
                          ssnDataQuality: 1
                          dob: 1459517834983
                          dobDataQuality: 1
                          race: 1
                          ethnicity: 1
                          gender: 1
                          otherGender: Test
                          veteranStatus: '8'
                          phoneNumber: 1-541-754-3010
                          emailAddress: Jeanette@gmail.com
                        - clientId: bb1c4869-52af-4b4f-a9b6-a48f93c35294
                          firstName: Fred
                          middleName: Amos
                          lastName: Bunyan
                          nameSuffix: Sr.
                          nameDataQuality: 1
                          ssn: 'ssn      '
                          ssnDataQuality: 1
                          dob: 1459517834983
                          dobDataQuality: 1
                          race: 1
                          ethnicity: 1
                          gender: 1
                          otherGender: Test
                          veteranStatus: '8'
                        - clientId: 2e31aed0-eb42-484d-9b42-8395b65a9ac7
                          firstName: Agnes
                          middleName: Faye
                          lastName: Baker
                          nameSuffix: III
                          nameDataQuality: 1
                          ssn: '123456788'
                          ssnDataQuality: 1
                          dob: 1459517834983
                          dobDataQuality: 1
                          race: 1
                          ethnicity: 1
                          gender: 1
                          otherGender: Test
                          veteranStatus: '8'
                        - clientId: edf4594b-8a89-4ee9-b5dc-3e7dd3374c8f
                          firstName: Chester
                          middleName: Blythe
                          lastName: Mayhew
                          nameSuffix: Jr
                          nameDataQuality: 1
                          ssn: '123456787'
                          ssnDataQuality: 1
                          dob: 1459517834983
                          dobDataQuality: 1
                          race: 1
                          ethnicity: 1
                          gender: 1
                          otherGender: Test
                          veteranStatus: '8'
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for client history.  Returns a list of client ids history, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-history

      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string

    parameters:
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "enrollments"
                    ],
                    "properties": {
                      "enrollments": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "enrollments"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "enrollments": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "enrollmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "disablingcondition": {
                                  "type": "integer"
                                },
                                "entrydate": {
                                  "type": "integer"
                                },
                                "householdid": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "housingstatus": {
                                  "type": "integer"
                                },
                                "monthshomelesspastthreeyears": {
                                  "type": "integer"
                                },
                                "otherresidenceprior": {
                                  "type": "string",
                                },
                                "relationshiptohoh": {
                                  "type": "integer"
                                },
                                "residenceprior": {
                                  "type": "integer"
                                },
                                "residencepriorlengthofstay": {
                                  "type": "integer"
                                },
                                "timeshomelesspastthreeyears": {
                                  "type": "integer"
                                },
                                "yearshomeless": {
                                  "type": "integer"
                                },
                                "entryfromstreetessh": {
                                  "type": "integer"
                                },
                                "dateCreated": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                },
                                "chronicHomeless": {
                                  "type": "integer"
                                },
                                "hmisHouseholdId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "genericHouseHoldId":{
                                  "type": "string",
                                  "format": "uuid",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    enrollments:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      enrollments:
                        - links:
                          - rel: history
                            href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/history"
                          - rel: hmisHouseHold
                            href: "/hmis-clientapi/rest/v2014/hmishouseholds/8e956388-b909-41ea-b1d0-203e9cc15c45/"
                          enrollmentId: cc1da849-b877-4455-ab44-84bdb9991f97
                          disablingcondition: 0
                          entrydate: 1459517941736
                          householdid: eca19be3-303b-47b0-a9ef-8832ab0fa13d
                          housingstatus: 3
                          monthshomelesspastthreeyears: 7
                          otherresidenceprior: '1'
                          relationshiptohoh: 2
                          residenceprior: 2
                          residencepriorlengthofstay: 4
                          timeshomelesspastthreeyears: 1
                          yearshomeless: 0
                          entryfromstreetessh: 1
                          dateCreated: 05-13-2016
                          chronicHomeless: 1
                          hmisHouseholdId: 8e956388-b909-41ea-b1d0-203e9cc15c45
                          genericHouseHoldId: 1520d4ac-2998-4825-80a6-2f550c37f3f1
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for enrollment.  Returns a list of enrollment ids, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "enrollment"
                    ],
                    "properties": {
                      "enrollment": {
                        "type": "object",
                        "properties": {
                          "enrollmentId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "disablingcondition": {
                            "type": "integer"
                          },
                          "entrydate": {
                            "type": "integer"
                          },
                          "householdid": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "housingstatus": {
                            "type": "integer"
                          },
                          "monthshomelesspastthreeyears": {
                            "type": "integer"
                          },
                          "otherresidenceprior": {
                            "type": "string",
                          },
                          "relationshiptohoh": {
                            "type": "integer"
                          },
                          "residenceprior": {
                            "type": "integer"
                          },
                          "residencepriorlengthofstay": {
                            "type": "integer"
                          },
                          "timeshomelesspastthreeyears": {
                            "type": "integer"
                          },
                          "yearshomeless": {
                            "type": "integer"
                          },
                          "entryfromstreetessh": {
                            "type": "integer"
                          },
                          "dateCreated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dateUpdated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                            "chronicHomeless": {
                              "type": "integer"
                            },
                            "hmisHouseholdId": {
                              "type": "string",
                              "format": "uuid",
                            },
                                "genericHouseHoldId":{
                                  "type": "string",
                                  "format": "uuid",
                                }
                        }
                      }
                    }
                  }
                example:
                  enrollment:
                    enrollmentId: cc1da849-b877-4455-ab44-84bdb9991f97
                    disablingcondition: 0
                    entrydate: 1459517941736
                    householdid: eca19be3-303b-47b0-a9ef-8832ab0fa13d
                    housingstatus: 3
                    monthshomelesspastthreeyears: 7
                    otherresidenceprior: '1'
                    relationshiptohoh: 2
                    residenceprior: 2
                    residencepriorlengthofstay: 4
                    timeshomelesspastthreeyears: 1
                    yearshomeless: 0
                    entryfromstreetessh: 1
                    dateCreated: 05-13-2016
                    dateUpdated: 05-13-2016
                    chronicHomeless: 1
                    hmisHouseholdId: 8e956388-b909-41ea-b1d0-203e9cc15c45
                    genericHouseHoldId: 1520d4ac-2998-4825-80a6-2f550c37f3f1
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found â€“ There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a enrollment
      operationId: POST_clients-clientid-enrollments
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "enrollment"
                  ],
                  "properties": {
                    "enrollment": {
                      "type": "object",
                      "properties": {
                        "continuouslyhomelessoneyear": {
                          "type": "integer"
                        },
                        "disablingcondition": {
                          "type": "integer"
                        },
                        "entrydate": {
                          "type": "integer"
                        },
                        "householdid": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "housingstatus": {
                          "type": "integer"
                        },
                        "monthshomelesspastthreeyears": {
                          "type": "integer"
                        },
                        "monthshomelessthistime": {
                          "type": "integer"
                        },
                        "otherresidenceprior": {
                          "type": "string",
                        },
                        "personalid": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "projectentryid": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "projectid": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "relationshiptohoh": {
                          "type": "integer"
                        },
                        "residenceprior": {
                          "type": "integer"
                        },
                        "residencepriorlengthofstay": {
                          "type": "integer"
                        },
                        "statusdocumented": {
                          "type": "integer"
                        },
                        "timeshomelesspastthreeyears": {
                          "type": "integer"
                        },
                        "yearshomeless": {
                          "type": "integer"
                        },
                        "entryfromstreetessh": {
                          "type": "integer"
                        },
                        "datetostreetessh": {
                          "type": "integer"
                        },
                        "chronicHomeless": {
                          "type": "integer"
                        },
                        "hmisHouseholdId": {
                          "type": "string",
                          "format": "uuid",
                        },
                                "genericHouseHoldId":{
                                  "type": "string",
                                  "format": "uuid",
                                }
                      }
                    }
                  }
                }
              example:
                  enrollment:
                    continuouslyhomelessoneyear: 1
                    disablingcondition: 0
                    entrydate: 1459517941736
                    householdid: eca19be3-303b-47b0-a9ef-8832ab0fa13d
                    housingstatus: 3
                    monthshomelesspastthreeyears: 7
                    monthshomelessthistime: 1
                    otherresidenceprior: '1'
                    personalid: ba0ce84a-412e-4f3b-ae93-b903eb349754
                    projectentryid: a70b3fe4-1e0f-4288-835f-d88dacd2b84c
                    projectid: c7c41281-411b-4c93-a382-2cb20bc24a34
                    relationshiptohoh: 2
                    residenceprior: 2
                    residencepriorlengthofstay: 4
                    statusdocumented: 1
                    timeshomelesspastthreeyears: 1
                    yearshomeless: 2
                    entryfromstreetessh: 2
                    datetostreetessh: 1
                    chronicHomeless: 1
                    hmisHouseholdId: 8e956388-b909-41ea-b1d0-203e9cc15c45
                    genericHouseHoldId: 1520d4ac-2998-4825-80a6-2f550c37f3f1
        required: true
    parameters:
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}':
    get:
      parameters:
      - name: includeChildLinks
        in: query
        required: false
        schema:
          type: boolean
        description: >-
          To include enrollment child entity links in the response this flag must be set true. default value of this flag is false. The enrollment child entity links, will be grouped by dataCollectionStage and then infromationDate or updatedDate (if informationDate is not available). If dataCollectionStage is not available child entity links will be categorized as unassgined
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
             schema:
                        {
                            "type": "object",
                            "properties": {
                                "enrollment": {
                                    "type": "object",
                                    "properties": {
                                        "links": {
                                            "type": "array",
                                            "items": {
                                                "anyOf": [
                                                    {
                                                        "type": "object",
                                                        "properties": {
                                                            "rel": {
                                                                "type": "string"
                                                            },
                                                            "href": {
                                                                "type": "string"
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        "enrollmentId": {
                                            "type": "string"
                                        },
                                        "entryLinks": {
                                            "type": "object",
                                            "properties": {
                                                "rhsps": {
                                                    "type": "object",
                                                    "properties": {
                                                        "unspecified_stage": {
                                                            "type": "object",
                                                            "properties": {
                                                                "2018-09-23T18:48": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "anyOf": [
                                                                            {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "data": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "anyOf": [
                                                                                                {
                                                                                                    "type": "object",
                                                                                                    "properties": {
                                                                                                        "rel": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "href": {
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    },
                                                                                    "groupBy": {
                                                                                        "type": "string"
                                                                                    }
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                "2018-09-23T19:56": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "anyOf": [
                                                                            {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "data": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "anyOf": [
                                                                                                {
                                                                                                    "type": "object",
                                                                                                    "properties": {
                                                                                                        "rel": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "href": {
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    },
                                                                                    "groupBy": {
                                                                                        "type": "string"
                                                                                    }
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                "2018-09-25T09:50": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "anyOf": [
                                                                            {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "data": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "anyOf": [
                                                                                                {
                                                                                                    "type": "object",
                                                                                                    "properties": {
                                                                                                        "rel": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "href": {
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    },
                                                                                    "groupBy": {
                                                                                        "type": "string"
                                                                                    }
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                "2018-09-25T09:51": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "anyOf": [
                                                                            {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "data": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "anyOf": [
                                                                                                {
                                                                                                    "type": "object",
                                                                                                    "properties": {
                                                                                                        "rel": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "href": {
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    },
                                                                                    "groupBy": {
                                                                                        "type": "string"
                                                                                    }
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                "entryrhys": {
                                                    "type": "object",
                                                    "properties": {
                                                        "1": {
                                                            "type": "object",
                                                            "properties": {
                                                                "2018-09-23T19:56": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "anyOf": [
                                                                            {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "data": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "anyOf": [
                                                                                                {
                                                                                                    "type": "object",
                                                                                                    "properties": {
                                                                                                        "rel": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "href": {
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    },
                                                                                    "groupBy": {
                                                                                        "type": "string"
                                                                                    }
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                "2018-11-14T12:10": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "anyOf": [
                                                                            {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "data": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "anyOf": [
                                                                                                {
                                                                                                    "type": "object",
                                                                                                    "properties": {
                                                                                                        "rel": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "href": {
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    },
                                                                                    "groupBy": {
                                                                                        "type": "string"
                                                                                    }
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                "2018-11-17T12:09": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "anyOf": [
                                                                            {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "data": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "anyOf": [
                                                                                                {
                                                                                                    "type": "object",
                                                                                                    "properties": {
                                                                                                        "rel": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "href": {
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    },
                                                                                    "groupBy": {
                                                                                        "type": "string"
                                                                                    }
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                "2018-11-20T12:09": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "anyOf": [
                                                                            {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "data": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "anyOf": [
                                                                                                {
                                                                                                    "type": "object",
                                                                                                    "properties": {
                                                                                                        "rel": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "href": {
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    },
                                                                                    "groupBy": {
                                                                                        "type": "string"
                                                                                    }
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "2": {
                                                            "type": "object",
                                                            "properties": {
                                                                "2018-09-23T18:48": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "anyOf": [
                                                                            {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "data": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "anyOf": [
                                                                                                {
                                                                                                    "type": "object",
                                                                                                    "properties": {
                                                                                                        "rel": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "href": {
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    },
                                                                                    "groupBy": {
                                                                                        "type": "string"
                                                                                    }
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                "2018-11-14T12:10": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "anyOf": [
                                                                            {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "data": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "anyOf": [
                                                                                                {
                                                                                                    "type": "object",
                                                                                                    "properties": {
                                                                                                        "rel": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "href": {
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    },
                                                                                    "groupBy": {
                                                                                        "type": "string"
                                                                                    }
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                "2018-11-17T12:09": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "anyOf": [
                                                                            {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "data": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "anyOf": [
                                                                                                {
                                                                                                    "type": "object",
                                                                                                    "properties": {
                                                                                                        "rel": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "href": {
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    },
                                                                                    "groupBy": {
                                                                                        "type": "string"
                                                                                    }
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "3": {
                                                            "type": "object",
                                                            "properties": {
                                                                "2018-11-20T12:09": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "anyOf": [
                                                                            {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "data": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "anyOf": [
                                                                                                {
                                                                                                    "type": "object",
                                                                                                    "properties": {
                                                                                                        "rel": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "href": {
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    },
                                                                                    "groupBy": {
                                                                                        "type": "string"
                                                                                    }
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "unspecified_stage": {
                                                            "type": "object",
                                                            "properties": {
                                                                "2018-09-25T09:51": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "anyOf": [
                                                                            {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "data": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "anyOf": [
                                                                                                {
                                                                                                    "type": "object",
                                                                                                    "properties": {
                                                                                                        "rel": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "href": {
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    },
                                                                                    "groupBy": {
                                                                                        "type": "string"
                                                                                    }
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                "entryssvfs": {
                                                    "type": "object",
                                                    "properties": {
                                                        "unspecified_stage": {
                                                            "type": "object",
                                                            "properties": {
                                                                "2018-09-23T19:56": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "anyOf": [
                                                                            {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "data": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "anyOf": [
                                                                                                {
                                                                                                    "type": "object",
                                                                                                    "properties": {
                                                                                                        "rel": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "href": {
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    },
                                                                                    "groupBy": {
                                                                                        "type": "string"
                                                                                    }
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                "2018-09-25T09:50": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "anyOf": [
                                                                            {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "data": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "anyOf": [
                                                                                                {
                                                                                                    "type": "object",
                                                                                                    "properties": {
                                                                                                        "rel": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "href": {
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    },
                                                                                    "groupBy": {
                                                                                        "type": "string"
                                                                                    }
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                "2018-09-25T09:51": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "anyOf": [
                                                                            {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "data": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "anyOf": [
                                                                                                {
                                                                                                    "type": "object",
                                                                                                    "properties": {
                                                                                                        "rel": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "href": {
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    },
                                                                                    "groupBy": {
                                                                                        "type": "string"
                                                                                    }
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        "enrollmentLinks": {
                                            "type": "object",
                                            "properties": {
                                                "educations": {
                                                    "type": "object",
                                                    "properties": {
                                                        "1": {
                                                            "type": "object",
                                                            "properties": {
                                                                "2018-11-13T00:17": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "anyOf": [
                                                                            {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "data": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "anyOf": [
                                                                                                {
                                                                                                    "type": "object",
                                                                                                    "properties": {
                                                                                                        "rel": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "href": {
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    },
                                                                                    "groupBy": {
                                                                                        "type": "string"
                                                                                    }
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                "2018-11-15T23:01": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "anyOf": [
                                                                            {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "data": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "anyOf": [
                                                                                                {
                                                                                                    "type": "object",
                                                                                                    "properties": {
                                                                                                        "rel": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "href": {
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    },
                                                                                    "groupBy": {
                                                                                        "type": "string"
                                                                                    }
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "unspecified_stage": {
                                                            "type": "object",
                                                            "properties": {
                                                                "2018-11-13T00:17": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "anyOf": [
                                                                            {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "data": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "anyOf": [
                                                                                                {
                                                                                                    "type": "object",
                                                                                                    "properties": {
                                                                                                        "rel": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "href": {
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    },
                                                                                    "groupBy": {
                                                                                        "type": "string"
                                                                                    }
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                "2018-11-15T23:01": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "anyOf": [
                                                                            {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "data": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "anyOf": [
                                                                                                {
                                                                                                    "type": "object",
                                                                                                    "properties": {
                                                                                                        "rel": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "href": {
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    },
                                                                                    "groupBy": {
                                                                                        "type": "string"
                                                                                    }
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                "dateOfEngagements": {
                                                    "type": "object",
                                                    "properties": {
                                                        "unspecified_stage": {
                                                            "type": "object",
                                                            "properties": {
                                                                "2018-09-25T09:51": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "anyOf": [
                                                                            {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "data": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "anyOf": [
                                                                                                {
                                                                                                    "type": "object",
                                                                                                    "properties": {
                                                                                                        "rel": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "href": {
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    },
                                                                                    "groupBy": {
                                                                                        "type": "string"
                                                                                    }
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                "disabilities": {
                                                    "type": "object",
                                                    "properties": {
                                                        "1": {
                                                            "type": "object",
                                                            "properties": {
                                                                "0009-11-04T00:00": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "anyOf": [
                                                                            {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "data": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "anyOf": [
                                                                                                {
                                                                                                    "type": "object",
                                                                                                    "properties": {
                                                                                                        "rel": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "href": {
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    },
                                                                                    "groupBy": {
                                                                                        "type": "string"
                                                                                    }
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "2": {
                                                            "type": "object",
                                                            "properties": {
                                                                "2018-11-17T12:07": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "anyOf": [
                                                                            {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "data": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "anyOf": [
                                                                                                {
                                                                                                    "type": "object",
                                                                                                    "properties": {
                                                                                                        "rel": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "href": {
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    },
                                                                                    "groupBy": {
                                                                                        "type": "string"
                                                                                    }
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                "domesticViolences": {
                                                    "type": "object",
                                                    "properties": {
                                                        "unspecified_stage": {
                                                            "type": "object",
                                                            "properties": {
                                                                "2018-01-08T00:00": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "anyOf": [
                                                                            {
                                                                                "type": "object",
                                                                                "properties": {
                                                                                    "data": {
                                                                                        "type": "array",
                                                                                        "items": {
                                                                                            "anyOf": [
                                                                                                {
                                                                                                    "type": "object",
                                                                                                    "properties": {
                                                                                                        "rel": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "href": {
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    },
                                                                                    "groupBy": {
                                                                                        "type": "string"
                                                                                    }
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        "exitLinks": {
                                            "type": "object",
                                            "properties": {
                                                "unspecified_stage": {
                                                    "type": "object",
                                                    "properties": {
                                                        "2018-09-25T09:50": {
                                                            "type": "array",
                                                            "items": {
                                                                "anyOf": [
                                                                    {
                                                                        "type": "object",
                                                                        "properties": {
                                                                            "data": {
                                                                                "type": "array",
                                                                                "items": {
                                                                                    "anyOf": [
                                                                                        {
                                                                                            "type": "object",
                                                                                            "properties": {
                                                                                                "rel": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "href": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "exitHousingAssessments": {
                                                                                                    "type": "object",
                                                                                                    "properties": {
                                                                                                        "unspecified_stage": {
                                                                                                            "type": "object",
                                                                                                            "properties": {
                                                                                                                "2018-09-25T09:50": {
                                                                                                                    "type": "array",
                                                                                                                    "items": {
                                                                                                                        "anyOf": [
                                                                                                                            {
                                                                                                                                "type": "object",
                                                                                                                                "properties": {
                                                                                                                                    "data": {
                                                                                                                                        "type": "array",
                                                                                                                                        "items": {
                                                                                                                                            "anyOf": [
                                                                                                                                                {
                                                                                                                                                    "type": "object",
                                                                                                                                                    "properties": {
                                                                                                                                                        "rel": {
                                                                                                                                                            "type": "string"
                                                                                                                                                        },
                                                                                                                                                        "href": {
                                                                                                                                                            "type": "string"
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            ]
                                                                                                                                        }
                                                                                                                                    },
                                                                                                                                    "groupBy": {
                                                                                                                                        "type": "string"
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        ]
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            },
                                                                            "groupBy": {
                                                                                "type": "string"
                                                                            }
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        "2018-09-25T09:51": {
                                                            "type": "array",
                                                            "items": {
                                                                "anyOf": [
                                                                    {
                                                                        "type": "object",
                                                                        "properties": {
                                                                            "data": {
                                                                                "type": "array",
                                                                                "items": {
                                                                                    "anyOf": [
                                                                                        {
                                                                                            "type": "object",
                                                                                            "properties": {
                                                                                                "rel": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "href": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "exitHousingAssessments": {
                                                                                                    "type": "object",
                                                                                                    "properties": {
                                                                                                        "unspecified_stage": {
                                                                                                            "type": "object",
                                                                                                            "properties": {
                                                                                                                "2018-09-25T09:51": {
                                                                                                                    "type": "array",
                                                                                                                    "items": {
                                                                                                                        "anyOf": [
                                                                                                                            {
                                                                                                                                "type": "object",
                                                                                                                                "properties": {
                                                                                                                                    "data": {
                                                                                                                                        "type": "array",
                                                                                                                                        "items": {
                                                                                                                                            "anyOf": [
                                                                                                                                                {
                                                                                                                                                    "type": "object",
                                                                                                                                                    "properties": {
                                                                                                                                                        "rel": {
                                                                                                                                                            "type": "string"
                                                                                                                                                        },
                                                                                                                                                        "href": {
                                                                                                                                                            "type": "string"
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            ]
                                                                                                                                        }
                                                                                                                                    },
                                                                                                                                    "groupBy": {
                                                                                                                                        "type": "string"
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        ]
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            },
                                                                            "groupBy": {
                                                                                "type": "string"
                                                                            }
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        "dateCreated": {
                                            "type": "string"
                                        },
                                        "dateUpdated": {
                                            "type": "string"
                                        },
                                        "disablingCondition": {
                                            "type": "integer"
                                        },
                                        "entryDate": {
                                            "type": "integer"
                                        },
                                        "monthsHomelessPastThreeYears": {
                                            "type": "integer"
                                        },
                                        "projectId": {
                                            "type": "string"
                                        },
                                        "timesHomelessPastThreeYears": {
                                            "type": "integer"
                                        },
                                        "yearsHomeless": {
                                            "type": "integer"
                                        },
                                        "losUnderThreshold": {
                                            "type": "integer"
                                        },
                                        "previousStreetESSH": {
                                            "type": "integer"
                                        },
                                        "chronicHomeless": {
                                            "type": "integer"
                                        }
                                    }
                                }
                            }
                        }

             example:
                enrollment:
                  links:
                  - rel: history
                    href: "/clients/48db8ac0-cbfe-4456-a1fd-e40cb710b51b/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/history"
                  enrollmentId: 03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113
                  entryLinks:
                    rhsps:
                      unspecified_stage:
                        2018-09-23T18:48:
                        - data:
                          - rel: 03c66d96-72b9-49c9-bcb2-388053fb8e74
                            href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryrhsps/03c66d96-72b9-49c9-bcb2-388053fb8e74"
                          - rel: 3591939e-8adc-417c-8aad-386e85f87551
                            href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryrhsps/3591939e-8adc-417c-8aad-386e85f87551"
                          groupBy: dateUpdated
                        2018-09-23T19:56:
                        - data:
                          - rel: f340d9c5-c5d1-44f6-b407-9c91da9b9ef9
                            href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryrhsps/f340d9c5-c5d1-44f6-b407-9c91da9b9ef9"
                          - rel: 924e4746-4c1a-41cf-a0ed-d3177b9cc23d
                            href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryrhsps/924e4746-4c1a-41cf-a0ed-d3177b9cc23d"
                          groupBy: dateUpdated
                        2018-09-25T09:50:
                        - data:
                          - rel: d80ac82c-0030-4e34-bd43-0332dc5af5c0
                            href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryrhsps/d80ac82c-0030-4e34-bd43-0332dc5af5c0"
                          - rel: 0bab25d1-cff7-4a57-8c30-f7b258af6143
                            href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryrhsps/0bab25d1-cff7-4a57-8c30-f7b258af6143"
                          groupBy: dateUpdated
                        2018-09-25T09:51:
                        - data:
                          - rel: a47aee4e-8584-432a-b790-31be3a4e1409
                            href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryrhsps/a47aee4e-8584-432a-b790-31be3a4e1409"
                          - rel: 0e5f52b9-e24e-43d9-a34d-9ef691b3b5c8
                            href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryrhsps/0e5f52b9-e24e-43d9-a34d-9ef691b3b5c8"
                          - rel: 112571c2-356c-4224-a844-310525f97201
                            href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryrhsps/112571c2-356c-4224-a844-310525f97201"
                          - rel: 0a7fae66-1283-4cd9-8341-8606c90b26ee
                            href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryrhsps/0a7fae66-1283-4cd9-8341-8606c90b26ee"
                          groupBy: dateUpdated
                    entryrhys:
                      '1':
                        2018-09-23T19:56:
                        - data:
                          - rel: 66015eca-afa7-4f3f-a499-389c737339e3
                            href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryrhys/66015eca-afa7-4f3f-a499-389c737339e3"
                          groupBy: dateUpdated
                        2018-11-14T12:10:
                        - data:
                          - rel: b2462907-9ae5-4209-827d-e56ebb3631c7
                            href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryrhys/b2462907-9ae5-4209-827d-e56ebb3631c7"
                          groupBy: informationDate
                        2018-11-17T12:09:
                        - data:
                          - rel: 025b18af-d096-4b2e-9aec-f36d2a2435d3
                            href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryrhys/025b18af-d096-4b2e-9aec-f36d2a2435d3"
                          - rel: 7a47384f-d5e0-4c11-be33-2477bf0e9de4
                            href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryrhys/7a47384f-d5e0-4c11-be33-2477bf0e9de4"
                          groupBy: submissionDate
                        2018-11-20T12:09:
                        - data:
                          - rel: 5be632ee-8ba1-4bc6-b947-158963269eab
                            href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryrhys/5be632ee-8ba1-4bc6-b947-158963269eab"
                          groupBy: informationDate
                      '2':
                        2018-09-23T18:48:
                        - data:
                          - rel: e686d4cb-78cf-4642-bcf6-7be27e1d714c
                            href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryrhys/e686d4cb-78cf-4642-bcf6-7be27e1d714c"
                          groupBy: dateUpdated
                        2018-11-14T12:10:
                        - data:
                          - rel: 904623af-08c5-47f9-b034-bf3a6b82d646
                            href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryrhys/904623af-08c5-47f9-b034-bf3a6b82d646"
                          groupBy: informationDate
                        2018-11-17T12:09:
                        - data:
                          - rel: 6e541341-a2e4-40e7-8d89-0037a45095d4
                            href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryrhys/6e541341-a2e4-40e7-8d89-0037a45095d4"
                          groupBy: submissionDate
                      '3':
                        2018-11-20T12:09:
                        - data:
                          - rel: b817a545-1998-4377-9648-0b55828fdb8b
                            href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryrhys/b817a545-1998-4377-9648-0b55828fdb8b"
                          groupBy: informationDate
                      unspecified_stage:
                        2018-09-25T09:51:
                        - data:
                          - rel: 2e9ece93-d935-4489-8440-42230f05e999
                            href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryrhys/2e9ece93-d935-4489-8440-42230f05e999"
                          groupBy: dateUpdated
                    entryssvfs:
                      unspecified_stage:
                        2018-09-23T19:56:
                        - data:
                          - rel: 190094ed-a0a6-4210-bc0b-bbb73e53c0b8
                            href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryssvfs/190094ed-a0a6-4210-bc0b-bbb73e53c0b8"
                          - rel: 93038b0f-a916-43cd-9a5c-7cb544e96749
                            href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryssvfs/93038b0f-a916-43cd-9a5c-7cb544e96749"
                          groupBy: dateUpdated
                        2018-09-25T09:50:
                        - data:
                          - rel: d05e4b34-b561-4630-b960-474b05dbeeec
                            href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryssvfs/d05e4b34-b561-4630-b960-474b05dbeeec"
                          - rel: 2e772c46-cf20-4916-a6d0-cb00e3aa70af
                            href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryssvfs/2e772c46-cf20-4916-a6d0-cb00e3aa70af"
                          groupBy: dateUpdated
                        2018-09-25T09:51:
                        - data:
                          - rel: 99362cc3-8c14-4869-8895-b647d922d36b
                            href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryssvfs/99362cc3-8c14-4869-8895-b647d922d36b"
                          - rel: 62c37373-02e9-4247-9388-7f62e169ce8a
                            href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryssvfs/62c37373-02e9-4247-9388-7f62e169ce8a"
                          - rel: d94df8a9-9eba-49c2-8f89-43aa2249ee3c
                            href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryssvfs/d94df8a9-9eba-49c2-8f89-43aa2249ee3c"
                          - rel: ebc3baa6-64dc-4741-b440-dae2047907d0
                            href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryssvfs/ebc3baa6-64dc-4741-b440-dae2047907d0"
                          groupBy: dateUpdated
                  enrollmentLinks:
                    educations:
                      '1':
                        2018-11-13T00:17:
                        - data:
                          - rel: 3130d17b-c60a-473c-99f9-83e6886a9b7d
                            href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/educations/3130d17b-c60a-473c-99f9-83e6886a9b7d"
                          groupBy: submissionDate
                        - data:
                          - rel: dcaba5a8-3fc9-48c1-93c8-ba2c3631a27a
                            href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/educations/dcaba5a8-3fc9-48c1-93c8-ba2c3631a27a"
                          groupBy: informationDate
                        2018-11-15T23:01:
                        - data:
                          - rel: 7736581e-db33-4fb3-b2c9-19bfd32c5b51
                            href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/educations/7736581e-db33-4fb3-b2c9-19bfd32c5b51"
                          groupBy: dateUpdated
                      unspecified_stage:
                        2018-11-13T00:17:
                        - data:
                          - rel: fa3dfcc0-4e2e-4ee6-b4d0-ef083e1ee0b9
                            href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/educations/fa3dfcc0-4e2e-4ee6-b4d0-ef083e1ee0b9"
                          groupBy: submissionDate
                        - data:
                          - rel: 1da16c18-e507-41dc-9eba-5c61acb00b45
                            href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/educations/1da16c18-e507-41dc-9eba-5c61acb00b45"
                          groupBy: informationDate
                        2018-11-15T23:01:
                        - data:
                          - rel: 1bd7018e-f919-461f-982e-5f5c049d5896
                            href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/educations/1bd7018e-f919-461f-982e-5f5c049d5896"
                          groupBy: dateUpdated
                    dateOfEngagements:
                      unspecified_stage:
                        2018-09-25T09:51:
                        - data:
                          - rel: 40e7b72d-d265-4dd1-84c2-d900f5cbc5c1
                            href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/dateofengagements/40e7b72d-d265-4dd1-84c2-d900f5cbc5c1"
                          - rel: 55c85e93-d131-46c1-8529-ed17005f1d24
                            href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/dateofengagements/55c85e93-d131-46c1-8529-ed17005f1d24"
                          groupBy: dateUpdated
                    disabilities:
                      '1':
                        0009-11-04T00:00:
                        - data:
                          - rel: de33b981-f68d-418f-a303-eb0840091e42
                            href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/disabilities/de33b981-f68d-418f-a303-eb0840091e42"
                          - rel: 66af571c-5c97-4ceb-b781-b87dcc9d7174
                            href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/disabilities/66af571c-5c97-4ceb-b781-b87dcc9d7174"
                          groupBy: informationDate
                      '2':
                        2018-11-17T12:07:
                        - data:
                          - rel: ed7bbf2a-fae4-40cb-806e-b46bd5a2ec56
                            href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/disabilities/ed7bbf2a-fae4-40cb-806e-b46bd5a2ec56"
                          - rel: 4ff222c3-9bb7-4d72-bb06-40b1c1fba304
                            href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/disabilities/4ff222c3-9bb7-4d72-bb06-40b1c1fba304"
                          groupBy: submissionDate
                    domesticViolences:
                      unspecified_stage:
                        2018-01-08T00:00:
                        - data:
                          - rel: 6ac472ec-bad7-4cb7-b60a-8e237bea1d0d
                            href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/domesticviolences/6ac472ec-bad7-4cb7-b60a-8e237bea1d0d"
                          - rel: 1929cc50-5c5c-45b5-8dac-56747bb03c8e
                            href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/domesticviolences/1929cc50-5c5c-45b5-8dac-56747bb03c8e"
                          groupBy: informationDate
                  exitLinks:
                    unspecified_stage:
                      2018-09-25T09:50:
                      - data:
                        - rel: 28e48aec-82e0-48ff-918b-493825cdea18
                          href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/exits/28e48aec-82e0-48ff-918b-493825cdea18"
                          exitHousingAssessments:
                            unspecified_stage:
                              2018-09-25T09:50:
                              - data:
                                - rel: 2cd01b48-c7e8-4e2a-90ff-144174c60757
                                  href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/exits/28e48aec-82e0-48ff-918b-493825cdea18/exithousingassessments/2cd01b48-c7e8-4e2a-90ff-144174c60757"
                                groupBy: dateUpdated
                        groupBy: dateUpdated
                      2018-09-25T09:51:
                      - data:
                        - rel: 3ed58fa0-b406-4ee0-86ad-32de911407ad
                          href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/exits/3ed58fa0-b406-4ee0-86ad-32de911407ad"
                          exitHousingAssessments:
                            unspecified_stage:
                              2018-09-25T09:51:
                              - data:
                                - rel: 3bdb1ef3-52e4-4bf7-b492-2a7afb600d47
                                  href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/exits/3ed58fa0-b406-4ee0-86ad-32de911407ad/exithousingassessments/3bdb1ef3-52e4-4bf7-b492-2a7afb600d47"
                                groupBy: dateUpdated
                        - rel: 473f41ca-4a77-491f-aec8-a9765dff9012
                          href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/exits/473f41ca-4a77-491f-aec8-a9765dff9012"
                          exitHousingAssessments:
                            unspecified_stage:
                              2018-09-25T09:51:
                              - data:
                                - rel: 099359fe-36a3-4d09-9029-35c4b6938e58
                                  href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/exits/473f41ca-4a77-491f-aec8-a9765dff9012/exithousingassessments/099359fe-36a3-4d09-9029-35c4b6938e58"
                                groupBy: dateUpdated
                        groupBy: dateUpdated
                  dateCreated: '2018-09-23'
                  dateUpdated: '2018-09-23'
                  disablingCondition: 1
                  entryDate: -19799999
                  monthsHomelessPastThreeYears: 101
                  projectId: 5958e1b7-0296-4821-b183-ae9967217579
                  timesHomelessPastThreeYears: 1
                  yearsHomeless: 0
                  losUnderThreshold: 1
                  previousStreetESSH: 1
                  chronicHomeless: 1
                  hmisHouseholdId: 8e956388-b909-41ea-b1d0-203e9cc15c45
                  genericHouseHoldId: 1520d4ac-2998-4825-80a6-2f550c37f3f1
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires an user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a enrollment using a URI resource parameter/ID.
      operationId: GET_clients-clientid-enrollments-enrollmentid
    put:
      responses:
        '200':
          description: OK â€“ Everything is working.
        '304':
          description: Not Modified â€“ The client can use cached data.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires a user.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific enrollment specified by the URI resource
        parameter/ID.
      operationId: PUT_clients-clientid-enrollments-enrollmentid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "enrollment"
                  ],
                  "properties": {
                    "enrollment": {
                      "type": "object",
                      "properties": {
                        "continuouslyhomelessoneyear": {
                          "type": "integer"
                        },
                        "disablingcondition": {
                          "type": "integer"
                        },
                        "entrydate": {
                          "type": "integer"
                        },
                        "householdid": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "housingstatus": {
                          "type": "integer"
                        },
                        "monthshomelesspastthreeyears": {
                          "type": "integer"
                        },
                        "monthshomelessthistime": {
                          "type": "integer"
                        },
                        "otherresidenceprior": {
                          "type": "string",
                        },
                        "personalid": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "projectentryid": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "projectid": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "relationshiptohoh": {
                          "type": "integer"
                        },
                        "residenceprior": {
                          "type": "integer"
                        },
                        "residencepriorlengthofstay": {
                          "type": "integer"
                        },
                        "statusdocumented": {
                          "type": "integer"
                        },
                        "timeshomelesspastthreeyears": {
                          "type": "integer"
                        },
                        "yearshomeless": {
                          "type": "integer"
                        },
                        "entryfromstreetessh": {
                          "type": "integer"
                        },
                        "datetostreetessh": {
                          "type": "integer"
                        },
                        "chronicHomeless": {
                          "type": "integer"
                        },
                        "hmisHouseholdId": {
                          "type": "string",
                          "format": "uuid",
                        },
                                "genericHouseHoldId":{
                                  "type": "string",
                                  "format": "uuid",
                                }
                      }
                    }
                  }
                }
              example:
                  enrollment:
                    continuouslyhomelessoneyear: 1
                    disablingcondition: 0
                    entrydate: 1459517941736
                    householdid: eca19be3-303b-47b0-a9ef-8832ab0fa13d
                    housingstatus: 3
                    monthshomelesspastthreeyears: 7
                    monthshomelessthistime: 1
                    otherresidenceprior: '1'
                    personalid: ba0ce84a-412e-4f3b-ae93-b903eb349754
                    projectentryid: a70b3fe4-1e0f-4288-835f-d88dacd2b84c
                    projectid: c7c41281-411b-4c93-a382-2cb20bc24a34
                    relationshiptohoh: 2
                    residenceprior: 2
                    residencepriorlengthofstay: 4
                    statusdocumented: 1
                    timeshomelesspastthreeyears: 1
                    yearshomeless: 2
                    entryfromstreetessh: 2
                    datetostreetessh: 1
                    chronicHomeless: 1
                    hmisHouseholdId: 8e956388-b909-41ea-b1d0-203e9cc15c45
                    genericHouseHoldId: 1520d4ac-2998-4825-80a6-2f550c37f3f1
        required: true
    delete:
      responses:
        '204':
          description: OK â€“ The resource was successfully deleted.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific enrollment specified by the URI resource
        parameter/ID.
      operationId: DELETE_clients-clientid-enrollments-enrollmentid
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/history':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "enrollments"
                    ],
                    "properties": {
                      "enrollments": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "enrollments"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "enrollments": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "enrollmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "disablingcondition": {
                                  "type": "integer"
                                },
                                "entrydate": {
                                  "type": "integer"
                                },
                                "householdid": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "housingstatus": {
                                  "type": "integer"
                                },
                                "monthshomelesspastthreeyears": {
                                  "type": "integer"
                                },
                                "otherresidenceprior": {
                                  "type": "string",
                                },
                                "relationshiptohoh": {
                                  "type": "integer"
                                },
                                "residenceprior": {
                                  "type": "integer"
                                },
                                "residencepriorlengthofstay": {
                                  "type": "integer"
                                },
                                "timeshomelesspastthreeyears": {
                                  "type": "integer"
                                },
                                "yearshomeless": {
                                  "type": "integer"
                                },
                                "entryfromstreetessh": {
                                  "type": "integer"
                                },
                                "dateCreated": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                },
                                "chronicHomeless": {
                                  "type": "integer"
                                },
                                "hmisHouseholdId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "genericHouseHoldId":{
                                  "type": "string",
                                  "format": "uuid",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    enrollments:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      enrollments:
                        links:
                        - rel: hmisHouseHold
                          href: "/hmis-clientapi/rest/v2014/hmishouseholds/8e956388-b909-41ea-b1d0-203e9cc15c45/"
                        - enrollmentId: cc1da849-b877-4455-ab44-84bdb9991f97
                          disablingcondition: 0
                          entrydate: 1459517941736
                          householdid: eca19be3-303b-47b0-a9ef-8832ab0fa13d
                          housingstatus: 3
                          monthshomelesspastthreeyears: 7
                          otherresidenceprior: '1'
                          relationshiptohoh: 2
                          residenceprior: 2
                          residencepriorlengthofstay: 4
                          timeshomelesspastthreeyears: 1
                          yearshomeless: 0
                          entryfromstreetessh: 1
                          dateCreated: 05-13-2016
                          chronicHomeless: 1
                          hmisHouseholdId: 8e956388-b909-41ea-b1d0-203e9cc15c45
                          genericHouseHoldId: 1520d4ac-2998-4825-80a6-2f550c37f3f1
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for enrollment history.  Returns a list of enrollment ids history, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/enrollmentcocs':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "enrollmentCocs"
                    ],
                    "properties": {
                      "enrollmentCocs": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "enrollmentCocs"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "enrollmentCocs": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "enrollmentCocId",
                                "clientCode",
                                "dataCollectionStage",
                                "informationDate"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "enrollmentCocId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "clientCode": {
                                  "type": "string",
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    enrollmentCocs:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      enrollmentCocs:
                        - links:
                          - rel: history
                            href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/enrollmentcocs/60071b3a-2625-45b8-aa6e-23e99096b343/history"
                          enrollmentCocId: 60071b3a-2625-45b8-aa6e-23e99096b343
                          clientCode: 'Test                '
                          dataCollectionStage: 1
                          informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for enrollmentcoc.  Returns a list of enrollmentcoc ids, based
        on the query parameters sent.  The query parameters are cumulative, so
        each additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-enrollmentcocs
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "enrollmentCoc"
                    ],
                    "properties": {
                      "enrollmentCoc": {
                        "type": "object",
                        "required": [
                          "enrollmentCocId",
                          "clientCode",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "enrollmentCocId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "clientCode": {
                            "type": "string",
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",

                          }
                        }
                      }
                    }
                  }
                example:
                  enrollmentCoc:
                    enrollmentCocId: 60071b3a-2625-45b8-aa6e-23e99096b343
                    clientCode: Test
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found â€“ There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a enrollmentcoc
      operationId: POST_clients-clientid-enrollments-enrollmentid-enrollmentcocs
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "enrollmentCoc"
                  ],
                  "properties": {
                    "enrollmentCoc": {
                      "type": "object",
                      "required": [
                        "clientCode",
                        "informationDate",
                        "dataCollectionStage"
                      ],
                      "properties": {
                        "clientCode": {
                          "type": "string",
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  enrollmentCoc:
                    clientCode: Test
                    informationDate: 04-18-2016
                    dataCollectionStage: 1
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/enrollmentcocs/{enrollmentcocid}':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "enrollmentCoc"
                    ],
                    "properties": {
                      "enrollmentCoc": {
                        "type": "object",
                        "required": [
                          "links",
                          "enrollmentCocId",
                          "clientCode",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "enrollmentCocId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "clientCode": {
                            "type": "string",
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                    enrollmentCoc:
                        links:
                        - rel: history
                          href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/enrollmentcocs/60071b3a-2625-45b8-aa6e-23e99096b343/history"
                        enrollmentCocId: 60071b3a-2625-45b8-aa6e-23e99096b343
                        clientCode: Test
                        dataCollectionStage: 1
                        informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires an user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a enrollmentcoc using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-enrollmentcocs-enrollmentcocid
    put:
      responses:
        '200':
          description: OK â€“ Everything is working.
        '304':
          description: Not Modified â€“ The client can use cached data.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires a user.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific enrollmentcoc specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-enrollmentcocs-enrollmentcocid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "enrollmentCoc"
                  ],
                  "properties": {
                    "enrollmentCoc": {
                      "type": "object",
                      "required": [
                        "clientCode",
                        "informationDate",
                        "dataCollectionStage"
                      ],
                      "properties": {
                        "clientCode": {
                          "type": "string",
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  enrollmentCoc:
                    clientCode: Test
                    informationDate: 04-18-2016
                    dataCollectionStage: 1
        required: true
    delete:
      responses:
        '204':
          description: OK â€“ The resource was successfully deleted.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific enrollmentcoc specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-enrollmentcocs-enrollmentcocid
    parameters:
      - name: enrollmentcocid
        in: path
        required: true
        schema:
          type: string
        description: Enrollmentcoc Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/enrollmentcocs/{enrollmentcocid}/history':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "enrollmentCocs"
                    ],
                    "properties": {
                      "enrollmentCocs": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "enrollmentCocs"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "enrollmentCocs": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "enrollmentCocId",
                                "clientCode",
                                "dataCollectionStage",
                                "informationDate"
                              ],
                              "properties": {
                                "enrollmentCocId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "clientCode": {
                                  "type": "string",
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    enrollmentCocs:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      enrollmentCocs:
                        - enrollmentCocId: 60071b3a-2625-45b8-aa6e-23e99096b343
                          clientCode: 'Test                '
                          dataCollectionStage: 1
                          informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for enrollmentcoc history.  Returns a list of enrollmentcoc ids history, based
        on the query parameters sent.  The query parameters are cumulative, so
        each additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-enrollmentcocs-enrollmentcocid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: enrollmentcocid
        in: path
        required: true
        schema:
          type: string
        description: Enrollmentcoc Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/educations':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "educations"
                    ],
                    "properties": {
                      "educations": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "educations"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "educations": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "educationId",
                                "lastgradecompleted",
                                "schoolStatus",
                                "dataCollectionStage",
                                "informationDate"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "educationId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "lastgradecompleted": {
                                  "type": "integer"
                                },
                                "schoolStatus": {
                                  "type": "integer"
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    educations:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      educations:
                        - links:
                          - rel: history
                            href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/educations/f91547a2-d13b-40a1-a1be-fed415c468a6/history"
                          educationId: f91547a2-d13b-40a1-a1be-fed415c468a6
                          lastgradecompleted: 10
                          schoolStatus: 6
                          dataCollectionStage: 1
                          informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for education.  Returns a list of education ids, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-educations
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "education"
                    ],
                    "properties": {
                      "education": {
                        "type": "object",
                        "required": [
                          "educationId",
                          "lastgradecompleted",
                          "schoolStatus",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "educationId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "lastgradecompleted": {
                            "type": "integer"
                          },
                          "schoolStatus": {
                            "type": "integer"
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                  education:
                    educationId: f91547a2-d13b-40a1-a1be-fed415c468a6
                    lastgradecompleted: 10
                    schoolStatus: 6
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found â€“ There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a education
      operationId: POST_clients-clientid-enrollments-enrollmentid-educations
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "education"
                  ],
                  "properties": {
                    "education": {
                      "type": "object",
                      "required": [
                        "lastgradecompleted",
                        "schoolStatus",
                        "dataCollectionStage",
                        "informationDate"
                      ],
                      "properties": {
                        "lastgradecompleted": {
                          "type": "integer"
                        },
                        "schoolStatus": {
                          "type": "integer"
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
              example:
                  education:
                    lastgradecompleted: 10
                    schoolStatus: 6
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/educations/{educationid}':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "education"
                    ],
                    "properties": {
                      "education": {
                        "type": "object",
                        "required": [
                          "links",
                          "educationId",
                          "lastgradecompleted",
                          "schoolStatus",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "educationId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "lastgradecompleted": {
                            "type": "integer"
                          },
                          "schoolStatus": {
                            "type": "integer"
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                    education:
                        links:
                        - rel: history
                          href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/educations/f91547a2-d13b-40a1-a1be-fed415c468a6/history"
                        educationId: f91547a2-d13b-40a1-a1be-fed415c468a6
                        lastgradecompleted: 10
                        schoolStatus: 6
                        dataCollectionStage: 1
                        informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires an user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a education using a URI resource parameter/ID.
      operationId: GET_clients-clientid-enrollments-enrollmentid-educations-educationid
    put:
      responses:
        '200':
          description: OK â€“ Everything is working.
        '304':
          description: Not Modified â€“ The client can use cached data.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires a user.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Updates a specific education specified by the URI resource parameter/ID.
      operationId: PUT_clients-clientid-enrollments-enrollmentid-educations-educationid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "education"
                  ],
                  "properties": {
                    "education": {
                      "type": "object",
                      "required": [
                        "lastgradecompleted",
                        "schoolStatus",
                        "dataCollectionStage",
                        "informationDate"
                      ],
                      "properties": {
                        "lastgradecompleted": {
                          "type": "integer"
                        },
                        "schoolStatus": {
                          "type": "integer"
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
              example:
                  education:
                    lastgradecompleted: 10
                    schoolStatus: 6
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        required: true
    delete:
      responses:
        '204':
          description: OK â€“ The resource was successfully deleted.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific education specified by the URI resource parameter/ID.
      operationId: DELETE_clients-clientid-enrollments-enrollmentid-educations-educationid
    parameters:
      - name: educationid
        in: path
        required: true
        schema:
          type: string
        description: Education Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/educations/{educationid}/history':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "educations"
                    ],
                    "properties": {
                      "educations": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "educations"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "educations": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "educationId",
                                "lastgradecompleted",
                                "schoolStatus",
                                "dataCollectionStage",
                                "informationDate"
                              ],
                              "properties": {
                                "educationId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "lastgradecompleted": {
                                  "type": "integer"
                                },
                                "schoolStatus": {
                                  "type": "integer"
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    educations:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      educations:
                        - educationId: f91547a2-d13b-40a1-a1be-fed415c468a6
                          lastgradecompleted: 10
                          schoolStatus: 6
                          dataCollectionStage: 1
                          informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for education history.  Returns a list of education ids history, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-educations-educationid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: educationid
        in: path
        required: true
        schema:
          type: string
        description: Education Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/contacts':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "contacts"
                    ],
                    "properties": {
                      "contacts": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "contacts"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "contacts": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "contactId",
                                "contactLocation"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "contactId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "contactLocation": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    contacts:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      contacts:
                        - links:
                          - rel: history
                            href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/contacts/169da295-22f9-41d9-b991-ada835b1e123/history"
                          contactId: 169da295-22f9-41d9-b991-ada835b1e123
                          contactLocation: 3
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for contact.  Returns a list of contact ids, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-contacts
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "contact"
                    ],
                    "properties": {
                      "contact": {
                        "type": "object",
                        "required": [
                          "contactId",
                          "contactLocation"
                        ],
                        "properties": {
                          "contactId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "contactLocation": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                  contact:
                    contactId: 169da295-22f9-41d9-b991-ada835b1e123
                    contactLocation: 3
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found â€“ There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a contact
      operationId: POST_clients-clientid-enrollments-enrollmentid-contacts
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "contact"
                  ],
                  "properties": {
                    "contact": {
                      "type": "object",
                      "required": [
                        "contactLocation"
                      ],
                      "properties": {
                        "contactLocation": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  contact:
                    contactLocation: 3
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/contacts/{contactid}':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "contact"
                    ],
                    "properties": {
                      "contact": {
                        "type": "object",
                        "required": [
                          "links",
                          "contactId",
                          "contactLocation"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "contactId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "contactLocation": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                    contact:
                        links:
                        - rel: history
                          href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/contacts/169da295-22f9-41d9-b991-ada835b1e123/history"
                        contactId: 169da295-22f9-41d9-b991-ada835b1e123
                        contactLocation: 3
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires an user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a contact using a URI resource parameter/ID.
      operationId: GET_clients-clientid-enrollments-enrollmentid-contacts-contactid
    put:
      responses:
        '200':
          description: OK â€“ Everything is working.
        '304':
          description: Not Modified â€“ The client can use cached data.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires a user.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Updates a specific contact specified by the URI resource parameter/ID.
      operationId: PUT_clients-clientid-enrollments-enrollmentid-contacts-contactid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "contact"
                  ],
                  "properties": {
                    "contact": {
                      "type": "object",
                      "required": [
                        "contactLocation"
                      ],
                      "properties": {
                        "contactLocation": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  contact:
                    contactLocation: 3
        required: true
    delete:
      responses:
        '204':
          description: OK â€“ The resource was successfully deleted.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific contact specified by the URI resource parameter/ID.
      operationId: DELETE_clients-clientid-enrollments-enrollmentid-contacts-contactid
    parameters:
      - name: contactid
        in: path
        required: true
        schema:
          type: string
        description: Contact Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/contacts/{contactid}/history':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "contacts"
                    ],
                    "properties": {
                      "contacts": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "contacts"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "contacts": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "contactId",
                                "contactLocation"
                              ],
                              "properties": {
                                "contactId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "contactLocation": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    contacts:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      contacts:
                        - contactId: 169da295-22f9-41d9-b991-ada835b1e123
                          contactLocation: 3
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for contact history.  Returns a list of contact ids history, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-contacts-contactid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: contactid
        in: path
        required: true
        schema:
          type: string
        description: Contact Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/dateofengagements':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "dateofengagements"
                    ],
                    "properties": {
                      "dateofengagements": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "dateofengagements"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "dateofengagements": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "dateofengagementId",
                                "dateofengagement"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "dateofengagementId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "dateofengagement": {
                                  "type": "string",
                                  "format": "MM-dd-YYYY HH:mm",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    dateofengagements:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      dateofengagements:
                        - links:
                          - rel: history
                            href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/dateofengagements/61d17265-aa9f-4ed2-a146-2a94846f3dd3/history"
                          dateofengagementId: 61d17265-aa9f-4ed2-a146-2a94846f3dd3
                          dateofengagement: '04-07-2016 17:50'
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for dateofengagement.  Returns a list of dateofengagement ids,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-dateofengagements
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "dateofengagement"
                    ],
                    "properties": {
                      "dateofengagement": {
                        "type": "object",
                        "required": [
                          "dateofengagementId",
                          "dateofengagement"
                        ],
                        "properties": {
                          "dateofengagementId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "dateofengagement": {
                            "type": "string",
                            "format": "MM-dd-YYYY HH:mm",
                          }
                        }
                      }
                    }
                  }
                example:
                  dateofengagement:
                    dateofengagementId: 61d17265-aa9f-4ed2-a146-2a94846f3dd3
                    dateofengagement: '04-07-2016 17:50'
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found â€“ There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a dateofengagement
      operationId: POST_clients-clientid-enrollments-enrollmentid-dateofengagements
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "dateofengagement"
                  ],
                  "properties": {
                    "dateofengagement": {
                      "type": "object",
                      "required": [
                        "dateofengagement"
                      ],
                      "properties": {
                        "dateofengagement": {
                          "type": "string",
                          "format": "MM-dd-YYYY HH:mm",
                        }
                      }
                    }
                  }
                }
              example:
                  dateofengagement:
                    dateofengagement: '04-07-2016 17:50'
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/dateofengagements/{dateofengagementid}':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "dateofengagement"
                    ],
                    "properties": {
                      "dateofengagement": {
                        "type": "object",
                        "required": [
                          "links",
                          "dateofengagementId",
                          "dateofengagement"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "dateofengagementId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "dateofengagement": {
                            "type": "string",
                            "format": "MM-dd-YYYY HH:mm",
                          }
                        }
                      }
                    }
                  }
                example:
                    dateofengagement:
                        links:
                        - rel: history
                          href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/dateofengagements/61d17265-aa9f-4ed2-a146-2a94846f3dd3/history"
                        dateofengagementId: 61d17265-aa9f-4ed2-a146-2a94846f3dd3
                        dateofengagement: '04-07-2016 17:50'
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires an user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a dateofengagement using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-dateofengagements-dateofengagementid
    put:
      responses:
        '200':
          description: OK â€“ Everything is working.
        '304':
          description: Not Modified â€“ The client can use cached data.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires a user.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific dateofengagement specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-dateofengagements-dateofengagementid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "dateofengagement"
                  ],
                  "properties": {
                    "dateofengagement": {
                      "type": "object",
                      "required": [
                        "dateofengagement"
                      ],
                      "properties": {
                        "dateofengagement": {
                          "type": "string",
                          "format": "MM-dd-YYYY HH:mm",
                        }
                      }
                    }
                  }
                }
              example:
                  dateofengagement:
                    dateofengagement: '04-07-2016 17:50'
        required: true
    delete:
      responses:
        '204':
          description: OK â€“ The resource was successfully deleted.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific dateofengagement specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-dateofengagements-dateofengagementid
    parameters:
      - name: dateofengagementid
        in: path
        required: true
        schema:
          type: string
        description: Dateofengagement Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/dateofengagements/{dateofengagementid}/history':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "dateofengagements"
                    ],
                    "properties": {
                      "dateofengagements": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "dateofengagements"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "dateofengagements": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "dateofengagementId",
                                "dateofengagement"
                              ],
                              "properties": {
                                "dateofengagementId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "dateofengagement": {
                                  "type": "string",
                                  "format": "MM-dd-YYYY HH:mm",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    dateofengagements:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      dateofengagements:
                        - dateofengagementId: 61d17265-aa9f-4ed2-a146-2a94846f3dd3
                          dateofengagement: '04-07-2016 17:50'
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for dateofengagement history.  Returns a list of dateofengagement ids history,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-dateofengagements-dateofengagementid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: dateofengagementid
        in: path
        required: true
        schema:
          type: string
        description: Dateofengagement Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/disabilities':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "disabilitiesList"
                    ],
                    "properties": {
                      "disabilitiesList": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "disabilitiesList"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "disabilitiesList": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "disabilitiesId",
                                "disabilitytype",
                                "disabilityresponse",
                                "indefiniteandimpairs",
                                "documentationonfile",
                                "receivingservices",
                                "pathhowconfirmed",
                                "pathsmiinformation",
                                "tcellcountavailable",
                                "tcellcount",
                                "tcellcountsource",
                                "viralLoadAvailable",
                                "viralLoad",
                                "viralLoadSource",
                                "dataCollectionStage",
                                "informationDate"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "disabilitiesId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "disabilitytype": {
                                  "type": "integer"
                                },
                                "disabilityresponse": {
                                  "type": "integer"
                                },
                                "indefiniteandimpairs": {
                                  "type": "integer"
                                },
                                "documentationonfile": {
                                  "type": "integer"
                                },
                                "receivingservices": {
                                  "type": "integer"
                                },
                                "pathhowconfirmed": {
                                  "type": "integer"
                                },
                                "pathsmiinformation": {
                                  "type": "integer"
                                },
                                "tcellcountavailable": {
                                  "type": "integer"
                                },
                                "tcellcount": {
                                  "type": "integer"
                                },
                                "tcellcountsource": {
                                  "type": "string",
                                },
                                "viralLoadAvailable": {
                                  "type": "integer"
                                },
                                "viralLoad": {
                                  "type": "integer"
                                },
                                "viralLoadSource": {
                                  "type": "string",
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    disabilitiesList:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      disabilitiesList:
                        - links:
                          - rel: history
                            href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/disabilities/afeb939c-72d9-43e8-95e6-045a39843c10/history"
                          disabilitiesId: afeb939c-72d9-43e8-95e6-045a39843c10
                          disabilitytype: 6
                          disabilityresponse: -1994754550
                          indefiniteandimpairs: 0
                          documentationonfile: 0
                          receivingservices: 0
                          pathhowconfirmed: 99
                          pathsmiinformation: 0
                          tcellcountavailable: 1
                          tcellcount: 2
                          tcellcountsource: '3       '
                          viralLoadAvailable: 4
                          viralLoad: 5
                          viralLoadSource: 'test    '
                          dataCollectionStage: 1
                          informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for disability.  Returns a list of disability ids, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-disabilities
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "disabilities"
                    ],
                    "properties": {
                      "disabilities": {
                        "type": "object",
                        "required": [
                          "disabilitiesId",
                          "disabilitytype",
                          "disabilityresponse",
                          "indefiniteandimpairs",
                          "documentationonfile",
                          "receivingservices",
                          "pathhowconfirmed",
                          "pathsmiinformation",
                          "tcellcountavailable",
                          "tcellcount",
                          "tcellcountsource",
                          "viralLoadAvailable",
                          "viralLoad",
                          "viralLoadSource",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "disabilitiesId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "disabilitytype": {
                            "type": "integer"
                          },
                          "disabilityresponse": {
                            "type": "integer"
                          },
                          "indefiniteandimpairs": {
                            "type": "integer"
                          },
                          "documentationonfile": {
                            "type": "integer"
                          },
                          "receivingservices": {
                            "type": "integer"
                          },
                          "pathhowconfirmed": {
                            "type": "integer"
                          },
                          "pathsmiinformation": {
                            "type": "integer"
                          },
                          "tcellcountavailable": {
                            "type": "integer"
                          },
                          "tcellcount": {
                            "type": "integer"
                          },
                          "tcellcountsource": {
                            "type": "string",
                          },
                          "viralLoadAvailable": {
                            "type": "integer"
                          },
                          "viralLoad": {
                            "type": "integer"
                          },
                          "viralLoadSource": {
                            "type": "string",
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                  disabilities:
                    disabilitiesId: afeb939c-72d9-43e8-95e6-045a39843c10
                    disabilitytype: 6
                    disabilityresponse: -1994754550
                    indefiniteandimpairs: 0
                    documentationonfile: 0
                    receivingservices: 0
                    pathhowconfirmed: 99
                    pathsmiinformation: 0
                    tcellcountavailable: 1
                    tcellcount: 2
                    tcellcountsource: '3       '
                    viralLoadAvailable: 4
                    viralLoad: 5
                    viralLoadSource: 'test    '
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found â€“ There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a disability
      operationId: POST_clients-clientid-enrollments-enrollmentid-disabilities
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "disabilities"
                  ],
                  "properties": {
                    "disabilities": {
                      "type": "object",
                      "required": [
                        "disabilitytype",
                        "disabilityresponse",
                        "documentationonfile",
                        "indefiniteandimpairs",
                        "pathhowconfirmed",
                        "receivingservices",
                        "pathsmiinformation",
                        "tcellcountavailable",
                        "tcellcount",
                        "tcellcountsource",
                        "viralLoadAvailable",
                        "viralLoad",
                        "viralLoadSource",
                        "dataCollectionStage",
                        "informationDate"
                      ],
                      "properties": {
                        "disabilitytype": {
                          "type": "integer"
                        },
                        "disabilityresponse": {
                          "type": "integer"
                        },
                        "documentationonfile": {
                          "type": "integer"
                        },
                        "indefiniteandimpairs": {
                          "type": "integer"
                        },
                        "pathhowconfirmed": {
                          "type": "integer"
                        },
                        "receivingservices": {
                          "type": "integer"
                        },
                        "pathsmiinformation": {
                          "type": "integer"
                        },
                        "tcellcountavailable": {
                          "type": "integer"
                        },
                        "tcellcount": {
                          "type": "integer"
                        },
                        "tcellcountsource": {
                          "type": "integer"
                        },
                        "viralLoadAvailable": {
                          "type": "integer"
                        },
                        "viralLoad": {
                          "type": "integer"
                        },
                        "viralLoadSource": {
                          "type": "string",
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
              example:
                  disabilities:
                    disabilitytype: 6
                    disabilityresponse: -1994754550
                    documentationonfile: 0
                    indefiniteandimpairs: 0
                    pathhowconfirmed: 99
                    receivingservices: 0
                    pathsmiinformation: 0
                    tcellcountavailable: 1
                    tcellcount: 2
                    tcellcountsource: 3
                    viralLoadAvailable: 4
                    viralLoad: 5
                    viralLoadSource: test
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/disabilities/{disabilityid}':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "disabilities"
                    ],
                    "properties": {
                      "disabilities": {
                        "type": "object",
                        "required": [
                          "links",
                          "disabilitiesId",
                          "disabilitytype",
                          "disabilityresponse",
                          "indefiniteandimpairs",
                          "documentationonfile",
                          "receivingservices",
                          "pathhowconfirmed",
                          "pathsmiinformation",
                          "tcellcountavailable",
                          "tcellcount",
                          "tcellcountsource",
                          "viralLoadAvailable",
                          "viralLoad",
                          "viralLoadSource",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "disabilitiesId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "disabilitytype": {
                            "type": "integer"
                          },
                          "disabilityresponse": {
                            "type": "integer"
                          },
                          "indefiniteandimpairs": {
                            "type": "integer"
                          },
                          "documentationonfile": {
                            "type": "integer"
                          },
                          "receivingservices": {
                            "type": "integer"
                          },
                          "pathhowconfirmed": {
                            "type": "integer"
                          },
                          "pathsmiinformation": {
                            "type": "integer"
                          },
                          "tcellcountavailable": {
                            "type": "integer"
                          },
                          "tcellcount": {
                            "type": "integer"
                          },
                          "tcellcountsource": {
                            "type": "string",
                          },
                          "viralLoadAvailable": {
                            "type": "integer"
                          },
                          "viralLoad": {
                            "type": "integer"
                          },
                          "viralLoadSource": {
                            "type": "string",
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                    disabilities:
                        links:
                        - rel: history
                          href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/disabilities/afeb939c-72d9-43e8-95e6-045a39843c10/history"
                        disabilitiesId: afeb939c-72d9-43e8-95e6-045a39843c10
                        disabilitytype: 6
                        disabilityresponse: -1994754550
                        indefiniteandimpairs: 0
                        documentationonfile: 0
                        receivingservices: 0
                        pathhowconfirmed: 99
                        pathsmiinformation: 0
                        tcellcountavailable: 1
                        tcellcount: 2
                        tcellcountsource: '3       '
                        viralLoadAvailable: 4
                        viralLoad: 5
                        viralLoadSource: 'test    '
                        dataCollectionStage: 1
                        informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires an user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a disability using a URI resource parameter/ID.
      operationId: GET_clients-clientid-enrollments-enrollmentid-disabilities-disabilityid
    put:
      responses:
        '200':
          description: OK â€“ Everything is working.
        '304':
          description: Not Modified â€“ The client can use cached data.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires a user.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific disability specified by the URI resource
        parameter/ID.
      operationId: PUT_clients-clientid-enrollments-enrollmentid-disabilities-disabilityid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "disabilities"
                  ],
                  "properties": {
                    "disabilities": {
                      "type": "object",
                      "required": [
                        "disabilitytype",
                        "disabilityresponse",
                        "documentationonfile",
                        "indefiniteandimpairs",
                        "pathhowconfirmed",
                        "receivingservices",
                        "pathsmiinformation",
                        "tcellcountavailable",
                        "tcellcount",
                        "tcellcountsource",
                        "viralLoadAvailable",
                        "viralLoad",
                        "viralLoadSource",
                        "dataCollectionStage",
                        "informationDate"
                      ],
                      "properties": {
                        "disabilitytype": {
                          "type": "integer"
                        },
                        "disabilityresponse": {
                          "type": "integer"
                        },
                        "documentationonfile": {
                          "type": "integer"
                        },
                        "indefiniteandimpairs": {
                          "type": "integer"
                        },
                        "pathhowconfirmed": {
                          "type": "integer"
                        },
                        "receivingservices": {
                          "type": "integer"
                        },
                        "pathsmiinformation": {
                          "type": "integer"
                        },
                        "tcellcountavailable": {
                          "type": "integer"
                        },
                        "tcellcount": {
                          "type": "integer"
                        },
                        "tcellcountsource": {
                          "type": "integer"
                        },
                        "viralLoadAvailable": {
                          "type": "integer"
                        },
                        "viralLoad": {
                          "type": "integer"
                        },
                        "viralLoadSource": {
                          "type": "string",
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
              example:
                  disabilities:
                    disabilitytype: 6
                    disabilityresponse: -1994754550
                    documentationonfile: 0
                    indefiniteandimpairs: 0
                    pathhowconfirmed: 99
                    receivingservices: 0
                    pathsmiinformation: 0
                    tcellcountavailable: 1
                    tcellcount: 2
                    tcellcountsource: 3
                    viralLoadAvailable: 4
                    viralLoad: 5
                    viralLoadSource: test
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        required: true
    delete:
      responses:
        '204':
          description: OK â€“ The resource was successfully deleted.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific disability specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-disabilities-disabilityid
    parameters:
      - name: disabilityid
        in: path
        required: true
        schema:
          type: string
        description: Disability Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/disabilities/{disabilityid}/history':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "disabilitiesList"
                    ],
                    "properties": {
                      "disabilitiesList": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "disabilitiesList"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "disabilitiesList": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "disabilitiesId",
                                "disabilitytype",
                                "disabilityresponse",
                                "indefiniteandimpairs",
                                "documentationonfile",
                                "receivingservices",
                                "pathhowconfirmed",
                                "pathsmiinformation",
                                "tcellcountavailable",
                                "tcellcount",
                                "tcellcountsource",
                                "viralLoadAvailable",
                                "viralLoad",
                                "viralLoadSource",
                                "dataCollectionStage",
                                "informationDate"
                              ],
                              "properties": {
                                "disabilitiesId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "disabilitytype": {
                                  "type": "integer"
                                },
                                "disabilityresponse": {
                                  "type": "integer"
                                },
                                "indefiniteandimpairs": {
                                  "type": "integer"
                                },
                                "documentationonfile": {
                                  "type": "integer"
                                },
                                "receivingservices": {
                                  "type": "integer"
                                },
                                "pathhowconfirmed": {
                                  "type": "integer"
                                },
                                "pathsmiinformation": {
                                  "type": "integer"
                                },
                                "tcellcountavailable": {
                                  "type": "integer"
                                },
                                "tcellcount": {
                                  "type": "integer"
                                },
                                "tcellcountsource": {
                                  "type": "string",
                                },
                                "viralLoadAvailable": {
                                  "type": "integer"
                                },
                                "viralLoad": {
                                  "type": "integer"
                                },
                                "viralLoadSource": {
                                  "type": "string",
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    disabilitiesList:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      disabilitiesList:
                        - disabilitiesId: afeb939c-72d9-43e8-95e6-045a39843c10
                          disabilitytype: 6
                          disabilityresponse: -1994754550
                          indefiniteandimpairs: 0
                          documentationonfile: 0
                          receivingservices: 0
                          pathhowconfirmed: 99
                          pathsmiinformation: 0
                          tcellcountavailable: 1
                          tcellcount: 2
                          tcellcountsource: '3       '
                          viralLoadAvailable: 4
                          viralLoad: 5
                          viralLoadSource: 'test    '
                          dataCollectionStage: 1
                          informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for disability history.  Returns a list of disability ids history, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-disabilities-disabilityid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: disabilityid
        in: path
        required: true
        schema:
          type: string
        description: Disability Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/domesticviolences':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "domesticviolences"
                    ],
                    "properties": {
                      "domesticviolences": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "domesticviolences"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "domesticviolences": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "domesticviolenceId",
                                "domesticviolencevictim",
                                "whenoccurred",
                                "currentlyFleeing",
                                "dataCollectionStage",
                                "informationDate"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "domesticviolenceId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "domesticviolencevictim": {
                                  "type": "integer"
                                },
                                "whenoccurred": {
                                  "type": "integer"
                                },
                                "currentlyFleeing": {
                                  "type": "integer"
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    domesticviolences:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      domesticviolences:
                        - links:
                          - rel: history
                            href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/domesticviolences/b4dcd92a-4d6c-44bb-bb07-4431ab48e806/history"
                          domesticviolenceId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                          domesticviolencevictim: 9
                          whenoccurred: 8
                          currentlyFleeing: -588416505
                          dataCollectionStage: 1
                          informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for domesticviolence.  Returns a list of domesticviolence ids,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-domesticviolences
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "domesticviolence"
                    ],
                    "properties": {
                      "domesticviolence": {
                        "type": "object",
                        "required": [
                          "domesticviolenceId",
                          "domesticviolencevictim",
                          "whenoccurred",
                          "currentlyFleeing",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "domesticviolenceId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "domesticviolencevictim": {
                            "type": "integer"
                          },
                          "whenoccurred": {
                            "type": "integer"
                          },
                          "currentlyFleeing": {
                            "type": "integer"
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                  domesticviolence:
                    domesticviolenceId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                    domesticviolencevictim: 9
                    whenoccurred: 8
                    currentlyFleeing: -588416505
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found â€“ There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a domesticviolence
      operationId: POST_clients-clientid-enrollments-enrollmentid-domesticviolences
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "domesticviolence"
                  ],
                  "properties": {
                    "domesticviolence": {
                      "type": "object",
                      "required": [
                        "domesticviolencevictim",
                        "whenoccurred",
                        "currentlyFleeing",
                        "dataCollectionStage",
                        "informationDate"
                      ],
                      "properties": {
                        "domesticviolencevictim": {
                          "type": "integer"
                        },
                        "whenoccurred": {
                          "type": "integer"
                        },
                        "currentlyFleeing": {
                          "type": "integer"
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
              example:
                  domesticviolence:
                    domesticviolencevictim: 9
                    whenoccurred: 8
                    currentlyFleeing: -588416505
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/domesticviolences/{domesticviolenceid}':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "domesticviolence"
                    ],
                    "properties": {
                      "domesticviolence": {
                        "type": "object",
                        "required": [
                          "links",
                          "domesticviolenceId",
                          "domesticviolencevictim",
                          "whenoccurred",
                          "currentlyFleeing",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "domesticviolenceId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "domesticviolencevictim": {
                            "type": "integer"
                          },
                          "whenoccurred": {
                            "type": "integer"
                          },
                          "currentlyFleeing": {
                            "type": "integer"
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                    domesticviolence:
                        links:
                        - rel: history
                          href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/domesticviolences/b4dcd92a-4d6c-44bb-bb07-4431ab48e806/history"
                        domesticviolenceId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                        domesticviolencevictim: 9
                        whenoccurred: 8
                        currentlyFleeing: -588416505
                        dataCollectionStage: 1
                        informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires an user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a domesticviolence using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-domesticviolences-domesticviolenceid
    put:
      responses:
        '200':
          description: OK â€“ Everything is working.
        '304':
          description: Not Modified â€“ The client can use cached data.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires a user.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific domesticviolence specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-domesticviolences-domesticviolenceid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "domesticviolence"
                  ],
                  "properties": {
                    "domesticviolence": {
                      "type": "object",
                      "required": [
                        "domesticviolencevictim",
                        "whenoccurred",
                        "currentlyFleeing",
                        "dataCollectionStage",
                        "informationDate"
                      ],
                      "properties": {
                        "domesticviolencevictim": {
                          "type": "integer"
                        },
                        "whenoccurred": {
                          "type": "integer"
                        },
                        "currentlyFleeing": {
                          "type": "integer"
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
              example:
                  domesticviolence:
                    domesticviolencevictim: 9
                    whenoccurred: 8
                    currentlyFleeing: -588416505
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        required: true
    delete:
      responses:
        '204':
          description: OK â€“ The resource was successfully deleted.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific domesticviolence specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-domesticviolences-domesticviolenceid
    parameters:
      - name: domesticviolenceid
        in: path
        required: true
        schema:
          type: string
        description: Domesticviolence Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/domesticviolences/{domesticviolenceid}/history':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "domesticviolences"
                    ],
                    "properties": {
                      "domesticviolences": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "domesticviolences"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "domesticviolences": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "domesticviolenceId",
                                "domesticviolencevictim",
                                "whenoccurred",
                                "currentlyFleeing",
                                "dataCollectionStage",
                                "informationDate"
                              ],
                              "properties": {
                                "domesticviolenceId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "domesticviolencevictim": {
                                  "type": "integer"
                                },
                                "whenoccurred": {
                                  "type": "integer"
                                },
                                "currentlyFleeing": {
                                  "type": "integer"
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    domesticviolences:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      domesticviolences:
                        - domesticviolenceId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                          domesticviolencevictim: 9
                          whenoccurred: 8
                          currentlyFleeing: -588416505
                          dataCollectionStage: 1
                          informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for domesticviolence history.  Returns a list of domesticviolence ids history,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-domesticviolences-domesticviolenceid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: domesticviolenceid
        in: path
        required: true
        schema:
          type: string
        description: Domesticviolence Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/employments':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "employments"
                    ],
                    "properties": {
                      "employments": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "employments"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "employments": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "employmentId",
                                "employed",
                                "employmentType",
                                "notEmployedReason",
                                "dataCollectionStage",
                                "informationDate"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "employmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "employed": {
                                  "type": "integer"
                                },
                                "employmentType": {
                                  "type": "integer"
                                },
                                "notEmployedReason": {
                                  "type": "integer"
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    employments:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      employments:
                        - links:
                          - rel: history
                            href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/employments/61fa7069-3d46-4b4f-86f5-44fc4e1d6131/history"
                          employmentId: 61fa7069-3d46-4b4f-86f5-44fc4e1d6131
                          employed: 0
                          employmentType: 2
                          notEmployedReason: 3
                          dataCollectionStage: 1
                          informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for employment.  Returns a list of employment ids, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-employments
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "employment"
                    ],
                    "properties": {
                      "employment": {
                        "type": "object",
                        "required": [
                          "employmentId",
                          "employed",
                          "employmentType",
                          "notEmployedReason",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "employmentId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "employed": {
                            "type": "integer"
                          },
                          "employmentType": {
                            "type": "integer"
                          },
                          "notEmployedReason": {
                            "type": "integer"
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                  employment:
                    employmentId: 61fa7069-3d46-4b4f-86f5-44fc4e1d6131
                    employed: 0
                    employmentType: 2
                    notEmployedReason: 3
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found â€“ There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a employment
      operationId: POST_clients-clientid-enrollments-enrollmentid-employments
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "employment"
                  ],
                  "properties": {
                    "employment": {
                      "type": "object",
                      "required": [
                        "employed",
                        "employmentType",
                        "notEmployedReason",
                        "dataCollectionStage",
                        "informationDate"
                      ],
                      "properties": {
                        "employed": {
                          "type": "integer"
                        },
                        "employmentType": {
                          "type": "integer"
                        },
                        "notEmployedReason": {
                          "type": "integer"
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
              example:
                  employment:
                    employed: 0
                    employmentType: 2
                    notEmployedReason: 3
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/employments/{employmentid}':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "employment"
                    ],
                    "properties": {
                      "employment": {
                        "type": "object",
                        "required": [
                          "links",
                          "employmentId",
                          "employed",
                          "employmentType",
                          "notEmployedReason",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "employmentId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "employed": {
                            "type": "integer"
                          },
                          "employmentType": {
                            "type": "integer"
                          },
                          "notEmployedReason": {
                            "type": "integer"
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                    employment:
                        links:
                        - rel: history
                          href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/employments/61fa7069-3d46-4b4f-86f5-44fc4e1d6131/history"
                        employmentId: 61fa7069-3d46-4b4f-86f5-44fc4e1d6131
                        employed: 0
                        employmentType: 2
                        notEmployedReason: 3
                        dataCollectionStage: 1
                        informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires an user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a employment using a URI resource parameter/ID.
      operationId: GET_clients-clientid-enrollments-enrollmentid-employments-employmentid
    put:
      responses:
        '200':
          description: OK â€“ Everything is working.
        '304':
          description: Not Modified â€“ The client can use cached data.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires a user.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific employment specified by the URI resource
        parameter/ID.
      operationId: PUT_clients-clientid-enrollments-enrollmentid-employments-employmentid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "employment"
                  ],
                  "properties": {
                    "employment": {
                      "type": "object",
                      "required": [
                        "employed",
                        "employmentType",
                        "notEmployedReason",
                        "dataCollectionStage",
                        "informationDate"
                      ],
                      "properties": {
                        "employed": {
                          "type": "integer"
                        },
                        "employmentType": {
                          "type": "integer"
                        },
                        "notEmployedReason": {
                          "type": "integer"
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
              example:
                  employment:
                    employed: 0
                    employmentType: 2
                    notEmployedReason: 3
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        required: true
    delete:
      responses:
        '204':
          description: OK â€“ The resource was successfully deleted.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific employment specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-employments-employmentid
    parameters:
      - name: employmentid
        in: path
        required: true
        schema:
          type: string
        description: Employment Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/employments/{employmentid}/history':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "employments"
                    ],
                    "properties": {
                      "employments": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "employments"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "employments": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "employmentId",
                                "employed",
                                "employmentType",
                                "notEmployedReason",
                                "dataCollectionStage",
                                "informationDate"
                              ],
                              "properties": {
                                "employmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "employed": {
                                  "type": "integer"
                                },
                                "employmentType": {
                                  "type": "integer"
                                },
                                "notEmployedReason": {
                                  "type": "integer"
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    employments:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      employments:
                        - employmentId: 61fa7069-3d46-4b4f-86f5-44fc4e1d6131
                          employed: 0
                          employmentType: 2
                          notEmployedReason: 3
                          dataCollectionStage: 1
                          informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for employment history.  Returns a list of employment ids history, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-employments-employmentid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: employmentid
        in: path
        required: true
        schema:
          type: string
        description: Employment Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/healthinsurances':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "healthinsurances"
                    ],
                    "properties": {
                      "healthinsurances": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "healthinsurances"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "healthinsurances": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "healthinsuranceId",
                                "insurancefromanysource",
                                "medicaid",
                                "nomedicaidreason",
                                "medicare",
                                "nomedicarereason",
                                "schip",
                                "noschipreason",
                                "novamedreason",
                                "employerprovided",
                                "noemployerprovidedreason",
                                "cobra",
                                "nocobrareason",
                                "privatepay",
                                "noprivatepayreason",
                                "statehealthins",
                                "nostatehealthinsreason",
                                "otherSource",
                                "otherSourceIdentify",
                                "dataCollectionStage",
                                "informationDate"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "healthinsuranceId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "insurancefromanysource": {
                                  "type": "integer"
                                },
                                "medicaid": {
                                  "type": "integer"
                                },
                                "nomedicaidreason": {
                                  "type": "integer"
                                },
                                "medicare": {
                                  "type": "integer"
                                },
                                "nomedicarereason": {
                                  "type": "integer"
                                },
                                "schip": {
                                  "type": "integer"
                                },
                                "noschipreason": {
                                  "type": "integer"
                                },
                                "novamedreason": {
                                  "type": "integer"
                                },
                                "employerprovided": {
                                  "type": "integer"
                                },
                                "noemployerprovidedreason": {
                                  "type": "integer"
                                },
                                "cobra": {
                                  "type": "integer"
                                },
                                "nocobrareason": {
                                  "type": "integer"
                                },
                                "privatepay": {
                                  "type": "integer"
                                },
                                "noprivatepayreason": {
                                  "type": "integer"
                                },
                                "statehealthins": {
                                  "type": "integer"
                                },
                                "nostatehealthinsreason": {
                                  "type": "integer"
                                },
                                "otherSource": {
                                  "type": "integer"
                                },
                                "otherSourceIdentify": {
                                  "type": "string",
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    healthinsurances:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      healthinsurances:
                        - links:
                          - rel: history
                            href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/healthinsurances/b7ccbf4c-980d-4163-a7a5-7eecf6829946/history"
                          healthinsuranceId: b7ccbf4c-980d-4163-a7a5-7eecf6829946
                          insurancefromanysource: 99
                          medicaid: 1
                          nomedicaidreason: 8
                          medicare: 99
                          nomedicarereason: 4
                          schip: 1
                          noschipreason: 2
                          novamedreason: 9
                          employerprovided: 1929555170
                          noemployerprovidedreason: 99
                          cobra: 1401014227
                          nocobrareason: 2
                          privatepay: 0
                          noprivatepayreason: 4
                          statehealthins: 0
                          nostatehealthinsreason: 8
                          otherSource: 688424562
                          otherSourceIdentify: 'test    '
                          dataCollectionStage: 1
                          informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for healthinsurance.  Returns a list of healthinsurance ids,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-healthinsurances
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "healthinsurance"
                    ],
                    "properties": {
                      "healthinsurance": {
                        "type": "object",
                        "required": [
                          "healthinsuranceId",
                          "insurancefromanysource",
                          "medicaid",
                          "nomedicaidreason",
                          "medicare",
                          "nomedicarereason",
                          "schip",
                          "noschipreason",
                          "novamedreason",
                          "employerprovided",
                          "noemployerprovidedreason",
                          "cobra",
                          "nocobrareason",
                          "privatepay",
                          "noprivatepayreason",
                          "statehealthins",
                          "nostatehealthinsreason",
                          "otherSource",
                          "otherSourceIdentify",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "healthinsuranceId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "insurancefromanysource": {
                            "type": "integer"
                          },
                          "medicaid": {
                            "type": "integer"
                          },
                          "nomedicaidreason": {
                            "type": "integer"
                          },
                          "medicare": {
                            "type": "integer"
                          },
                          "nomedicarereason": {
                            "type": "integer"
                          },
                          "schip": {
                            "type": "integer"
                          },
                          "noschipreason": {
                            "type": "integer"
                          },
                          "novamedreason": {
                            "type": "integer"
                          },
                          "employerprovided": {
                            "type": "integer"
                          },
                          "noemployerprovidedreason": {
                            "type": "integer"
                          },
                          "cobra": {
                            "type": "integer"
                          },
                          "nocobrareason": {
                            "type": "integer"
                          },
                          "privatepay": {
                            "type": "integer"
                          },
                          "noprivatepayreason": {
                            "type": "integer"
                          },
                          "statehealthins": {
                            "type": "integer"
                          },
                          "nostatehealthinsreason": {
                            "type": "integer"
                          },
                          "otherSource": {
                            "type": "integer"
                          },
                          "otherSourceIdentify": {
                            "type": "string",
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                  healthinsurance:
                    healthinsuranceId: b7ccbf4c-980d-4163-a7a5-7eecf6829946
                    insurancefromanysource: 99
                    medicaid: 1
                    nomedicaidreason: 8
                    medicare: 99
                    nomedicarereason: 4
                    schip: 1
                    noschipreason: 2
                    novamedreason: 9
                    employerprovided: 1929555170
                    noemployerprovidedreason: 99
                    cobra: 1401014227
                    nocobrareason: 2
                    privatepay: 0
                    noprivatepayreason: 4
                    statehealthins: 0
                    nostatehealthinsreason: 8
                    otherSource: 688424562
                    otherSourceIdentify: 'test    '
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found â€“ There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a healthinsurance
      operationId: POST_clients-clientid-enrollments-enrollmentid-healthinsurances
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "healthinsurance"
                  ],
                  "properties": {
                    "healthinsurance": {
                      "type": "object",
                      "required": [
                        "insurancefromanysource",
                        "medicaid",
                        "nomedicaidreason",
                        "medicare",
                        "nomedicarereason",
                        "schip",
                        "noschipreason",
                        "vamedicalservices",
                        "novamedreason",
                        "employerprovided",
                        "noemployerprovidedreason",
                        "cobra",
                        "nocobrareason",
                        "privatepay",
                        "noprivatepayreason",
                        "statehealthins",
                        "nostatehealthinsreason",
                        "otherSource",
                        "otherSourceIdentify",
                        "dataCollectionStage",
                        "informationDate"
                      ],
                      "properties": {
                        "insurancefromanysource": {
                          "type": "integer"
                        },
                        "medicaid": {
                          "type": "integer"
                        },
                        "nomedicaidreason": {
                          "type": "integer"
                        },
                        "medicare": {
                          "type": "integer"
                        },
                        "nomedicarereason": {
                          "type": "integer"
                        },
                        "schip": {
                          "type": "integer"
                        },
                        "noschipreason": {
                          "type": "integer"
                        },
                        "vamedicalservices": {
                          "type": "integer"
                        },
                        "novamedreason": {
                          "type": "integer"
                        },
                        "employerprovided": {
                          "type": "integer"
                        },
                        "noemployerprovidedreason": {
                          "type": "integer"
                        },
                        "cobra": {
                          "type": "integer"
                        },
                        "nocobrareason": {
                          "type": "integer"
                        },
                        "privatepay": {
                          "type": "integer"
                        },
                        "noprivatepayreason": {
                          "type": "integer"
                        },
                        "statehealthins": {
                          "type": "integer"
                        },
                        "nostatehealthinsreason": {
                          "type": "integer"
                        },
                        "otherSource": {
                          "type": "integer"
                        },
                        "otherSourceIdentify": {
                          "type": "string",
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
              example:
                  healthinsurance:
                    insurancefromanysource: 99
                    medicaid: 1
                    nomedicaidreason: 8
                    medicare: 99
                    nomedicarereason: 4
                    schip: 1
                    noschipreason: 2
                    vamedicalservices: 9
                    novamedreason: 9
                    employerprovided: 1929555170
                    noemployerprovidedreason: 99
                    cobra: 1401014227
                    nocobrareason: 2
                    privatepay: 0
                    noprivatepayreason: 4
                    statehealthins: 0
                    nostatehealthinsreason: 8
                    otherSource: 688424562
                    otherSourceIdentify: test
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/healthinsurances/{healthinsuranceid}':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "healthinsurance"
                    ],
                    "properties": {
                      "healthinsurance": {
                        "type": "object",
                        "required": [
                          "links",
                          "healthinsuranceId",
                          "insurancefromanysource",
                          "medicaid",
                          "nomedicaidreason",
                          "medicare",
                          "nomedicarereason",
                          "schip",
                          "noschipreason",
                          "novamedreason",
                          "employerprovided",
                          "noemployerprovidedreason",
                          "cobra",
                          "nocobrareason",
                          "privatepay",
                          "noprivatepayreason",
                          "statehealthins",
                          "nostatehealthinsreason",
                          "otherSource",
                          "otherSourceIdentify",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "healthinsuranceId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "insurancefromanysource": {
                            "type": "integer"
                          },
                          "medicaid": {
                            "type": "integer"
                          },
                          "nomedicaidreason": {
                            "type": "integer"
                          },
                          "medicare": {
                            "type": "integer"
                          },
                          "nomedicarereason": {
                            "type": "integer"
                          },
                          "schip": {
                            "type": "integer"
                          },
                          "noschipreason": {
                            "type": "integer"
                          },
                          "novamedreason": {
                            "type": "integer"
                          },
                          "employerprovided": {
                            "type": "integer"
                          },
                          "noemployerprovidedreason": {
                            "type": "integer"
                          },
                          "cobra": {
                            "type": "integer"
                          },
                          "nocobrareason": {
                            "type": "integer"
                          },
                          "privatepay": {
                            "type": "integer"
                          },
                          "noprivatepayreason": {
                            "type": "integer"
                          },
                          "statehealthins": {
                            "type": "integer"
                          },
                          "nostatehealthinsreason": {
                            "type": "integer"
                          },
                          "otherSource": {
                            "type": "integer"
                          },
                          "otherSourceIdentify": {
                            "type": "string",
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                    healthinsurance:
                        links:
                        - rel: history
                          href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/healthinsurances/b7ccbf4c-980d-4163-a7a5-7eecf6829946/history"
                        healthinsuranceId: b7ccbf4c-980d-4163-a7a5-7eecf6829946
                        insurancefromanysource: 99
                        medicaid: 1
                        nomedicaidreason: 8
                        medicare: 99
                        nomedicarereason: 4
                        schip: 1
                        noschipreason: 2
                        novamedreason: 9
                        employerprovided: 1929555170
                        noemployerprovidedreason: 99
                        cobra: 1401014227
                        nocobrareason: 2
                        privatepay: 0
                        noprivatepayreason: 4
                        statehealthins: 0
                        nostatehealthinsreason: 8
                        otherSource: 688424562
                        otherSourceIdentify: 'test    '
                        dataCollectionStage: 1
                        informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires an user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a healthinsurance using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-healthinsurances-healthinsuranceid
    put:
      responses:
        '200':
          description: OK â€“ Everything is working.
        '304':
          description: Not Modified â€“ The client can use cached data.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires a user.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific healthinsurance specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-healthinsurances-healthinsuranceid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "healthinsurance"
                  ],
                  "properties": {
                    "healthinsurance": {
                      "type": "object",
                      "required": [
                        "insurancefromanysource",
                        "medicaid",
                        "nomedicaidreason",
                        "medicare",
                        "nomedicarereason",
                        "schip",
                        "noschipreason",
                        "vamedicalservices",
                        "novamedreason",
                        "employerprovided",
                        "noemployerprovidedreason",
                        "cobra",
                        "nocobrareason",
                        "privatepay",
                        "noprivatepayreason",
                        "statehealthins",
                        "nostatehealthinsreason",
                        "otherSource",
                        "otherSourceIdentify",
                        "dataCollectionStage",
                        "informationDate"
                      ],
                      "properties": {
                        "insurancefromanysource": {
                          "type": "integer"
                        },
                        "medicaid": {
                          "type": "integer"
                        },
                        "nomedicaidreason": {
                          "type": "integer"
                        },
                        "medicare": {
                          "type": "integer"
                        },
                        "nomedicarereason": {
                          "type": "integer"
                        },
                        "schip": {
                          "type": "integer"
                        },
                        "noschipreason": {
                          "type": "integer"
                        },
                        "vamedicalservices": {
                          "type": "integer"
                        },
                        "novamedreason": {
                          "type": "integer"
                        },
                        "employerprovided": {
                          "type": "integer"
                        },
                        "noemployerprovidedreason": {
                          "type": "integer"
                        },
                        "cobra": {
                          "type": "integer"
                        },
                        "nocobrareason": {
                          "type": "integer"
                        },
                        "privatepay": {
                          "type": "integer"
                        },
                        "noprivatepayreason": {
                          "type": "integer"
                        },
                        "statehealthins": {
                          "type": "integer"
                        },
                        "nostatehealthinsreason": {
                          "type": "integer"
                        },
                        "otherSource": {
                          "type": "integer"
                        },
                        "otherSourceIdentify": {
                          "type": "string",
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
              example:
                  healthinsurance:
                    insurancefromanysource: 99
                    medicaid: 1
                    nomedicaidreason: 8
                    medicare: 99
                    nomedicarereason: 4
                    schip: 1
                    noschipreason: 2
                    vamedicalservices: 9
                    novamedreason: 9
                    employerprovided: 1929555170
                    noemployerprovidedreason: 99
                    cobra: 1401014227
                    nocobrareason: 2
                    privatepay: 0
                    noprivatepayreason: 4
                    statehealthins: 0
                    nostatehealthinsreason: 8
                    otherSource: 688424562
                    otherSourceIdentify: test
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        required: true
    delete:
      responses:
        '204':
          description: OK â€“ The resource was successfully deleted.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific healthinsurance specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-healthinsurances-healthinsuranceid
    parameters:
      - name: healthinsuranceid
        in: path
        required: true
        schema:
          type: string
        description: Healthinsurance Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/healthinsurances/{healthinsuranceid}/history':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "healthinsurances"
                    ],
                    "properties": {
                      "healthinsurances": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "healthinsurances"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "healthinsurances": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "healthinsuranceId",
                                "insurancefromanysource",
                                "medicaid",
                                "nomedicaidreason",
                                "medicare",
                                "nomedicarereason",
                                "schip",
                                "noschipreason",
                                "novamedreason",
                                "employerprovided",
                                "noemployerprovidedreason",
                                "cobra",
                                "nocobrareason",
                                "privatepay",
                                "noprivatepayreason",
                                "statehealthins",
                                "nostatehealthinsreason",
                                "otherSource",
                                "otherSourceIdentify",
                                "dataCollectionStage",
                                "informationDate"
                              ],
                              "properties": {
                                "healthinsuranceId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "insurancefromanysource": {
                                  "type": "integer"
                                },
                                "medicaid": {
                                  "type": "integer"
                                },
                                "nomedicaidreason": {
                                  "type": "integer"
                                },
                                "medicare": {
                                  "type": "integer"
                                },
                                "nomedicarereason": {
                                  "type": "integer"
                                },
                                "schip": {
                                  "type": "integer"
                                },
                                "noschipreason": {
                                  "type": "integer"
                                },
                                "novamedreason": {
                                  "type": "integer"
                                },
                                "employerprovided": {
                                  "type": "integer"
                                },
                                "noemployerprovidedreason": {
                                  "type": "integer"
                                },
                                "cobra": {
                                  "type": "integer"
                                },
                                "nocobrareason": {
                                  "type": "integer"
                                },
                                "privatepay": {
                                  "type": "integer"
                                },
                                "noprivatepayreason": {
                                  "type": "integer"
                                },
                                "statehealthins": {
                                  "type": "integer"
                                },
                                "nostatehealthinsreason": {
                                  "type": "integer"
                                },
                                "otherSource": {
                                  "type": "integer"
                                },
                                "otherSourceIdentify": {
                                  "type": "string",
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    healthinsurances:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      healthinsurances:
                        - healthinsuranceId: b7ccbf4c-980d-4163-a7a5-7eecf6829946
                          insurancefromanysource: 99
                          medicaid: 1
                          nomedicaidreason: 8
                          medicare: 99
                          nomedicarereason: 4
                          schip: 1
                          noschipreason: 2
                          novamedreason: 9
                          employerprovided: 1929555170
                          noemployerprovidedreason: 99
                          cobra: 1401014227
                          nocobrareason: 2
                          privatepay: 0
                          noprivatepayreason: 4
                          statehealthins: 0
                          nostatehealthinsreason: 8
                          otherSource: 688424562
                          otherSourceIdentify: 'test    '
                          dataCollectionStage: 1
                          informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for healthinsurance history.  Returns a list of healthinsurance ids history,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-healthinsurances-healthinsuranceid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: healthinsuranceid
        in: path
        required: true
        schema:
          type: string
        description: Healthinsurance Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/healthstatuses':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "healthstatuses"
                    ],
                    "properties": {
                      "healthstatuses": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "healthstatuses"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "healthstatuses": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "healthstatusId",
                                "healthCategory",
                                "healthStatus",
                                "dataCollectionStage",
                                "informationDate",
                                "dueDate"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "healthstatusId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "healthCategory": {
                                  "type": "integer"
                                },
                                "healthStatus": {
                                  "type": "integer"
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                },
                                "dueDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    healthstatuses:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      healthstatuses:
                        - links:
                          - rel: history
                            href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/healthstatuses/81057685-4120-424f-9378-23bc45e01925/history"
                          healthstatusId: 81057685-4120-424f-9378-23bc45e01925
                          healthCategory: 27
                          healthStatus: 3
                          dataCollectionStage: 1
                          informationDate: 03-17-2016
                          dueDate: 04-05-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for healthstatus.  Returns a list of healthstatus ids, based on
        the query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-healthstatuses
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "healthstatus"
                    ],
                    "properties": {
                      "healthstatus": {
                        "type": "object",
                        "required": [
                          "healthstatusId",
                          "healthCategory",
                          "healthStatus",
                          "dataCollectionStage",
                          "informationDate",
                          "dueDate"
                        ],
                        "properties": {
                          "healthstatusId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "healthCategory": {
                            "type": "integer"
                          },
                          "healthStatus": {
                            "type": "integer"
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dueDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                  healthstatus:
                    healthstatusId: 81057685-4120-424f-9378-23bc45e01925
                    healthCategory: 27
                    healthStatus: 3
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
                    dueDate: 04-05-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found â€“ There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a healthstatus
      operationId: POST_clients-clientid-enrollments-enrollmentid-healthstatuses
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "healthstatus"
                  ],
                  "properties": {
                    "healthstatus": {
                      "type": "object",
                      "required": [
                        "healthCategory",
                        "healthStatus",
                        "dataCollectionStage",
                        "informationDate",
                        "dueDate"
                      ],
                      "properties": {
                        "healthCategory": {
                          "type": "integer"
                        },
                        "healthStatus": {
                          "type": "integer"
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "dueDate": {
                          "type": "string",
                          "format": "MM-dd-YYYY HH:mm",
                        }
                      }
                    }
                  }
                }
              example:
                  healthstatus:
                    healthCategory: 27
                    healthStatus: 3
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
                    dueDate: '04-05-2016 11:12'
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/healthstatuses/{healthstatusid}':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "healthstatus"
                    ],
                    "properties": {
                      "healthstatus": {
                        "type": "object",
                        "required": [
                          "links",
                          "healthstatusId",
                          "healthCategory",
                          "healthStatus",
                          "dataCollectionStage",
                          "informationDate",
                          "dueDate"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "healthstatusId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "healthCategory": {
                            "type": "integer"
                          },
                          "healthStatus": {
                            "type": "integer"
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dueDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                    healthstatus:
                        links:
                        - rel: history
                          href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/healthstatuses/81057685-4120-424f-9378-23bc45e01925/history"
                        healthstatusId: 81057685-4120-424f-9378-23bc45e01925
                        healthCategory: 27
                        healthStatus: 3
                        dataCollectionStage: 1
                        informationDate: 03-17-2016
                        dueDate: 04-05-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires an user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a healthstatus using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-healthstatuses-healthstatusid
    put:
      responses:
        '200':
          description: OK â€“ Everything is working.
        '304':
          description: Not Modified â€“ The client can use cached data.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires a user.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific healthstatus specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-healthstatuses-healthstatusid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "healthstatus"
                  ],
                  "properties": {
                    "healthstatus": {
                      "type": "object",
                      "required": [
                        "healthCategory",
                        "healthStatus",
                        "dataCollectionStage",
                        "informationDate",
                        "dueDate"
                      ],
                      "properties": {
                        "healthCategory": {
                          "type": "integer"
                        },
                        "healthStatus": {
                          "type": "integer"
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "dueDate": {
                          "type": "string",
                          "format": "MM-dd-YYYY HH:mm",
                        }
                      }
                    }
                  }
                }
              example:
                  healthstatus:
                    healthCategory: 27
                    healthStatus: 3
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
                    dueDate: '04-05-2016 11:12'
        required: true
    delete:
      responses:
        '204':
          description: OK â€“ The resource was successfully deleted.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific healthstatus specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-healthstatuses-healthstatusid
    parameters:
      - name: healthstatusid
        in: path
        required: true
        schema:
          type: string
        description: Healthstatus Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/healthstatuses/{healthstatusid}/history':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "healthstatuses"
                    ],
                    "properties": {
                      "healthstatuses": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "healthstatuses"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "healthstatuses": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "healthstatusId",
                                "healthCategory",
                                "healthStatus",
                                "dataCollectionStage",
                                "informationDate",
                                "dueDate"
                              ],
                              "properties": {
                                "healthstatusId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "healthCategory": {
                                  "type": "integer"
                                },
                                "healthStatus": {
                                  "type": "integer"
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                },
                                "dueDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    healthstatuses:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      healthstatuses:
                        - healthstatusId: 81057685-4120-424f-9378-23bc45e01925
                          healthCategory: 27
                          healthStatus: 3
                          dataCollectionStage: 1
                          informationDate: 03-17-2016
                          dueDate: 04-05-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for healthstatus history.  Returns a list of healthstatus ids history, based on
        the query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-healthstatuses-healthstatusid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: healthstatusid
        in: path
        required: true
        schema:
          type: string
        description: Healthstatus Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/incomeandsources':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "IncomeAndSources"
                    ],
                    "properties": {
                      "IncomeAndSources": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "incomeAndSources"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "incomeAndSources": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "incomeAndSourceId",
                                "alimony",
                                "alimonyamount",
                                "childsupport",
                                "childsupportamount",
                                "earned",
                                "earnedamount",
                                "ga",
                                "gaamount",
                                "incomefromanysource",
                                "othersource",
                                "othersourceamount",
                                "othersourceidentify",
                                "pension",
                                "pensionamount",
                                "privatedisability",
                                "privatedisabilityamount",
                                "socsecretirement",
                                "socsecretirementamount",
                                "ssdi",
                                "ssdiamount",
                                "ssi",
                                "ssiamount",
                                "tanf",
                                "tanfamount",
                                "totalmonthlyincome",
                                "unemployment",
                                "unemploymentamount",
                                "vadisabilitynonservice",
                                "vadisabilitynonserviceamount",
                                "vadisabilityservice",
                                "vadisabilityserviceamount",
                                "workerscomp",
                                "workerscompamount",
                                "dataCollectionStage",
                                "informationDate",
                                "dateCreated"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "incomeAndSourceId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "alimony": {
                                  "type": "integer"
                                },
                                "alimonyamount": {
                                  "type": "number"
                                },
                                "childsupport": {
                                  "type": "integer"
                                },
                                "childsupportamount": {
                                  "type": "number"
                                },
                                "earned": {
                                  "type": "integer"
                                },
                                "earnedamount": {
                                  "type": "number"
                                },
                                "ga": {
                                  "type": "integer"
                                },
                                "gaamount": {
                                  "type": "number"
                                },
                                "incomefromanysource": {
                                  "type": "integer"
                                },
                                "othersource": {
                                  "type": "integer"
                                },
                                "othersourceamount": {
                                  "type": "number"
                                },
                                "othersourceidentify": {
                                  "type": "string",
                                },
                                "pension": {
                                  "type": "integer"
                                },
                                "pensionamount": {
                                  "type": "number"
                                },
                                "privatedisability": {
                                  "type": "integer"
                                },
                                "privatedisabilityamount": {
                                  "type": "number"
                                },
                                "socsecretirement": {
                                  "type": "integer"
                                },
                                "socsecretirementamount": {
                                  "type": "number"
                                },
                                "ssdi": {
                                  "type": "integer"
                                },
                                "ssdiamount": {
                                  "type": "number"
                                },
                                "ssi": {
                                  "type": "integer"
                                },
                                "ssiamount": {
                                  "type": "number"
                                },
                                "tanf": {
                                  "type": "integer"
                                },
                                "tanfamount": {
                                  "type": "number"
                                },
                                "totalmonthlyincome": {
                                  "type": "number"
                                },
                                "unemployment": {
                                  "type": "integer"
                                },
                                "unemploymentamount": {
                                  "type": "number"
                                },
                                "vadisabilitynonservice": {
                                  "type": "integer"
                                },
                                "vadisabilitynonserviceamount": {
                                  "type": "number"
                                },
                                "vadisabilityservice": {
                                  "type": "integer"
                                },
                                "vadisabilityserviceamount": {
                                  "type": "number"
                                },
                                "workerscomp": {
                                  "type": "integer"
                                },
                                "workerscompamount": {
                                  "type": "number"
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                },
                                "dateCreated": {
                                  "type": "string",
                                  "format": "MM-dd-YYYY HH:mm",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    IncomeAndSources:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      incomeAndSources:
                        - links:
                          - rel: history
                            href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/incomeandsources/07577bdf-d44d-4a2f-b0f5-952098158242/history"
                          incomeAndSourceId: 07577bdf-d44d-4a2f-b0f5-952098158242
                          alimony: 0
                          alimonyamount: 0.683
                          childsupport: 0
                          childsupportamount: 0.375
                          earned: 0
                          earnedamount: 0.974
                          ga: 0
                          gaamount: 0.638
                          incomefromanysource: 0
                          othersource: 0
                          othersourceamount: 0.867
                          othersourceidentify: TestData
                          pension: 0
                          pensionamount: 0.375
                          privatedisability: 0
                          privatedisabilityamount: 0.966
                          socsecretirement: 0
                          socsecretirementamount: 0.635
                          ssdi: 0
                          ssdiamount: 0.429
                          ssi: 0
                          ssiamount: 0.33
                          tanf: 0
                          tanfamount: 0.361
                          totalmonthlyincome: 0.273
                          unemployment: 0
                          unemploymentamount: 0.584
                          vadisabilitynonservice: 0
                          vadisabilitynonserviceamount: 0.816
                          vadisabilityservice: 0
                          vadisabilityserviceamount: 0.148
                          workerscomp: 0
                          workerscompamount: 0.144
                          dataCollectionStage: 1
                          informationDate: 03-17-2016
                          dateCreated: '04-11-2016 10:32'
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for incomeandsource.  Returns a list of incomeandsource ids,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-incomeandsources
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "incomeAndSource"
                    ],
                    "properties": {
                      "incomeAndSource": {
                        "type": "object",
                        "required": [
                          "incomeAndSourceId",
                          "alimony",
                          "alimonyamount",
                          "childsupport",
                          "childsupportamount",
                          "earned",
                          "earnedamount",
                          "ga",
                          "gaamount",
                          "incomefromanysource",
                          "othersource",
                          "othersourceamount",
                          "othersourceidentify",
                          "pension",
                          "pensionamount",
                          "privatedisability",
                          "privatedisabilityamount",
                          "socsecretirement",
                          "socsecretirementamount",
                          "ssdi",
                          "ssdiamount",
                          "ssi",
                          "ssiamount",
                          "tanf",
                          "tanfamount",
                          "totalmonthlyincome",
                          "unemployment",
                          "unemploymentamount",
                          "vadisabilitynonservice",
                          "vadisabilitynonserviceamount",
                          "vadisabilityservice",
                          "vadisabilityserviceamount",
                          "workerscomp",
                          "workerscompamount",
                          "dataCollectionStage",
                          "informationDate",
                          "dateCreated",
                          "dateUpdated"
                        ],
                        "properties": {
                          "incomeAndSourceId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "alimony": {
                            "type": "integer"
                          },
                          "alimonyamount": {
                            "type": "number"
                          },
                          "childsupport": {
                            "type": "integer"
                          },
                          "childsupportamount": {
                            "type": "number"
                          },
                          "earned": {
                            "type": "integer"
                          },
                          "earnedamount": {
                            "type": "number"
                          },
                          "ga": {
                            "type": "integer"
                          },
                          "gaamount": {
                            "type": "number"
                          },
                          "incomefromanysource": {
                            "type": "integer"
                          },
                          "othersource": {
                            "type": "integer"
                          },
                          "othersourceamount": {
                            "type": "number"
                          },
                          "othersourceidentify": {
                            "type": "string",
                          },
                          "pension": {
                            "type": "integer"
                          },
                          "pensionamount": {
                            "type": "number"
                          },
                          "privatedisability": {
                            "type": "integer"
                          },
                          "privatedisabilityamount": {
                            "type": "number"
                          },
                          "socsecretirement": {
                            "type": "integer"
                          },
                          "socsecretirementamount": {
                            "type": "number"
                          },
                          "ssdi": {
                            "type": "integer"
                          },
                          "ssdiamount": {
                            "type": "number"
                          },
                          "ssi": {
                            "type": "integer"
                          },
                          "ssiamount": {
                            "type": "number"
                          },
                          "tanf": {
                            "type": "integer"
                          },
                          "tanfamount": {
                            "type": "number"
                          },
                          "totalmonthlyincome": {
                            "type": "number"
                          },
                          "unemployment": {
                            "type": "integer"
                          },
                          "unemploymentamount": {
                            "type": "number"
                          },
                          "vadisabilitynonservice": {
                            "type": "integer"
                          },
                          "vadisabilitynonserviceamount": {
                            "type": "number"
                          },
                          "vadisabilityservice": {
                            "type": "integer"
                          },
                          "vadisabilityserviceamount": {
                            "type": "number"
                          },
                          "workerscomp": {
                            "type": "integer"
                          },
                          "workerscompamount": {
                            "type": "number"
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dateCreated": {
                            "type": "string",
                            "format": "MM-dd-YYYY HH:mm",
                          },
                          "dateUpdated": {
                            "type": "string",
                            "format": "MM-dd-YYYY HH:mm",
                          }
                        }
                      }
                    }
                  }
                example:
                  incomeAndSource:
                    incomeAndSourceId: 07577bdf-d44d-4a2f-b0f5-952098158242
                    alimony: 0
                    alimonyamount: 0.683
                    childsupport: 0
                    childsupportamount: 0.375
                    earned: 0
                    earnedamount: 0.974
                    ga: 0
                    gaamount: 0.638
                    incomefromanysource: 0
                    othersource: 0
                    othersourceamount: 0.867
                    othersourceidentify: TestData
                    pension: 0
                    pensionamount: 0.375
                    privatedisability: 0
                    privatedisabilityamount: 0.966
                    socsecretirement: 0
                    socsecretirementamount: 0.635
                    ssdi: 0
                    ssdiamount: 0.429
                    ssi: 0
                    ssiamount: 0.33
                    tanf: 0
                    tanfamount: 0.361
                    totalmonthlyincome: 0.273
                    unemployment: 0
                    unemploymentamount: 0.584
                    vadisabilitynonservice: 0
                    vadisabilitynonserviceamount: 0.816
                    vadisabilityservice: 0
                    vadisabilityserviceamount: 0.148
                    workerscomp: 0
                    workerscompamount: 0.144
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
                    dateCreated: '04-11-2016 10:32'
                    dateUpdated: '04-11-2016 10:32'
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found â€“ There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a incomeandsource
      operationId: POST_clients-clientid-enrollments-enrollmentid-incomeandsources
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "incomeAndSource"
                  ],
                  "properties": {
                    "incomeAndSource": {
                      "type": "object",
                      "required": [
                        "alimony",
                        "alimonyamount",
                        "childsupport",
                        "childsupportamount",
                        "earned",
                        "earnedamount",
                        "ga",
                        "gaamount",
                        "incomefromanysource",
                        "othersource",
                        "othersourceamount",
                        "othersourceidentify",
                        "pension",
                        "pensionamount",
                        "privatedisability",
                        "privatedisabilityamount",
                        "socsecretirement",
                        "socsecretirementamount",
                        "ssdi",
                        "ssdiamount",
                        "ssi",
                        "ssiamount",
                        "tanf",
                        "tanfamount",
                        "totalmonthlyincome",
                        "unemployment",
                        "unemploymentamount",
                        "vadisabilitynonservice",
                        "vadisabilitynonserviceamount",
                        "vadisabilityservice",
                        "vadisabilityserviceamount",
                        "workerscomp",
                        "workerscompamount",
                        "dataCollectionStage",
                        "informationDate"
                      ],
                      "properties": {
                        "alimony": {
                          "type": "integer"
                        },
                        "alimonyamount": {
                          "type": "number"
                        },
                        "childsupport": {
                          "type": "integer"
                        },
                        "childsupportamount": {
                          "type": "number"
                        },
                        "earned": {
                          "type": "integer"
                        },
                        "earnedamount": {
                          "type": "number"
                        },
                        "ga": {
                          "type": "integer"
                        },
                        "gaamount": {
                          "type": "number"
                        },
                        "incomefromanysource": {
                          "type": "integer"
                        },
                        "othersource": {
                          "type": "integer"
                        },
                        "othersourceamount": {
                          "type": "number"
                        },
                        "othersourceidentify": {
                          "type": "string",
                        },
                        "pension": {
                          "type": "integer"
                        },
                        "pensionamount": {
                          "type": "number"
                        },
                        "privatedisability": {
                          "type": "integer"
                        },
                        "privatedisabilityamount": {
                          "type": "number"
                        },
                        "socsecretirement": {
                          "type": "integer"
                        },
                        "socsecretirementamount": {
                          "type": "number"
                        },
                        "ssdi": {
                          "type": "integer"
                        },
                        "ssdiamount": {
                          "type": "number"
                        },
                        "ssi": {
                          "type": "integer"
                        },
                        "ssiamount": {
                          "type": "number"
                        },
                        "tanf": {
                          "type": "integer"
                        },
                        "tanfamount": {
                          "type": "number"
                        },
                        "totalmonthlyincome": {
                          "type": "number"
                        },
                        "unemployment": {
                          "type": "integer"
                        },
                        "unemploymentamount": {
                          "type": "number"
                        },
                        "vadisabilitynonservice": {
                          "type": "integer"
                        },
                        "vadisabilitynonserviceamount": {
                          "type": "number"
                        },
                        "vadisabilityservice": {
                          "type": "integer"
                        },
                        "vadisabilityserviceamount": {
                          "type": "number"
                        },
                        "workerscomp": {
                          "type": "integer"
                        },
                        "workerscompamount": {
                          "type": "number"
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
              example:
                  incomeAndSource:
                    alimony: 0
                    alimonyamount: 0.68303245
                    childsupport: 0
                    childsupportamount: 0.37502742
                    earned: 0
                    earnedamount: 0.9737119
                    ga: 0
                    gaamount: 0.63814074
                    incomefromanysource: 0
                    othersource: 0
                    othersourceamount: 0.8665285
                    othersourceidentify: TestData
                    pension: 0
                    pensionamount: 0.37544388
                    privatedisability: 0
                    privatedisabilityamount: 0.96586764
                    socsecretirement: 0
                    socsecretirementamount: 0.63478535
                    ssdi: 0
                    ssdiamount: 0.42890108
                    ssi: 0
                    ssiamount: 0.32970047
                    tanf: 0
                    tanfamount: 0.36064345
                    totalmonthlyincome: 0.2729566
                    unemployment: 0
                    unemploymentamount: 0.58434963
                    vadisabilitynonservice: 0
                    vadisabilitynonserviceamount: 0.81583244
                    vadisabilityservice: 0
                    vadisabilityserviceamount: 0.1477319
                    workerscomp: 0
                    workerscompamount: 0.14441723
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/incomeandsources/{incomeandsourceid}':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "incomeAndSource"
                    ],
                    "properties": {
                      "incomeAndSource": {
                        "type": "object",
                        "required": [
                          "links",
                          "incomeAndSourceId",
                          "alimony",
                          "alimonyamount",
                          "childsupport",
                          "childsupportamount",
                          "earned",
                          "earnedamount",
                          "ga",
                          "gaamount",
                          "incomefromanysource",
                          "othersource",
                          "othersourceamount",
                          "othersourceidentify",
                          "pension",
                          "pensionamount",
                          "privatedisability",
                          "privatedisabilityamount",
                          "socsecretirement",
                          "socsecretirementamount",
                          "ssdi",
                          "ssdiamount",
                          "ssi",
                          "ssiamount",
                          "tanf",
                          "tanfamount",
                          "totalmonthlyincome",
                          "unemployment",
                          "unemploymentamount",
                          "vadisabilitynonservice",
                          "vadisabilitynonserviceamount",
                          "vadisabilityservice",
                          "vadisabilityserviceamount",
                          "workerscomp",
                          "workerscompamount",
                          "dataCollectionStage",
                          "informationDate",
                          "dateCreated",
                          "dateUpdated"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "incomeAndSourceId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "alimony": {
                            "type": "integer"
                          },
                          "alimonyamount": {
                            "type": "number"
                          },
                          "childsupport": {
                            "type": "integer"
                          },
                          "childsupportamount": {
                            "type": "number"
                          },
                          "earned": {
                            "type": "integer"
                          },
                          "earnedamount": {
                            "type": "number"
                          },
                          "ga": {
                            "type": "integer"
                          },
                          "gaamount": {
                            "type": "number"
                          },
                          "incomefromanysource": {
                            "type": "integer"
                          },
                          "othersource": {
                            "type": "integer"
                          },
                          "othersourceamount": {
                            "type": "number"
                          },
                          "othersourceidentify": {
                            "type": "string",
                          },
                          "pension": {
                            "type": "integer"
                          },
                          "pensionamount": {
                            "type": "number"
                          },
                          "privatedisability": {
                            "type": "integer"
                          },
                          "privatedisabilityamount": {
                            "type": "number"
                          },
                          "socsecretirement": {
                            "type": "integer"
                          },
                          "socsecretirementamount": {
                            "type": "number"
                          },
                          "ssdi": {
                            "type": "integer"
                          },
                          "ssdiamount": {
                            "type": "number"
                          },
                          "ssi": {
                            "type": "integer"
                          },
                          "ssiamount": {
                            "type": "number"
                          },
                          "tanf": {
                            "type": "integer"
                          },
                          "tanfamount": {
                            "type": "number"
                          },
                          "totalmonthlyincome": {
                            "type": "number"
                          },
                          "unemployment": {
                            "type": "integer"
                          },
                          "unemploymentamount": {
                            "type": "number"
                          },
                          "vadisabilitynonservice": {
                            "type": "integer"
                          },
                          "vadisabilitynonserviceamount": {
                            "type": "number"
                          },
                          "vadisabilityservice": {
                            "type": "integer"
                          },
                          "vadisabilityserviceamount": {
                            "type": "number"
                          },
                          "workerscomp": {
                            "type": "integer"
                          },
                          "workerscompamount": {
                            "type": "number"
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dateCreated": {
                            "type": "string",
                            "format": "MM-dd-YYYY HH:mm",
                          },
                          "dateUpdated": {
                            "type": "string",
                            "format": "MM-dd-YYYY HH:mm",
                          }
                        }
                      }
                    }
                  }
                example:
                    incomeAndSource:
                        links:
                        - rel: history
                          href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/incomeandsources/07577bdf-d44d-4a2f-b0f5-952098158242/history"
                        incomeAndSourceId: 07577bdf-d44d-4a2f-b0f5-952098158242
                        alimony: 0
                        alimonyamount: 0.683
                        childsupport: 0
                        childsupportamount: 0.375
                        earned: 0
                        earnedamount: 0.974
                        ga: 0
                        gaamount: 0.638
                        incomefromanysource: 0
                        othersource: 0
                        othersourceamount: 0.867
                        othersourceidentify: TestData
                        pension: 0
                        pensionamount: 0.375
                        privatedisability: 0
                        privatedisabilityamount: 0.966
                        socsecretirement: 0
                        socsecretirementamount: 0.635
                        ssdi: 0
                        ssdiamount: 0.429
                        ssi: 0
                        ssiamount: 0.33
                        tanf: 0
                        tanfamount: 0.361
                        totalmonthlyincome: 0.273
                        unemployment: 0
                        unemploymentamount: 0.584
                        vadisabilitynonservice: 0
                        vadisabilitynonserviceamount: 0.816
                        vadisabilityservice: 0
                        vadisabilityserviceamount: 0.148
                        workerscomp: 0
                        workerscompamount: 0.144
                        dataCollectionStage: 1
                        informationDate: 03-17-2016
                        dateCreated: '04-11-2016 10:32'
                        dateUpdated: '04-11-2016 10:32'
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires an user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a incomeandsource using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-incomeandsources-incomeandsourceid
    put:
      responses:
        '200':
          description: OK â€“ Everything is working.
        '304':
          description: Not Modified â€“ The client can use cached data.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires a user.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific incomeandsource specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-incomeandsources-incomeandsourceid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "incomeAndSource"
                  ],
                  "properties": {
                    "incomeAndSource": {
                      "type": "object",
                      "required": [
                        "alimony",
                        "alimonyamount",
                        "childsupport",
                        "childsupportamount",
                        "earned",
                        "earnedamount",
                        "ga",
                        "gaamount",
                        "incomefromanysource",
                        "othersource",
                        "othersourceamount",
                        "othersourceidentify",
                        "pension",
                        "pensionamount",
                        "privatedisability",
                        "privatedisabilityamount",
                        "socsecretirement",
                        "socsecretirementamount",
                        "ssdi",
                        "ssdiamount",
                        "ssi",
                        "ssiamount",
                        "tanf",
                        "tanfamount",
                        "totalmonthlyincome",
                        "unemployment",
                        "unemploymentamount",
                        "vadisabilitynonservice",
                        "vadisabilitynonserviceamount",
                        "vadisabilityservice",
                        "vadisabilityserviceamount",
                        "workerscomp",
                        "workerscompamount",
                        "dataCollectionStage",
                        "informationDate"
                      ],
                      "properties": {
                        "alimony": {
                          "type": "integer"
                        },
                        "alimonyamount": {
                          "type": "number"
                        },
                        "childsupport": {
                          "type": "integer"
                        },
                        "childsupportamount": {
                          "type": "number"
                        },
                        "earned": {
                          "type": "integer"
                        },
                        "earnedamount": {
                          "type": "number"
                        },
                        "ga": {
                          "type": "integer"
                        },
                        "gaamount": {
                          "type": "number"
                        },
                        "incomefromanysource": {
                          "type": "integer"
                        },
                        "othersource": {
                          "type": "integer"
                        },
                        "othersourceamount": {
                          "type": "number"
                        },
                        "othersourceidentify": {
                          "type": "string",
                        },
                        "pension": {
                          "type": "integer"
                        },
                        "pensionamount": {
                          "type": "number"
                        },
                        "privatedisability": {
                          "type": "integer"
                        },
                        "privatedisabilityamount": {
                          "type": "number"
                        },
                        "socsecretirement": {
                          "type": "integer"
                        },
                        "socsecretirementamount": {
                          "type": "number"
                        },
                        "ssdi": {
                          "type": "integer"
                        },
                        "ssdiamount": {
                          "type": "number"
                        },
                        "ssi": {
                          "type": "integer"
                        },
                        "ssiamount": {
                          "type": "number"
                        },
                        "tanf": {
                          "type": "integer"
                        },
                        "tanfamount": {
                          "type": "number"
                        },
                        "totalmonthlyincome": {
                          "type": "number"
                        },
                        "unemployment": {
                          "type": "integer"
                        },
                        "unemploymentamount": {
                          "type": "number"
                        },
                        "vadisabilitynonservice": {
                          "type": "integer"
                        },
                        "vadisabilitynonserviceamount": {
                          "type": "number"
                        },
                        "vadisabilityservice": {
                          "type": "integer"
                        },
                        "vadisabilityserviceamount": {
                          "type": "number"
                        },
                        "workerscomp": {
                          "type": "integer"
                        },
                        "workerscompamount": {
                          "type": "number"
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
              example:
                  incomeAndSource:
                    alimony: 0
                    alimonyamount: 0.68303245
                    childsupport: 0
                    childsupportamount: 0.37502742
                    earned: 0
                    earnedamount: 0.9737119
                    ga: 0
                    gaamount: 0.63814074
                    incomefromanysource: 0
                    othersource: 0
                    othersourceamount: 0.8665285
                    othersourceidentify: TestData
                    pension: 0
                    pensionamount: 0.37544388
                    privatedisability: 0
                    privatedisabilityamount: 0.96586764
                    socsecretirement: 0
                    socsecretirementamount: 0.63478535
                    ssdi: 0
                    ssdiamount: 0.42890108
                    ssi: 0
                    ssiamount: 0.32970047
                    tanf: 0
                    tanfamount: 0.36064345
                    totalmonthlyincome: 0.2729566
                    unemployment: 0
                    unemploymentamount: 0.58434963
                    vadisabilitynonservice: 0
                    vadisabilitynonserviceamount: 0.81583244
                    vadisabilityservice: 0
                    vadisabilityserviceamount: 0.1477319
                    workerscomp: 0
                    workerscompamount: 0.14441723
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        required: true
    delete:
      responses:
        '204':
          description: OK â€“ The resource was successfully deleted.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific incomeandsource specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-incomeandsources-incomeandsourceid
    parameters:
      - name: incomeandsourceid
        in: path
        required: true
        schema:
          type: string
        description: Incomeandsource Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/incomeandsources/{incomeandsourceid}/history':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "IncomeAndSources"
                    ],
                    "properties": {
                      "IncomeAndSources": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "incomeAndSources"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "incomeAndSources": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "incomeAndSourceId",
                                "alimony",
                                "alimonyamount",
                                "childsupport",
                                "childsupportamount",
                                "earned",
                                "earnedamount",
                                "ga",
                                "gaamount",
                                "incomefromanysource",
                                "othersource",
                                "othersourceamount",
                                "othersourceidentify",
                                "pension",
                                "pensionamount",
                                "privatedisability",
                                "privatedisabilityamount",
                                "socsecretirement",
                                "socsecretirementamount",
                                "ssdi",
                                "ssdiamount",
                                "ssi",
                                "ssiamount",
                                "tanf",
                                "tanfamount",
                                "totalmonthlyincome",
                                "unemployment",
                                "unemploymentamount",
                                "vadisabilitynonservice",
                                "vadisabilitynonserviceamount",
                                "vadisabilityservice",
                                "vadisabilityserviceamount",
                                "workerscomp",
                                "workerscompamount",
                                "dataCollectionStage",
                                "informationDate",
                                "dateCreated"
                              ],
                              "properties": {
                                "incomeAndSourceId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "alimony": {
                                  "type": "integer"
                                },
                                "alimonyamount": {
                                  "type": "number"
                                },
                                "childsupport": {
                                  "type": "integer"
                                },
                                "childsupportamount": {
                                  "type": "number"
                                },
                                "earned": {
                                  "type": "integer"
                                },
                                "earnedamount": {
                                  "type": "number"
                                },
                                "ga": {
                                  "type": "integer"
                                },
                                "gaamount": {
                                  "type": "number"
                                },
                                "incomefromanysource": {
                                  "type": "integer"
                                },
                                "othersource": {
                                  "type": "integer"
                                },
                                "othersourceamount": {
                                  "type": "number"
                                },
                                "othersourceidentify": {
                                  "type": "string",
                                },
                                "pension": {
                                  "type": "integer"
                                },
                                "pensionamount": {
                                  "type": "number"
                                },
                                "privatedisability": {
                                  "type": "integer"
                                },
                                "privatedisabilityamount": {
                                  "type": "number"
                                },
                                "socsecretirement": {
                                  "type": "integer"
                                },
                                "socsecretirementamount": {
                                  "type": "number"
                                },
                                "ssdi": {
                                  "type": "integer"
                                },
                                "ssdiamount": {
                                  "type": "number"
                                },
                                "ssi": {
                                  "type": "integer"
                                },
                                "ssiamount": {
                                  "type": "number"
                                },
                                "tanf": {
                                  "type": "integer"
                                },
                                "tanfamount": {
                                  "type": "number"
                                },
                                "totalmonthlyincome": {
                                  "type": "number"
                                },
                                "unemployment": {
                                  "type": "integer"
                                },
                                "unemploymentamount": {
                                  "type": "number"
                                },
                                "vadisabilitynonservice": {
                                  "type": "integer"
                                },
                                "vadisabilitynonserviceamount": {
                                  "type": "number"
                                },
                                "vadisabilityservice": {
                                  "type": "integer"
                                },
                                "vadisabilityserviceamount": {
                                  "type": "number"
                                },
                                "workerscomp": {
                                  "type": "integer"
                                },
                                "workerscompamount": {
                                  "type": "number"
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                },
                                "dateCreated": {
                                  "type": "string",
                                  "format": "MM-dd-YYYY HH:mm",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    IncomeAndSources:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      incomeAndSources:
                        - incomeAndSourceId: 07577bdf-d44d-4a2f-b0f5-952098158242
                          alimony: 0
                          alimonyamount: 0.683
                          childsupport: 0
                          childsupportamount: 0.375
                          earned: 0
                          earnedamount: 0.974
                          ga: 0
                          gaamount: 0.638
                          incomefromanysource: 0
                          othersource: 0
                          othersourceamount: 0.867
                          othersourceidentify: TestData
                          pension: 0
                          pensionamount: 0.375
                          privatedisability: 0
                          privatedisabilityamount: 0.966
                          socsecretirement: 0
                          socsecretirementamount: 0.635
                          ssdi: 0
                          ssdiamount: 0.429
                          ssi: 0
                          ssiamount: 0.33
                          tanf: 0
                          tanfamount: 0.361
                          totalmonthlyincome: 0.273
                          unemployment: 0
                          unemploymentamount: 0.584
                          vadisabilitynonservice: 0
                          vadisabilitynonserviceamount: 0.816
                          vadisabilityservice: 0
                          vadisabilityserviceamount: 0.148
                          workerscomp: 0
                          workerscompamount: 0.144
                          dataCollectionStage: 1
                          informationDate: 03-17-2016
                          dateCreated: '04-11-2016 10:32'
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for incomeandsource history.  Returns a list of incomeandsource ids history,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-incomeandsources-incomeandsourceid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: incomeandsourceid
        in: path
        required: true
        schema:
          type: string
        description: Incomeandsource Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/medicalassistances':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "medicalassistances"
                    ],
                    "properties": {
                      "medicalassistances": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "medicalassistances"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "medicalassistances": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "medicalassistanceId",
                                "hivaidsassistance",
                                "nohivaidsassistancereason",
                                "adap",
                                "noadapreason",
                                "dataCollectionStage",
                                "informationDate"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "medicalassistanceId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "hivaidsassistance": {
                                  "type": "integer"
                                },
                                "nohivaidsassistancereason": {
                                  "type": "integer"
                                },
                                "adap": {
                                  "type": "integer"
                                },
                                "noadapreason": {
                                  "type": "integer"
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    medicalassistances:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      medicalassistances:
                        - links:
                          - rel: history
                            href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/medicalassistances/17125891-0fa3-4680-9093-fc866cf2f838/history"
                          medicalassistanceId: 17125891-0fa3-4680-9093-fc866cf2f838
                          hivaidsassistance: 9
                          nohivaidsassistancereason: 3
                          adap: 0
                          noadapreason: 2
                          dataCollectionStage: 1
                          informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for medicalassistance.  Returns a list of medicalassistance
        ids, based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-medicalassistances
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "medicalassistance"
                    ],
                    "properties": {
                      "medicalassistance": {
                        "type": "object",
                        "required": [
                          "medicalassistanceId",
                          "hivaidsassistance",
                          "nohivaidsassistancereason",
                          "adap",
                          "noadapreason",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "medicalassistanceId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "hivaidsassistance": {
                            "type": "integer"
                          },
                          "nohivaidsassistancereason": {
                            "type": "integer"
                          },
                          "adap": {
                            "type": "integer"
                          },
                          "noadapreason": {
                            "type": "integer"
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                  medicalassistance:
                    medicalassistanceId: 7bad6629-48da-49b2-aebe-3ff449ee5b91
                    hivaidsassistance: 9
                    nohivaidsassistancereason: 3
                    adap: 0
                    noadapreason: 2
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found â€“ There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a medicalassistance
      operationId: POST_clients-clientid-enrollments-enrollmentid-medicalassistances
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "medicalassistance"
                  ],
                  "properties": {
                    "medicalassistance": {
                      "type": "object",
                      "required": [
                        "adap",
                        "informationDate",
                        "hivaidsassistance",
                        "nohivaidsassistancereason",
                        "noadapreason",
                        "dataCollectionStage"
                      ],
                      "properties": {
                        "adap": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "hivaidsassistance": {
                          "type": "integer"
                        },
                        "nohivaidsassistancereason": {
                          "type": "integer"
                        },
                        "noadapreason": {
                          "type": "integer"
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  medicalassistance:
                    adap: 0
                    informationDate: 03-17-2016
                    hivaidsassistance: 9
                    nohivaidsassistancereason: 3
                    noadapreason: 2
                    dataCollectionStage: 1
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/medicalassistances/{medicalassistanceid}':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "medicalassistance"
                    ],
                    "properties": {
                      "medicalassistance": {
                        "type": "object",
                        "required": [
                          "links",
                          "medicalassistanceId",
                          "hivaidsassistance",
                          "nohivaidsassistancereason",
                          "adap",
                          "noadapreason",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "medicalassistanceId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "hivaidsassistance": {
                            "type": "integer"
                          },
                          "nohivaidsassistancereason": {
                            "type": "integer"
                          },
                          "adap": {
                            "type": "integer"
                          },
                          "noadapreason": {
                            "type": "integer"
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                    medicalassistance:
                        links:
                        - rel: history
                          href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/medicalassistances/7bad6629-48da-49b2-aebe-3ff449ee5b91/history"
                        medicalassistanceId: 7bad6629-48da-49b2-aebe-3ff449ee5b91
                        hivaidsassistance: 9
                        nohivaidsassistancereason: 3
                        adap: 0
                        noadapreason: 2
                        dataCollectionStage: 1
                        informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires an user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a medicalassistance using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-medicalassistances-medicalassistanceid
    put:
      responses:
        '200':
          description: OK â€“ Everything is working.
        '304':
          description: Not Modified â€“ The client can use cached data.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires a user.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific medicalassistance specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-medicalassistances-medicalassistanceid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "medicalassistance"
                  ],
                  "properties": {
                    "medicalassistance": {
                      "type": "object",
                      "required": [
                        "adap",
                        "informationDate",
                        "hivaidsassistance",
                        "nohivaidsassistancereason",
                        "noadapreason",
                        "dataCollectionStage"
                      ],
                      "properties": {
                        "adap": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "hivaidsassistance": {
                          "type": "integer"
                        },
                        "nohivaidsassistancereason": {
                          "type": "integer"
                        },
                        "noadapreason": {
                          "type": "integer"
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  medicalassistance:
                    adap: 0
                    informationDate: 03-17-2016
                    hivaidsassistance: 9
                    nohivaidsassistancereason: 3
                    noadapreason: 2
                    dataCollectionStage: 1
        required: true
    delete:
      responses:
        '204':
          description: OK â€“ The resource was successfully deleted.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific medicalassistance specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-medicalassistances-medicalassistanceid
    parameters:
      - name: medicalassistanceid
        in: path
        required: true
        schema:
          type: string
        description: Medicalassistance Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/medicalassistances/{medicalassistanceid}/history':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "medicalassistances"
                    ],
                    "properties": {
                      "medicalassistances": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "medicalassistances"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "medicalassistances": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "medicalassistanceId",
                                "hivaidsassistance",
                                "nohivaidsassistancereason",
                                "adap",
                                "noadapreason",
                                "dataCollectionStage",
                                "informationDate"
                              ],
                              "properties": {
                                "medicalassistanceId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "hivaidsassistance": {
                                  "type": "integer"
                                },
                                "nohivaidsassistancereason": {
                                  "type": "integer"
                                },
                                "adap": {
                                  "type": "integer"
                                },
                                "noadapreason": {
                                  "type": "integer"
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    medicalassistances:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      medicalassistances:
                        - medicalassistanceId: 17125891-0fa3-4680-9093-fc866cf2f838
                          hivaidsassistance: 9
                          nohivaidsassistancereason: 3
                          adap: 0
                          noadapreason: 2
                          dataCollectionStage: 1
                          informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for medicalassistance history.  Returns a list of medicalassistance
        ids history, based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-medicalassistances-medicalassistanceid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: medicalassistanceid
        in: path
        required: true
        schema:
          type: string
        description: Medicalassistance Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/noncashbenefits':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "noncashbenefitsList"
                    ],
                    "properties": {
                      "noncashbenefitsList": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "noncashbenefitsList"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "noncashbenefitsList": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "noncashbenefitsID",
                                "benefitsfromanysource",
                                "othersource",
                                "othersourceidentify",
                                "othertanf",
                                "rentalassistanceongoing",
                                "rentalassistancetemp",
                                "snap",
                                "tanfchildcare",
                                "tanftransportation",
                                "wic",
                                "dataCollectionStage",
                                "informationDate"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "noncashbenefitsID": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "benefitsfromanysource": {
                                  "type": "integer"
                                },
                                "othersource": {
                                  "type": "integer"
                                },
                                "othersourceidentify": {
                                  "type": "string",
                                },
                                "othertanf": {
                                  "type": "integer"
                                },
                                "rentalassistanceongoing": {
                                  "type": "integer"
                                },
                                "rentalassistancetemp": {
                                  "type": "integer"
                                },
                                "snap": {
                                  "type": "integer"
                                },
                                "tanfchildcare": {
                                  "type": "integer"
                                },
                                "tanftransportation": {
                                  "type": "integer"
                                },
                                "wic": {
                                  "type": "integer"
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    noncashbenefitsList:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      noncashbenefitsList:
                        - links:
                          - rel: history
                            href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/noncashbenefits/80dfa67e-bf60-4227-822f-6d3850d9c5e5/history"
                          noncashbenefitsID: 80dfa67e-bf60-4227-822f-6d3850d9c5e5
                          benefitsfromanysource: 0
                          othersource: 99
                          othersourceidentify: test
                          othertanf: 0
                          rentalassistanceongoing: 0
                          rentalassistancetemp: 0
                          snap: 0
                          tanfchildcare: 0
                          tanftransportation: 0
                          wic: 0
                          dataCollectionStage: 1
                          informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for noncashbenefit.  Returns a list of noncashbenefit ids,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-noncashbenefits
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "noncashbenefits"
                    ],
                    "properties": {
                      "noncashbenefits": {
                        "type": "object",
                        "required": [
                          "noncashbenefitsID",
                          "benefitsfromanysource",
                          "othersource",
                          "othertanf",
                          "rentalassistanceongoing",
                          "rentalassistancetemp",
                          "snap",
                          "tanfchildcare",
                          "tanftransportation",
                          "wic",
                          "othersourceidentify",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "noncashbenefitsID": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "benefitsfromanysource": {
                            "type": "integer"
                          },
                          "othersource": {
                            "type": "integer"
                          },
                          "othertanf": {
                            "type": "integer"
                          },
                          "rentalassistanceongoing": {
                            "type": "integer"
                          },
                          "rentalassistancetemp": {
                            "type": "integer"
                          },
                          "snap": {
                            "type": "integer"
                          },
                          "tanfchildcare": {
                            "type": "integer"
                          },
                          "tanftransportation": {
                            "type": "integer"
                          },
                          "wic": {
                            "type": "integer"
                          },
                          "othersourceidentify": {
                            "type": "string",
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                  noncashbenefits:
                    noncashbenefitsID: 520f2a27-e92d-4dc2-946f-54bcdd334114
                    benefitsfromanysource: 0
                    othersource: 0
                    othertanf: 0
                    rentalassistanceongoing: 0
                    rentalassistancetemp: 0
                    snap: 0
                    tanfchildcare: 0
                    tanftransportation: 0
                    wic: 0
                    othersourceidentify: test
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found â€“ There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a noncashbenefit
      operationId: POST_clients-clientid-enrollments-enrollmentid-noncashbenefits
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "noncashbenefits"
                  ],
                  "properties": {
                    "noncashbenefits": {
                      "type": "object",
                      "required": [
                        "benefitsfromanysource",
                        "othersource",
                        "othertanf",
                        "rentalassistanceongoing",
                        "rentalassistancetemp",
                        "snap",
                        "tanfchildcare",
                        "tanftransportation",
                        "wic",
                        "othersourceidentify",
                        "dataCollectionStage",
                        "informationDate"
                      ],
                      "properties": {
                        "benefitsfromanysource": {
                          "type": "integer"
                        },
                        "othersource": {
                          "type": "integer"
                        },
                        "othertanf": {
                          "type": "integer"
                        },
                        "rentalassistanceongoing": {
                          "type": "integer"
                        },
                        "rentalassistancetemp": {
                          "type": "integer"
                        },
                        "snap": {
                          "type": "integer"
                        },
                        "tanfchildcare": {
                          "type": "integer"
                        },
                        "tanftransportation": {
                          "type": "integer"
                        },
                        "wic": {
                          "type": "integer"
                        },
                        "othersourceidentify": {
                          "type": "string",
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
              example:
                  noncashbenefits:
                    benefitsfromanysource: 0
                    othersource: 99
                    othertanf: 0
                    rentalassistanceongoing: 0
                    rentalassistancetemp: 0
                    snap: 0
                    tanfchildcare: 0
                    tanftransportation: 0
                    wic: 0
                    othersourceidentify: test
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/noncashbenefits/{noncashbenefitid}':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "noncashbenefits"
                    ],
                    "properties": {
                      "noncashbenefits": {
                        "type": "object",
                        "required": [
                          "links",
                          "noncashbenefitsID",
                          "benefitsfromanysource",
                          "othersource",
                          "othertanf",
                          "rentalassistanceongoing",
                          "rentalassistancetemp",
                          "snap",
                          "tanfchildcare",
                          "tanftransportation",
                          "wic",
                          "othersourceidentify",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "noncashbenefitsID": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "benefitsfromanysource": {
                            "type": "integer"
                          },
                          "othersource": {
                            "type": "integer"
                          },
                          "othertanf": {
                            "type": "integer"
                          },
                          "rentalassistanceongoing": {
                            "type": "integer"
                          },
                          "rentalassistancetemp": {
                            "type": "integer"
                          },
                          "snap": {
                            "type": "integer"
                          },
                          "tanfchildcare": {
                            "type": "integer"
                          },
                          "tanftransportation": {
                            "type": "integer"
                          },
                          "wic": {
                            "type": "integer"
                          },
                          "othersourceidentify": {
                            "type": "string",
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                    noncashbenefits:
                        links:
                        - rel: history
                          href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/noncashbenefits/520f2a27-e92d-4dc2-946f-54bcdd334114/history"
                        noncashbenefitsID: 520f2a27-e92d-4dc2-946f-54bcdd334114
                        benefitsfromanysource: 0
                        othersource: 0
                        othertanf: 0
                        rentalassistanceongoing: 0
                        rentalassistancetemp: 0
                        snap: 0
                        tanfchildcare: 0
                        tanftransportation: 0
                        wic: 0
                        othersourceidentify: test
                        dataCollectionStage: 1
                        informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires an user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a noncashbenefit using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-noncashbenefits-noncashbenefitid
    put:
      responses:
        '200':
          description: OK â€“ Everything is working.
        '304':
          description: Not Modified â€“ The client can use cached data.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires a user.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific noncashbenefit specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-noncashbenefits-noncashbenefitid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "noncashbenefits"
                  ],
                  "properties": {
                    "noncashbenefits": {
                      "type": "object",
                      "required": [
                        "benefitsfromanysource",
                        "othersource",
                        "othertanf",
                        "rentalassistanceongoing",
                        "rentalassistancetemp",
                        "snap",
                        "tanfchildcare",
                        "tanftransportation",
                        "wic",
                        "othersourceidentify",
                        "dataCollectionStage",
                        "informationDate"
                      ],
                      "properties": {
                        "benefitsfromanysource": {
                          "type": "integer"
                        },
                        "othersource": {
                          "type": "integer"
                        },
                        "othertanf": {
                          "type": "integer"
                        },
                        "rentalassistanceongoing": {
                          "type": "integer"
                        },
                        "rentalassistancetemp": {
                          "type": "integer"
                        },
                        "snap": {
                          "type": "integer"
                        },
                        "tanfchildcare": {
                          "type": "integer"
                        },
                        "tanftransportation": {
                          "type": "integer"
                        },
                        "wic": {
                          "type": "integer"
                        },
                        "othersourceidentify": {
                          "type": "string",
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
              example:
                  noncashbenefits:
                    benefitsfromanysource: 0
                    othersource: 99
                    othertanf: 0
                    rentalassistanceongoing: 0
                    rentalassistancetemp: 0
                    snap: 0
                    tanfchildcare: 0
                    tanftransportation: 0
                    wic: 0
                    othersourceidentify: test
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        required: true
    delete:
      responses:
        '204':
          description: OK â€“ The resource was successfully deleted.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific noncashbenefit specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-noncashbenefits-noncashbenefitid
    parameters:
      - name: noncashbenefitid
        in: path
        required: true
        schema:
          type: string
        description: Noncashbenefit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/noncashbenefits/{noncashbenefitid}/history':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "noncashbenefitsList"
                    ],
                    "properties": {
                      "noncashbenefitsList": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "noncashbenefitsList"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "noncashbenefitsList": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "noncashbenefitsID",
                                "benefitsfromanysource",
                                "othersource",
                                "othersourceidentify",
                                "othertanf",
                                "rentalassistanceongoing",
                                "rentalassistancetemp",
                                "snap",
                                "tanfchildcare",
                                "tanftransportation",
                                "wic",
                                "dataCollectionStage",
                                "informationDate"
                              ],
                              "properties": {
                                "noncashbenefitsID": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "benefitsfromanysource": {
                                  "type": "integer"
                                },
                                "othersource": {
                                  "type": "integer"
                                },
                                "othersourceidentify": {
                                  "type": "string",
                                },
                                "othertanf": {
                                  "type": "integer"
                                },
                                "rentalassistanceongoing": {
                                  "type": "integer"
                                },
                                "rentalassistancetemp": {
                                  "type": "integer"
                                },
                                "snap": {
                                  "type": "integer"
                                },
                                "tanfchildcare": {
                                  "type": "integer"
                                },
                                "tanftransportation": {
                                  "type": "integer"
                                },
                                "wic": {
                                  "type": "integer"
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    noncashbenefitsList:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      noncashbenefitsList:
                        - noncashbenefitsID: 80dfa67e-bf60-4227-822f-6d3850d9c5e5
                          benefitsfromanysource: 0
                          othersource: 99
                          othersourceidentify: test
                          othertanf: 0
                          rentalassistanceongoing: 0
                          rentalassistancetemp: 0
                          snap: 0
                          tanfchildcare: 0
                          tanftransportation: 0
                          wic: 0
                          dataCollectionStage: 1
                          informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for noncashbenefit history.  Returns a list of noncashbenefit ids history,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-noncashbenefits-noncashbenefitid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: noncashbenefitid
        in: path
        required: true
        schema:
          type: string
        description: Noncashbenefit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/residentialmoveindates':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "residentialmoveindates"
                    ],
                    "properties": {
                      "residentialmoveindates": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "residentialmoveindates"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "residentialmoveindates": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "residentialmoveindateId",
                                "inpermanenthousing",
                                "residentialmoveindate"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "residentialmoveindateId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "inpermanenthousing": {
                                  "type": "integer"
                                },
                                "residentialmoveindate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    residentialmoveindates:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      residentialmoveindates:
                        - links:
                          - rel: history
                            href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/residentialmoveindates/37775c5e-72ea-4b1d-92ad-91c76decebd1/history"
                          residentialmoveindateId: 37775c5e-72ea-4b1d-92ad-91c76decebd1
                          inpermanenthousing: 0
                          residentialmoveindate: 04-05-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for residentialmoveindate.  Returns a list of
        residentialmoveindate ids, based on the query parameters sent.  The
        query parameters are cumulative, so each additional query parameter
        narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-residentialmoveindates
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "residentialmoveindate"
                    ],
                    "properties": {
                      "residentialmoveindate": {
                        "type": "object",
                        "required": [
                          "residentialmoveindateId",
                          "inpermanenthousing"
                        ],
                        "properties": {
                          "residentialmoveindateId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "inpermanenthousing": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                  residentialmoveindate:
                    residentialmoveindateId: 37775c5e-72ea-4b1d-92ad-91c76decebd1
                    inpermanenthousing: 0
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found â€“ There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a residentialmoveindate
      operationId: POST_clients-clientid-enrollments-enrollmentid-residentialmoveindates
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "residentialmoveindate"
                  ],
                  "properties": {
                    "residentialmoveindate": {
                      "type": "object",
                      "required": [
                        "inpermanenthousing",
                        "residentialmoveindate"
                      ],
                      "properties": {
                        "inpermanenthousing": {
                          "type": "integer"
                        },
                        "residentialmoveindate": {
                          "type": "string",
                          "format": "MM-dd-YYYY HH:mm",
                        }
                      }
                    }
                  }
                }
              example:
                  residentialmoveindate:
                    inpermanenthousing: 0
                    residentialmoveindate: '04-05-2016 11:12'
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/residentialmoveindates/{residentialmoveindateid}':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "residentialmoveindate"
                    ],
                    "properties": {
                      "residentialmoveindate": {
                        "type": "object",
                        "required": [
                          "links",
                          "residentialmoveindateId",
                          "inpermanenthousing"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "residentialmoveindateId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "inpermanenthousing": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                    residentialmoveindate:
                        links:
                        - rel: history
                          href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/residentialmoveindates/37775c5e-72ea-4b1d-92ad-91c76decebd1/history"
                        residentialmoveindateId: 37775c5e-72ea-4b1d-92ad-91c76decebd1
                        inpermanenthousing: 0
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires an user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a residentialmoveindate using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-residentialmoveindates-residentialmoveindateid
    put:
      responses:
        '200':
          description: OK â€“ Everything is working.
        '304':
          description: Not Modified â€“ The client can use cached data.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires a user.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific residentialmoveindate specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-residentialmoveindates-residentialmoveindateid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "residentialmoveindate"
                  ],
                  "properties": {
                    "residentialmoveindate": {
                      "type": "object",
                      "required": [
                        "inpermanenthousing",
                        "residentialmoveindate"
                      ],
                      "properties": {
                        "inpermanenthousing": {
                          "type": "integer"
                        },
                        "residentialmoveindate": {
                          "type": "string",
                          "format": "MM-dd-YYYY HH:mm",
                        }
                      }
                    }
                  }
                }
              example:
                  residentialmoveindate:
                    inpermanenthousing: 0
                    residentialmoveindate: '04-05-2016 11:12'
        required: true
    delete:
      responses:
        '204':
          description: OK â€“ The resource was successfully deleted.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific residentialmoveindate specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-residentialmoveindates-residentialmoveindateid
    parameters:
      - name: residentialmoveindateid
        in: path
        required: true
        schema:
          type: string
        description: Residentialmoveindate Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/residentialmoveindates/{residentialmoveindateid}/history':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "residentialmoveindates"
                    ],
                    "properties": {
                      "residentialmoveindates": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "residentialmoveindates"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "residentialmoveindates": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "residentialmoveindateId",
                                "inpermanenthousing",
                                "residentialmoveindate"
                              ],
                              "properties": {
                                "residentialmoveindateId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "inpermanenthousing": {
                                  "type": "integer"
                                },
                                "residentialmoveindate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    residentialmoveindates:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      residentialmoveindates:
                        - residentialmoveindateId: 37775c5e-72ea-4b1d-92ad-91c76decebd1
                          inpermanenthousing: 0
                          residentialmoveindate: 04-05-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for residentialmoveindate history.  Returns a list of
        residentialmoveindate ids history, based on the query parameters sent.  The
        query parameters are cumulative, so each additional query parameter
        narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-residentialmoveindates-residentialmoveindateid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: residentialmoveindateid
        in: path
        required: true
        schema:
          type: string
        description: Residentialmoveindate Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/pathstatuses':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "pathstatuses"
                    ],
                    "properties": {
                      "pathstatuses": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "pathstatuses"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "pathstatuses": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "pathstatusId",
                                "clientEnrolledInPath",
                                "reasonNotEnrolled",
                                "dateOfStatus"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "pathstatusId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "clientEnrolledInPath": {
                                  "type": "integer"
                                },
                                "reasonNotEnrolled": {
                                  "type": "integer"
                                },
                                "dateOfStatus": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    pathstatuses:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      pathstatuses:
                        - links:
                          - rel: history
                            href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/pathstatuses/5c70ea90-df48-4a5a-8d48-6fee70e3c4ec/history"
                          pathstatusId: 5c70ea90-df48-4a5a-8d48-6fee70e3c4ec
                          clientEnrolledInPath: 123545
                          reasonNotEnrolled: 99
                          dateOfStatus: 04-16-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for pathstatus.  Returns a list of pathstatus ids, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-pathstatuses
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "pathstatus"
                    ],
                    "properties": {
                      "pathstatus": {
                        "type": "object",
                        "required": [
                          "pathstatusId",
                          "clientEnrolledInPath",
                          "reasonNotEnrolled",
                          "dateOfStatus"
                        ],
                        "properties": {
                          "pathstatusId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "clientEnrolledInPath": {
                            "type": "integer"
                          },
                          "reasonNotEnrolled": {
                            "type": "integer"
                          },
                          "dateOfStatus": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                  pathstatus:
                    pathstatusId: 5c70ea90-df48-4a5a-8d48-6fee70e3c4ec
                    clientEnrolledInPath: 123545
                    reasonNotEnrolled: 99
                    dateOfStatus: 04-16-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found â€“ There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a pathstatus
      operationId: POST_clients-clientid-enrollments-enrollmentid-pathstatuses
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "pathstatus"
                  ],
                  "properties": {
                    "pathstatus": {
                      "type": "object",
                      "required": [
                        "clientenrolledinpath",
                        "dateOfStatus",
                        "clientEnrolledInPath",
                        "reasonNotEnrolled"
                      ],
                      "properties": {
                        "clientenrolledinpath": {
                          "type": "integer"
                        },
                        "dateOfStatus": {
                          "type": "string",
                          "format": "MM-dd-YYYY HH:mm",
                        },
                        "clientEnrolledInPath": {
                          "type": "integer"
                        },
                        "reasonNotEnrolled": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  pathstatus:
                    clientenrolledinpath: -170011723306562560
                    dateOfStatus: '04-16-2016 11:11'
                    clientEnrolledInPath: 123545
                    reasonNotEnrolled: 99
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/pathstatuses/{pathstatusid}':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "pathstatus"
                    ],
                    "properties": {
                      "pathstatus": {
                        "type": "object",
                        "required": [
                          "links",
                          "pathstatusId",
                          "clientEnrolledInPath",
                          "reasonNotEnrolled",
                          "dateOfStatus"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "pathstatusId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "clientEnrolledInPath": {
                            "type": "integer"
                          },
                          "reasonNotEnrolled": {
                            "type": "integer"
                          },
                          "dateOfStatus": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                    pathstatus:
                        links:
                        - rel: history
                          href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/pathstatuses/5c70ea90-df48-4a5a-8d48-6fee70e3c4ec/history"
                        pathstatusId: 5c70ea90-df48-4a5a-8d48-6fee70e3c4ec
                        clientEnrolledInPath: 123545
                        reasonNotEnrolled: 99
                        dateOfStatus: 04-16-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires an user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a pathstatus using a URI resource parameter/ID.
      operationId: GET_clients-clientid-enrollments-enrollmentid-pathstatuses-pathstatusid
    put:
      responses:
        '200':
          description: OK â€“ Everything is working.
        '304':
          description: Not Modified â€“ The client can use cached data.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires a user.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific pathstatus specified by the URI resource
        parameter/ID.
      operationId: PUT_clients-clientid-enrollments-enrollmentid-pathstatuses-pathstatusid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "pathstatus"
                  ],
                  "properties": {
                    "pathstatus": {
                      "type": "object",
                      "required": [
                        "clientenrolledinpath",
                        "dateOfStatus",
                        "clientEnrolledInPath",
                        "reasonNotEnrolled"
                      ],
                      "properties": {
                        "clientenrolledinpath": {
                          "type": "integer"
                        },
                        "dateOfStatus": {
                          "type": "string",
                          "format": "MM-dd-YYYY HH:mm",
                        },
                        "clientEnrolledInPath": {
                          "type": "integer"
                        },
                        "reasonNotEnrolled": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  pathstatus:
                    clientenrolledinpath: -170011723306562560
                    dateOfStatus: '04-16-2016 11:11'
                    clientEnrolledInPath: 123545
                    reasonNotEnrolled: 99
        required: true
    delete:
      responses:
        '204':
          description: OK â€“ The resource was successfully deleted.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific pathstatus specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-pathstatuses-pathstatusid
    parameters:
      - name: pathstatusid
        in: path
        required: true
        schema:
          type: string
        description: Pathstatus Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/pathstatuses/{pathstatusid}/history':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "pathstatuses"
                    ],
                    "properties": {
                      "pathstatuses": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "pathstatuses"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "pathstatuses": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "pathstatusId",
                                "clientEnrolledInPath",
                                "reasonNotEnrolled",
                                "dateOfStatus"
                              ],
                              "properties": {
                                "pathstatusId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "clientEnrolledInPath": {
                                  "type": "integer"
                                },
                                "reasonNotEnrolled": {
                                  "type": "integer"
                                },
                                "dateOfStatus": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    pathstatuses:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      pathstatuses:
                        - pathstatusId: 5c70ea90-df48-4a5a-8d48-6fee70e3c4ec
                          clientEnrolledInPath: 123545
                          reasonNotEnrolled: 99
                          dateOfStatus: 04-16-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for pathstatus history.  Returns a list of pathstatus ids history, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-pathstatuses-pathstatusid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: pathstatusid
        in: path
        required: true
        schema:
          type: string
        description: Pathstatus Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/entryrhsps':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "entryrhsps"
                    ],
                    "properties": {
                      "entryrhsps": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "entryrhsps"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "entryrhsps": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "entryrhspId",
                                "worstHousingSituation"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "entryrhspId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "worstHousingSituation": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    entryrhsps:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      entryrhsps:
                        - links:
                          - rel: history
                            href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/entryrhsps/4fe746e5-0323-46b9-866f-209d81dbda51/history"
                          entryrhspId: 4fe746e5-0323-46b9-866f-209d81dbda51
                          worstHousingSituation: 781317225
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for entryrhsp.  Returns a list of entryrhsp ids, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-entryrhsps
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "entryrhsp"
                    ],
                    "properties": {
                      "entryrhsp": {
                        "type": "object",
                        "required": [
                          "entryrhspId",
                          "worstHousingSituation"
                        ],
                        "properties": {
                          "entryrhspId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "worstHousingSituation": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                  entryrhsp:
                    entryrhspId: c10f31e4-9e09-4fab-b788-e89fc074c9f8
                    worstHousingSituation: 781317225
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found â€“ There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a entryrhsp
      operationId: POST_clients-clientid-enrollments-enrollmentid-entryrhsps
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "entryrhsp"
                  ],
                  "properties": {
                    "entryrhsp": {
                      "type": "object",
                      "required": [
                        "worstHousingSituation"
                      ],
                      "properties": {
                        "worstHousingSituation": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  entryrhsp:
                    worstHousingSituation: 781317225
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/entryrhsps/{entryrhspid}':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "entryrhsp"
                    ],
                    "properties": {
                      "entryrhsp": {
                        "type": "object",
                        "required": [
                          "links",
                          "entryrhspId",
                          "worstHousingSituation"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "entryrhspId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "worstHousingSituation": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                    entryrhsp:
                        links:
                        - rel: history
                          href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/entryrhsps/c10f31e4-9e09-4fab-b788-e89fc074c9f8/history"
                        entryrhspId: c10f31e4-9e09-4fab-b788-e89fc074c9f8
                        worstHousingSituation: 781317225
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires an user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a entryrhsp using a URI resource parameter/ID.
      operationId: GET_clients-clientid-enrollments-enrollmentid-entryrhsps-entryrhspid
    put:
      responses:
        '200':
          description: OK â€“ Everything is working.
        '304':
          description: Not Modified â€“ The client can use cached data.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires a user.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Updates a specific entryrhsp specified by the URI resource parameter/ID.
      operationId: PUT_clients-clientid-enrollments-enrollmentid-entryrhsps-entryrhspid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "entryrhsp"
                  ],
                  "properties": {
                    "entryrhsp": {
                      "type": "object",
                      "required": [
                        "worstHousingSituation"
                      ],
                      "properties": {
                        "worstHousingSituation": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  entryrhsp:
                    worstHousingSituation: 781317225
        required: true
    delete:
      responses:
        '204':
          description: OK â€“ The resource was successfully deleted.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific entryrhsp specified by the URI resource parameter/ID.
      operationId: DELETE_clients-clientid-enrollments-enrollmentid-entryrhsps-entryrhspid
    parameters:
      - name: entryrhspid
        in: path
        required: true
        schema:
          type: string
        description: Entryrhsp Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/entryrhsps/{entryrhspid}/history':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "entryrhsps"
                    ],
                    "properties": {
                      "entryrhsps": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "entryrhsps"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "entryrhsps": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "entryrhspId",
                                "worstHousingSituation"
                              ],
                              "properties": {
                                "entryrhspId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "worstHousingSituation": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    entryrhsps:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      entryrhsps:
                        - entryrhspId: 4fe746e5-0323-46b9-866f-209d81dbda51
                          worstHousingSituation: 781317225
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for entryrhsp history.  Returns a list of entryrhsp ids history, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-entryrhsps-entryrhspid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: entryrhspid
        in: path
        required: true
        schema:
          type: string
        description: Entryrhsp Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/entryrhys':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "entryrhys"
                    ],
                    "properties": {
                      "entryrhys": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "entryrhys"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "entryrhys": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "entryrhyId",
                                "formerlyWardChildWelfrForestCare",
                                "yearsChildWelfrForestCare",
                                "monthsChildWelfrForestCare",
                                "formerlyWardOfJuvenileJustice",
                                "yearsJuvenileJustice",
                                "houseHoldDynamics",
                                "sexualOrientatiionGenderIdentityYouth",
                                "sexualOrientatiionGenderIdentityFamilyMbr",
                                "housingIssuesYouth",
                                "housingIssuesFamilyMbr",
                                "schoolEducationIssuesYouth",
                                "schoolEducationIssuesFamilyMbr",
                                "unemployementYouth",
                                "unemployementFamilyMbr",
                                "mentalHealthIssuesYouth",
                                "mentalHealthIssuesFamilyMbr",
                                "healthIssuesYouth",
                                "healthIssuesFamilyMbr",
                                "physicalDisabilityYouth",
                                "physicalDisabilityFamilyMbr",
                                "mentalDisabilityYouth",
                                "mentalDisabilityFamilyMbr",
                                "abuseAndNeglectYouth",
                                "abuseAndNeglectFamilyMbr",
                                "alcoholDrugAbuseYouth",
                                "alcoholDrugAbuseFamilyMbr",
                                "insufficientIncomeToSupportYouth",
                                "activeMilitaryParent",
                                "incarceratedParent",
                                "incarceratedParentStatus",
                                "referralSource",
                                "countOutReachReferralApproaches",
                                "exchangeForSex",
                                "exchangeForSexPastThreeMonths",
                                "countOfExchangeForSex",
                                "askedOfForcedToExchangeForSex",
                                "askedOfForcedToExchangeForSexPastThreeMonths",
                                "workPlaceViolenceThreat",
                                "workPlacePromiseDifference",
                                "coercedToContinueWork",
                                "laborExploitPastThreeMonths",
                                "dataCollectionStage",
                                "informationDate"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "entryrhyId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "formerlyWardChildWelfrForestCare": {
                                  "type": "integer"
                                },
                                "yearsChildWelfrForestCare": {
                                  "type": "integer"
                                },
                                "monthsChildWelfrForestCare": {
                                  "type": "integer"
                                },
                                "formerlyWardOfJuvenileJustice": {
                                  "type": "integer"
                                },
                                "yearsJuvenileJustice": {
                                  "type": "integer"
                                },
                                "houseHoldDynamics": {
                                  "type": "integer"
                                },
                                "sexualOrientatiionGenderIdentityYouth": {
                                  "type": "integer"
                                },
                                "sexualOrientatiionGenderIdentityFamilyMbr": {
                                  "type": "integer"
                                },
                                "housingIssuesYouth": {
                                  "type": "integer"
                                },
                                "housingIssuesFamilyMbr": {
                                  "type": "integer"
                                },
                                "schoolEducationIssuesYouth": {
                                  "type": "integer"
                                },
                                "schoolEducationIssuesFamilyMbr": {
                                  "type": "integer"
                                },
                                "unemployementYouth": {
                                  "type": "integer"
                                },
                                "unemployementFamilyMbr": {
                                  "type": "integer"
                                },
                                "mentalHealthIssuesYouth": {
                                  "type": "integer"
                                },
                                "mentalHealthIssuesFamilyMbr": {
                                  "type": "integer"
                                },
                                "healthIssuesYouth": {
                                  "type": "integer"
                                },
                                "healthIssuesFamilyMbr": {
                                  "type": "integer"
                                },
                                "physicalDisabilityYouth": {
                                  "type": "integer"
                                },
                                "physicalDisabilityFamilyMbr": {
                                  "type": "integer"
                                },
                                "mentalDisabilityYouth": {
                                  "type": "integer"
                                },
                                "mentalDisabilityFamilyMbr": {
                                  "type": "integer"
                                },
                                "abuseAndNeglectYouth": {
                                  "type": "integer"
                                },
                                "abuseAndNeglectFamilyMbr": {
                                  "type": "integer"
                                },
                                "alcoholDrugAbuseYouth": {
                                  "type": "integer"
                                },
                                "alcoholDrugAbuseFamilyMbr": {
                                  "type": "integer"
                                },
                                "insufficientIncomeToSupportYouth": {
                                  "type": "integer"
                                },
                                "activeMilitaryParent": {
                                  "type": "integer"
                                },
                                "incarceratedParent": {
                                  "type": "integer"
                                },
                                "incarceratedParentStatus": {
                                  "type": "integer"
                                },
                                "referralSource": {
                                  "type": "integer"
                                },
                                "countOutReachReferralApproaches": {
                                  "type": "integer"
                                },
                                "exchangeForSex": {
                                  "type": "integer"
                                },
                                "exchangeForSexPastThreeMonths": {
                                  "type": "integer"
                                },
                                "countOfExchangeForSex": {
                                  "type": "integer"
                                },
                                "askedOfForcedToExchangeForSex": {
                                  "type": "integer"
                                },
                                "askedOfForcedToExchangeForSexPastThreeMonths": {
                                  "type": "integer"
                                },
                                "workPlaceViolenceThreat": {
                                  "type": "integer"
                                },
                                "workPlacePromiseDifference": {
                                  "type": "integer"
                                },
                                "coercedToContinueWork": {
                                  "type": "integer"
                                },
                                "laborExploitPastThreeMonths": {
                                  "type": "integer"
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    entryrhys:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      entryrhys:
                        - links:
                          - rel: history
                            href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/entryrhys/6304041b-b997-4b01-9987-63d7e78070f1/history"
                          entryrhyId: 6304041b-b997-4b01-9987-63d7e78070f1
                          formerlyWardChildWelfrForestCare: 99
                          yearsChildWelfrForestCare: 2
                          monthsChildWelfrForestCare: 4538
                          formerlyWardOfJuvenileJustice: 8
                          yearsJuvenileJustice: 3
                          houseHoldDynamics: 1
                          sexualOrientatiionGenderIdentityYouth: 99
                          sexualOrientatiionGenderIdentityFamilyMbr: 1
                          housingIssuesYouth: 99
                          housingIssuesFamilyMbr: 1
                          schoolEducationIssuesYouth: 99
                          schoolEducationIssuesFamilyMbr: 1
                          unemployementYouth: 99
                          unemployementFamilyMbr: 1
                          mentalHealthIssuesYouth: 99
                          mentalHealthIssuesFamilyMbr: 1
                          healthIssuesYouth: 1
                          healthIssuesFamilyMbr: 99
                          physicalDisabilityYouth: 1
                          physicalDisabilityFamilyMbr: 99
                          mentalDisabilityYouth: 99
                          mentalDisabilityFamilyMbr: 99
                          abuseAndNeglectYouth: 99
                          abuseAndNeglectFamilyMbr: 99
                          alcoholDrugAbuseYouth: 99
                          alcoholDrugAbuseFamilyMbr: 99
                          insufficientIncomeToSupportYouth: 1
                          activeMilitaryParent: 1
                          incarceratedParent: 1
                          incarceratedParentStatus: 3
                          referralSource: 663
                          countOutReachReferralApproaches: 234
                          exchangeForSex: 8
                          exchangeForSexPastThreeMonths: 9
                          countOfExchangeForSex: 4
                          askedOfForcedToExchangeForSex: 8
                          askedOfForcedToExchangeForSexPastThreeMonths: 8
                          workPlaceViolenceThreat: 1
                          workPlacePromiseDifference: 8
                          coercedToContinueWork: 9
                          laborExploitPastThreeMonths: 420
                          dataCollectionStage: 1
                          informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for entryrhy.  Returns a list of entryrhy ids, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-entryrhys
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "entryrhy"
                    ],
                    "properties": {
                      "entryrhy": {
                        "type": "object",
                        "required": [
                          "entryrhyId",
                          "formerlyWardChildWelfrForestCare",
                          "yearsChildWelfrForestCare",
                          "monthsChildWelfrForestCare",
                          "formerlyWardOfJuvenileJustice",
                          "yearsJuvenileJustice",
                          "houseHoldDynamics",
                          "sexualOrientatiionGenderIdentityYouth",
                          "sexualOrientatiionGenderIdentityFamilyMbr",
                          "housingIssuesYouth",
                          "housingIssuesFamilyMbr",
                          "schoolEducationIssuesYouth",
                          "schoolEducationIssuesFamilyMbr",
                          "unemployementYouth",
                          "unemployementFamilyMbr",
                          "mentalHealthIssuesYouth",
                          "mentalHealthIssuesFamilyMbr",
                          "healthIssuesYouth",
                          "healthIssuesFamilyMbr",
                          "physicalDisabilityYouth",
                          "physicalDisabilityFamilyMbr",
                          "mentalDisabilityYouth",
                          "mentalDisabilityFamilyMbr",
                          "abuseAndNeglectYouth",
                          "abuseAndNeglectFamilyMbr",
                          "alcoholDrugAbuseYouth",
                          "alcoholDrugAbuseFamilyMbr",
                          "insufficientIncomeToSupportYouth",
                          "activeMilitaryParent",
                          "incarceratedParent",
                          "incarceratedParentStatus",
                          "referralSource",
                          "countOutReachReferralApproaches",
                          "exchangeForSex",
                          "exchangeForSexPastThreeMonths",
                          "countOfExchangeForSex",
                          "askedOfForcedToExchangeForSex",
                          "askedOfForcedToExchangeForSexPastThreeMonths",
                          "workPlaceViolenceThreat",
                          "workPlacePromiseDifference",
                          "coercedToContinueWork",
                          "laborExploitPastThreeMonths",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "entryrhyId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "formerlyWardChildWelfrForestCare": {
                            "type": "integer"
                          },
                          "yearsChildWelfrForestCare": {
                            "type": "integer"
                          },
                          "monthsChildWelfrForestCare": {
                            "type": "integer"
                          },
                          "formerlyWardOfJuvenileJustice": {
                            "type": "integer"
                          },
                          "yearsJuvenileJustice": {
                            "type": "integer"
                          },
                          "houseHoldDynamics": {
                            "type": "integer"
                          },
                          "sexualOrientatiionGenderIdentityYouth": {
                            "type": "integer"
                          },
                          "sexualOrientatiionGenderIdentityFamilyMbr": {
                            "type": "integer"
                          },
                          "housingIssuesYouth": {
                            "type": "integer"
                          },
                          "housingIssuesFamilyMbr": {
                            "type": "integer"
                          },
                          "schoolEducationIssuesYouth": {
                            "type": "integer"
                          },
                          "schoolEducationIssuesFamilyMbr": {
                            "type": "integer"
                          },
                          "unemployementYouth": {
                            "type": "integer"
                          },
                          "unemployementFamilyMbr": {
                            "type": "integer"
                          },
                          "mentalHealthIssuesYouth": {
                            "type": "integer"
                          },
                          "mentalHealthIssuesFamilyMbr": {
                            "type": "integer"
                          },
                          "healthIssuesYouth": {
                            "type": "integer"
                          },
                          "healthIssuesFamilyMbr": {
                            "type": "integer"
                          },
                          "physicalDisabilityYouth": {
                            "type": "integer"
                          },
                          "physicalDisabilityFamilyMbr": {
                            "type": "integer"
                          },
                          "mentalDisabilityYouth": {
                            "type": "integer"
                          },
                          "mentalDisabilityFamilyMbr": {
                            "type": "integer"
                          },
                          "abuseAndNeglectYouth": {
                            "type": "integer"
                          },
                          "abuseAndNeglectFamilyMbr": {
                            "type": "integer"
                          },
                          "alcoholDrugAbuseYouth": {
                            "type": "integer"
                          },
                          "alcoholDrugAbuseFamilyMbr": {
                            "type": "integer"
                          },
                          "insufficientIncomeToSupportYouth": {
                            "type": "integer"
                          },
                          "activeMilitaryParent": {
                            "type": "integer"
                          },
                          "incarceratedParent": {
                            "type": "integer"
                          },
                          "incarceratedParentStatus": {
                            "type": "integer"
                          },
                          "referralSource": {
                            "type": "integer"
                          },
                          "countOutReachReferralApproaches": {
                            "type": "integer"
                          },
                          "exchangeForSex": {
                            "type": "integer"
                          },
                          "exchangeForSexPastThreeMonths": {
                            "type": "integer"
                          },
                          "countOfExchangeForSex": {
                            "type": "integer"
                          },
                          "askedOfForcedToExchangeForSex": {
                            "type": "integer"
                          },
                          "askedOfForcedToExchangeForSexPastThreeMonths": {
                            "type": "integer"
                          },
                          "workPlaceViolenceThreat": {
                            "type": "integer"
                          },
                          "workPlacePromiseDifference": {
                            "type": "integer"
                          },
                          "coercedToContinueWork": {
                            "type": "integer"
                          },
                          "laborExploitPastThreeMonths": {
                            "type": "integer"
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                  entryrhy:
                    entryrhyId: 6304041b-b997-4b01-9987-63d7e78070f1
                    formerlyWardChildWelfrForestCare: 99
                    yearsChildWelfrForestCare: 2
                    monthsChildWelfrForestCare: 4538
                    formerlyWardOfJuvenileJustice: 8
                    yearsJuvenileJustice: 3
                    houseHoldDynamics: 1
                    sexualOrientatiionGenderIdentityYouth: 99
                    sexualOrientatiionGenderIdentityFamilyMbr: 1
                    housingIssuesYouth: 99
                    housingIssuesFamilyMbr: 1
                    schoolEducationIssuesYouth: 99
                    schoolEducationIssuesFamilyMbr: 1
                    unemployementYouth: 99
                    unemployementFamilyMbr: 1
                    mentalHealthIssuesYouth: 99
                    mentalHealthIssuesFamilyMbr: 1
                    healthIssuesYouth: 1
                    healthIssuesFamilyMbr: 99
                    physicalDisabilityYouth: 1
                    physicalDisabilityFamilyMbr: 99
                    mentalDisabilityYouth: 99
                    mentalDisabilityFamilyMbr: 99
                    abuseAndNeglectYouth: 99
                    abuseAndNeglectFamilyMbr: 99
                    alcoholDrugAbuseYouth: 99
                    alcoholDrugAbuseFamilyMbr: 99
                    insufficientIncomeToSupportYouth: 1
                    activeMilitaryParent: 1
                    incarceratedParent: 1
                    incarceratedParentStatus: 3
                    referralSource: 663
                    countOutReachReferralApproaches: 234
                    exchangeForSex: 8
                    exchangeForSexPastThreeMonths: 9
                    countOfExchangeForSex: 4
                    askedOfForcedToExchangeForSex: 8
                    askedOfForcedToExchangeForSexPastThreeMonths: 8
                    workPlaceViolenceThreat: 1
                    workPlacePromiseDifference: 8
                    coercedToContinueWork: 9
                    laborExploitPastThreeMonths: 420
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found â€“ There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a entryrhy
      operationId: POST_clients-clientid-enrollments-enrollmentid-entryrhys
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "entryrhy"
                  ],
                  "properties": {
                    "entryrhy": {
                      "type": "object",
                      "required": [
                        "formerlyWardChildWelfrForestCare",
                        "yearsChildWelfrForestCare",
                        "monthsChildWelfrForestCare",
                        "formerlyWardOfJuvenileJustice",
                        "yearsJuvenileJustice",
                        "houseHoldDynamics",
                        "sexualOrientatiionGenderIdentityYouth",
                        "sexualOrientatiionGenderIdentityFamilyMbr",
                        "housingIssuesYouth",
                        "housingIssuesFamilyMbr",
                        "schoolEducationIssuesYouth",
                        "schoolEducationIssuesFamilyMbr",
                        "unemployementYouth",
                        "unemployementFamilyMbr",
                        "mentalHealthIssuesYouth",
                        "mentalHealthIssuesFamilyMbr",
                        "healthIssuesYouth",
                        "healthIssuesFamilyMbr",
                        "physicalDisabilityYouth",
                        "physicalDisabilityFamilyMbr",
                        "mentalDisabilityYouth",
                        "mentalDisabilityFamilyMbr",
                        "abuseAndNeglectYouth",
                        "abuseAndNeglectFamilyMbr",
                        "alcoholDrugAbuseYouth",
                        "alcoholDrugAbuseFamilyMbr",
                        "insufficientIncomeToSupportYouth",
                        "activeMilitaryParent",
                        "incarceratedParent",
                        "incarceratedParentStatus",
                        "referralSource",
                        "countOutReachReferralApproaches",
                        "exchangeForSex",
                        "exchangeForSexPastThreeMonths",
                        "countOfExchangeForSex",
                        "askedOfForcedToExchangeForSex",
                        "askedOfForcedToExchangeForSexPastThreeMonths",
                        "workPlaceViolenceThreat",
                        "workPlacePromiseDifference",
                        "coercedToContinueWork",
                        "laborExploitPastThreeMonths",
                        "dataCollectionStage",
                        "informationDate"
                      ],
                      "properties": {
                        "formerlyWardChildWelfrForestCare": {
                          "type": "integer"
                        },
                        "yearsChildWelfrForestCare": {
                          "type": "integer"
                        },
                        "monthsChildWelfrForestCare": {
                          "type": "integer"
                        },
                        "formerlyWardOfJuvenileJustice": {
                          "type": "integer"
                        },
                        "yearsJuvenileJustice": {
                          "type": "integer"
                        },
                        "houseHoldDynamics": {
                          "type": "integer"
                        },
                        "sexualOrientatiionGenderIdentityYouth": {
                          "type": "integer"
                        },
                        "sexualOrientatiionGenderIdentityFamilyMbr": {
                          "type": "integer"
                        },
                        "housingIssuesYouth": {
                          "type": "integer"
                        },
                        "housingIssuesFamilyMbr": {
                          "type": "integer"
                        },
                        "schoolEducationIssuesYouth": {
                          "type": "integer"
                        },
                        "schoolEducationIssuesFamilyMbr": {
                          "type": "integer"
                        },
                        "unemployementYouth": {
                          "type": "integer"
                        },
                        "unemployementFamilyMbr": {
                          "type": "integer"
                        },
                        "mentalHealthIssuesYouth": {
                          "type": "integer"
                        },
                        "mentalHealthIssuesFamilyMbr": {
                          "type": "integer"
                        },
                        "healthIssuesYouth": {
                          "type": "integer"
                        },
                        "healthIssuesFamilyMbr": {
                          "type": "integer"
                        },
                        "physicalDisabilityYouth": {
                          "type": "integer"
                        },
                        "physicalDisabilityFamilyMbr": {
                          "type": "integer"
                        },
                        "mentalDisabilityYouth": {
                          "type": "integer"
                        },
                        "mentalDisabilityFamilyMbr": {
                          "type": "integer"
                        },
                        "abuseAndNeglectYouth": {
                          "type": "integer"
                        },
                        "abuseAndNeglectFamilyMbr": {
                          "type": "integer"
                        },
                        "alcoholDrugAbuseYouth": {
                          "type": "integer"
                        },
                        "alcoholDrugAbuseFamilyMbr": {
                          "type": "integer"
                        },
                        "insufficientIncomeToSupportYouth": {
                          "type": "integer"
                        },
                        "activeMilitaryParent": {
                          "type": "integer"
                        },
                        "incarceratedParent": {
                          "type": "integer"
                        },
                        "incarceratedParentStatus": {
                          "type": "integer"
                        },
                        "referralSource": {
                          "type": "integer"
                        },
                        "countOutReachReferralApproaches": {
                          "type": "integer"
                        },
                        "exchangeForSex": {
                          "type": "integer"
                        },
                        "exchangeForSexPastThreeMonths": {
                          "type": "integer"
                        },
                        "countOfExchangeForSex": {
                          "type": "integer"
                        },
                        "askedOfForcedToExchangeForSex": {
                          "type": "integer"
                        },
                        "askedOfForcedToExchangeForSexPastThreeMonths": {
                          "type": "integer"
                        },
                        "workPlaceViolenceThreat": {
                          "type": "integer"
                        },
                        "workPlacePromiseDifference": {
                          "type": "integer"
                        },
                        "coercedToContinueWork": {
                          "type": "integer"
                        },
                        "laborExploitPastThreeMonths": {
                          "type": "integer"
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
              example:
                  entryrhy:
                    formerlyWardChildWelfrForestCare: 99
                    yearsChildWelfrForestCare: 2
                    monthsChildWelfrForestCare: 4538
                    formerlyWardOfJuvenileJustice: 8
                    yearsJuvenileJustice: 3
                    houseHoldDynamics: 1
                    sexualOrientatiionGenderIdentityYouth: 99
                    sexualOrientatiionGenderIdentityFamilyMbr: 1
                    housingIssuesYouth: 99
                    housingIssuesFamilyMbr: 1
                    schoolEducationIssuesYouth: 99
                    schoolEducationIssuesFamilyMbr: 1
                    unemployementYouth: 99
                    unemployementFamilyMbr: 1
                    mentalHealthIssuesYouth: 99
                    mentalHealthIssuesFamilyMbr: 1
                    healthIssuesYouth: 1
                    healthIssuesFamilyMbr: 99
                    physicalDisabilityYouth: 1
                    physicalDisabilityFamilyMbr: 99
                    mentalDisabilityYouth: 99
                    mentalDisabilityFamilyMbr: 99
                    abuseAndNeglectYouth: 99
                    abuseAndNeglectFamilyMbr: 99
                    alcoholDrugAbuseYouth: 99
                    alcoholDrugAbuseFamilyMbr: 99
                    insufficientIncomeToSupportYouth: 1
                    activeMilitaryParent: 1
                    incarceratedParent: 1
                    incarceratedParentStatus: 3
                    referralSource: 663
                    countOutReachReferralApproaches: 234
                    exchangeForSex: 8
                    exchangeForSexPastThreeMonths: 9
                    countOfExchangeForSex: 4
                    askedOfForcedToExchangeForSex: 8
                    askedOfForcedToExchangeForSexPastThreeMonths: 8
                    workPlaceViolenceThreat: 1
                    workPlacePromiseDifference: 8
                    coercedToContinueWork: 9
                    laborExploitPastThreeMonths: 420
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/entryrhys/{entryrhyid}':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "entryrhy"
                    ],
                    "properties": {
                      "entryrhy": {
                        "type": "object",
                        "required": [
                          "links",
                          "entryrhyId",
                          "formerlyWardChildWelfrForestCare",
                          "yearsChildWelfrForestCare",
                          "monthsChildWelfrForestCare",
                          "formerlyWardOfJuvenileJustice",
                          "yearsJuvenileJustice",
                          "houseHoldDynamics",
                          "sexualOrientatiionGenderIdentityYouth",
                          "sexualOrientatiionGenderIdentityFamilyMbr",
                          "housingIssuesYouth",
                          "housingIssuesFamilyMbr",
                          "schoolEducationIssuesYouth",
                          "schoolEducationIssuesFamilyMbr",
                          "unemployementYouth",
                          "unemployementFamilyMbr",
                          "mentalHealthIssuesYouth",
                          "mentalHealthIssuesFamilyMbr",
                          "healthIssuesYouth",
                          "healthIssuesFamilyMbr",
                          "physicalDisabilityYouth",
                          "physicalDisabilityFamilyMbr",
                          "mentalDisabilityYouth",
                          "mentalDisabilityFamilyMbr",
                          "abuseAndNeglectYouth",
                          "abuseAndNeglectFamilyMbr",
                          "alcoholDrugAbuseYouth",
                          "alcoholDrugAbuseFamilyMbr",
                          "insufficientIncomeToSupportYouth",
                          "activeMilitaryParent",
                          "incarceratedParent",
                          "incarceratedParentStatus",
                          "referralSource",
                          "countOutReachReferralApproaches",
                          "exchangeForSex",
                          "exchangeForSexPastThreeMonths",
                          "countOfExchangeForSex",
                          "askedOfForcedToExchangeForSex",
                          "askedOfForcedToExchangeForSexPastThreeMonths",
                          "workPlaceViolenceThreat",
                          "workPlacePromiseDifference",
                          "coercedToContinueWork",
                          "laborExploitPastThreeMonths",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "entryrhyId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "formerlyWardChildWelfrForestCare": {
                            "type": "integer"
                          },
                          "yearsChildWelfrForestCare": {
                            "type": "integer"
                          },
                          "monthsChildWelfrForestCare": {
                            "type": "integer"
                          },
                          "formerlyWardOfJuvenileJustice": {
                            "type": "integer"
                          },
                          "yearsJuvenileJustice": {
                            "type": "integer"
                          },
                          "houseHoldDynamics": {
                            "type": "integer"
                          },
                          "sexualOrientatiionGenderIdentityYouth": {
                            "type": "integer"
                          },
                          "sexualOrientatiionGenderIdentityFamilyMbr": {
                            "type": "integer"
                          },
                          "housingIssuesYouth": {
                            "type": "integer"
                          },
                          "housingIssuesFamilyMbr": {
                            "type": "integer"
                          },
                          "schoolEducationIssuesYouth": {
                            "type": "integer"
                          },
                          "schoolEducationIssuesFamilyMbr": {
                            "type": "integer"
                          },
                          "unemployementYouth": {
                            "type": "integer"
                          },
                          "unemployementFamilyMbr": {
                            "type": "integer"
                          },
                          "mentalHealthIssuesYouth": {
                            "type": "integer"
                          },
                          "mentalHealthIssuesFamilyMbr": {
                            "type": "integer"
                          },
                          "healthIssuesYouth": {
                            "type": "integer"
                          },
                          "healthIssuesFamilyMbr": {
                            "type": "integer"
                          },
                          "physicalDisabilityYouth": {
                            "type": "integer"
                          },
                          "physicalDisabilityFamilyMbr": {
                            "type": "integer"
                          },
                          "mentalDisabilityYouth": {
                            "type": "integer"
                          },
                          "mentalDisabilityFamilyMbr": {
                            "type": "integer"
                          },
                          "abuseAndNeglectYouth": {
                            "type": "integer"
                          },
                          "abuseAndNeglectFamilyMbr": {
                            "type": "integer"
                          },
                          "alcoholDrugAbuseYouth": {
                            "type": "integer"
                          },
                          "alcoholDrugAbuseFamilyMbr": {
                            "type": "integer"
                          },
                          "insufficientIncomeToSupportYouth": {
                            "type": "integer"
                          },
                          "activeMilitaryParent": {
                            "type": "integer"
                          },
                          "incarceratedParent": {
                            "type": "integer"
                          },
                          "incarceratedParentStatus": {
                            "type": "integer"
                          },
                          "referralSource": {
                            "type": "integer"
                          },
                          "countOutReachReferralApproaches": {
                            "type": "integer"
                          },
                          "exchangeForSex": {
                            "type": "integer"
                          },
                          "exchangeForSexPastThreeMonths": {
                            "type": "integer"
                          },
                          "countOfExchangeForSex": {
                            "type": "integer"
                          },
                          "askedOfForcedToExchangeForSex": {
                            "type": "integer"
                          },
                          "askedOfForcedToExchangeForSexPastThreeMonths": {
                            "type": "integer"
                          },
                          "workPlaceViolenceThreat": {
                            "type": "integer"
                          },
                          "workPlacePromiseDifference": {
                            "type": "integer"
                          },
                          "coercedToContinueWork": {
                            "type": "integer"
                          },
                          "laborExploitPastThreeMonths": {
                            "type": "integer"
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                    entryrhy:
                        links:
                        - rel: history
                          href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/entryrhys/6304041b-b997-4b01-9987-63d7e78070f1/history"
                        entryrhyId: 6304041b-b997-4b01-9987-63d7e78070f1
                        formerlyWardChildWelfrForestCare: 99
                        yearsChildWelfrForestCare: 2
                        monthsChildWelfrForestCare: 4538
                        formerlyWardOfJuvenileJustice: 8
                        yearsJuvenileJustice: 3
                        houseHoldDynamics: 1
                        sexualOrientatiionGenderIdentityYouth: 99
                        sexualOrientatiionGenderIdentityFamilyMbr: 1
                        housingIssuesYouth: 99
                        housingIssuesFamilyMbr: 1
                        schoolEducationIssuesYouth: 99
                        schoolEducationIssuesFamilyMbr: 1
                        unemployementYouth: 99
                        unemployementFamilyMbr: 1
                        mentalHealthIssuesYouth: 99
                        mentalHealthIssuesFamilyMbr: 1
                        healthIssuesYouth: 1
                        healthIssuesFamilyMbr: 99
                        physicalDisabilityYouth: 1
                        physicalDisabilityFamilyMbr: 99
                        mentalDisabilityYouth: 99
                        mentalDisabilityFamilyMbr: 99
                        abuseAndNeglectYouth: 99
                        abuseAndNeglectFamilyMbr: 99
                        alcoholDrugAbuseYouth: 99
                        alcoholDrugAbuseFamilyMbr: 99
                        insufficientIncomeToSupportYouth: 1
                        activeMilitaryParent: 1
                        incarceratedParent: 1
                        incarceratedParentStatus: 3
                        referralSource: 663
                        countOutReachReferralApproaches: 234
                        exchangeForSex: 8
                        exchangeForSexPastThreeMonths: 9
                        countOfExchangeForSex: 4
                        askedOfForcedToExchangeForSex: 8
                        askedOfForcedToExchangeForSexPastThreeMonths: 8
                        workPlaceViolenceThreat: 1
                        workPlacePromiseDifference: 8
                        coercedToContinueWork: 9
                        laborExploitPastThreeMonths: 420
                        dataCollectionStage: 1
                        informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires an user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a entryrhy using a URI resource parameter/ID.
      operationId: GET_clients-clientid-enrollments-enrollmentid-entryrhys-entryrhyid
    put:
      responses:
        '200':
          description: OK â€“ Everything is working.
        '304':
          description: Not Modified â€“ The client can use cached data.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires a user.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Updates a specific entryrhy specified by the URI resource parameter/ID.
      operationId: PUT_clients-clientid-enrollments-enrollmentid-entryrhys-entryrhyid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "entryrhy"
                  ],
                  "properties": {
                    "entryrhy": {
                      "type": "object",
                      "required": [
                        "formerlyWardChildWelfrForestCare",
                        "yearsChildWelfrForestCare",
                        "monthsChildWelfrForestCare",
                        "formerlyWardOfJuvenileJustice",
                        "yearsJuvenileJustice",
                        "houseHoldDynamics",
                        "sexualOrientatiionGenderIdentityYouth",
                        "sexualOrientatiionGenderIdentityFamilyMbr",
                        "housingIssuesYouth",
                        "housingIssuesFamilyMbr",
                        "schoolEducationIssuesYouth",
                        "schoolEducationIssuesFamilyMbr",
                        "unemployementYouth",
                        "unemployementFamilyMbr",
                        "mentalHealthIssuesYouth",
                        "mentalHealthIssuesFamilyMbr",
                        "healthIssuesYouth",
                        "healthIssuesFamilyMbr",
                        "physicalDisabilityYouth",
                        "physicalDisabilityFamilyMbr",
                        "mentalDisabilityYouth",
                        "mentalDisabilityFamilyMbr",
                        "abuseAndNeglectYouth",
                        "abuseAndNeglectFamilyMbr",
                        "alcoholDrugAbuseYouth",
                        "alcoholDrugAbuseFamilyMbr",
                        "insufficientIncomeToSupportYouth",
                        "activeMilitaryParent",
                        "incarceratedParent",
                        "incarceratedParentStatus",
                        "referralSource",
                        "countOutReachReferralApproaches",
                        "exchangeForSex",
                        "exchangeForSexPastThreeMonths",
                        "countOfExchangeForSex",
                        "askedOfForcedToExchangeForSex",
                        "askedOfForcedToExchangeForSexPastThreeMonths",
                        "workPlaceViolenceThreat",
                        "workPlacePromiseDifference",
                        "coercedToContinueWork",
                        "laborExploitPastThreeMonths",
                        "dataCollectionStage",
                        "informationDate"
                      ],
                      "properties": {
                        "formerlyWardChildWelfrForestCare": {
                          "type": "integer"
                        },
                        "yearsChildWelfrForestCare": {
                          "type": "integer"
                        },
                        "monthsChildWelfrForestCare": {
                          "type": "integer"
                        },
                        "formerlyWardOfJuvenileJustice": {
                          "type": "integer"
                        },
                        "yearsJuvenileJustice": {
                          "type": "integer"
                        },
                        "houseHoldDynamics": {
                          "type": "integer"
                        },
                        "sexualOrientatiionGenderIdentityYouth": {
                          "type": "integer"
                        },
                        "sexualOrientatiionGenderIdentityFamilyMbr": {
                          "type": "integer"
                        },
                        "housingIssuesYouth": {
                          "type": "integer"
                        },
                        "housingIssuesFamilyMbr": {
                          "type": "integer"
                        },
                        "schoolEducationIssuesYouth": {
                          "type": "integer"
                        },
                        "schoolEducationIssuesFamilyMbr": {
                          "type": "integer"
                        },
                        "unemployementYouth": {
                          "type": "integer"
                        },
                        "unemployementFamilyMbr": {
                          "type": "integer"
                        },
                        "mentalHealthIssuesYouth": {
                          "type": "integer"
                        },
                        "mentalHealthIssuesFamilyMbr": {
                          "type": "integer"
                        },
                        "healthIssuesYouth": {
                          "type": "integer"
                        },
                        "healthIssuesFamilyMbr": {
                          "type": "integer"
                        },
                        "physicalDisabilityYouth": {
                          "type": "integer"
                        },
                        "physicalDisabilityFamilyMbr": {
                          "type": "integer"
                        },
                        "mentalDisabilityYouth": {
                          "type": "integer"
                        },
                        "mentalDisabilityFamilyMbr": {
                          "type": "integer"
                        },
                        "abuseAndNeglectYouth": {
                          "type": "integer"
                        },
                        "abuseAndNeglectFamilyMbr": {
                          "type": "integer"
                        },
                        "alcoholDrugAbuseYouth": {
                          "type": "integer"
                        },
                        "alcoholDrugAbuseFamilyMbr": {
                          "type": "integer"
                        },
                        "insufficientIncomeToSupportYouth": {
                          "type": "integer"
                        },
                        "activeMilitaryParent": {
                          "type": "integer"
                        },
                        "incarceratedParent": {
                          "type": "integer"
                        },
                        "incarceratedParentStatus": {
                          "type": "integer"
                        },
                        "referralSource": {
                          "type": "integer"
                        },
                        "countOutReachReferralApproaches": {
                          "type": "integer"
                        },
                        "exchangeForSex": {
                          "type": "integer"
                        },
                        "exchangeForSexPastThreeMonths": {
                          "type": "integer"
                        },
                        "countOfExchangeForSex": {
                          "type": "integer"
                        },
                        "askedOfForcedToExchangeForSex": {
                          "type": "integer"
                        },
                        "askedOfForcedToExchangeForSexPastThreeMonths": {
                          "type": "integer"
                        },
                        "workPlaceViolenceThreat": {
                          "type": "integer"
                        },
                        "workPlacePromiseDifference": {
                          "type": "integer"
                        },
                        "coercedToContinueWork": {
                          "type": "integer"
                        },
                        "laborExploitPastThreeMonths": {
                          "type": "integer"
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
              example:
                  entryrhy:
                    formerlyWardChildWelfrForestCare: 99
                    yearsChildWelfrForestCare: 2
                    monthsChildWelfrForestCare: 4538
                    formerlyWardOfJuvenileJustice: 8
                    yearsJuvenileJustice: 3
                    houseHoldDynamics: 1
                    sexualOrientatiionGenderIdentityYouth: 99
                    sexualOrientatiionGenderIdentityFamilyMbr: 1
                    housingIssuesYouth: 99
                    housingIssuesFamilyMbr: 1
                    schoolEducationIssuesYouth: 99
                    schoolEducationIssuesFamilyMbr: 1
                    unemployementYouth: 99
                    unemployementFamilyMbr: 1
                    mentalHealthIssuesYouth: 99
                    mentalHealthIssuesFamilyMbr: 1
                    healthIssuesYouth: 1
                    healthIssuesFamilyMbr: 99
                    physicalDisabilityYouth: 1
                    physicalDisabilityFamilyMbr: 99
                    mentalDisabilityYouth: 99
                    mentalDisabilityFamilyMbr: 99
                    abuseAndNeglectYouth: 99
                    abuseAndNeglectFamilyMbr: 99
                    alcoholDrugAbuseYouth: 99
                    alcoholDrugAbuseFamilyMbr: 99
                    insufficientIncomeToSupportYouth: 1
                    activeMilitaryParent: 1
                    incarceratedParent: 1
                    incarceratedParentStatus: 3
                    referralSource: 663
                    countOutReachReferralApproaches: 234
                    exchangeForSex: 8
                    exchangeForSexPastThreeMonths: 9
                    countOfExchangeForSex: 4
                    askedOfForcedToExchangeForSex: 8
                    askedOfForcedToExchangeForSexPastThreeMonths: 8
                    workPlaceViolenceThreat: 1
                    workPlacePromiseDifference: 8
                    coercedToContinueWork: 9
                    laborExploitPastThreeMonths: 420
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        required: true
    delete:
      responses:
        '204':
          description: OK â€“ The resource was successfully deleted.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific entryrhy specified by the URI resource parameter/ID.
      operationId: DELETE_clients-clientid-enrollments-enrollmentid-entryrhys-entryrhyid
    parameters:
      - name: entryrhyid
        in: path
        required: true
        schema:
          type: string
        description: Entryrhy Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/entryrhys/{entryrhyid}/history':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "entryrhys"
                    ],
                    "properties": {
                      "entryrhys": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "entryrhys"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "entryrhys": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "entryrhyId",
                                "formerlyWardChildWelfrForestCare",
                                "yearsChildWelfrForestCare",
                                "monthsChildWelfrForestCare",
                                "formerlyWardOfJuvenileJustice",
                                "yearsJuvenileJustice",
                                "houseHoldDynamics",
                                "sexualOrientatiionGenderIdentityYouth",
                                "sexualOrientatiionGenderIdentityFamilyMbr",
                                "housingIssuesYouth",
                                "housingIssuesFamilyMbr",
                                "schoolEducationIssuesYouth",
                                "schoolEducationIssuesFamilyMbr",
                                "unemployementYouth",
                                "unemployementFamilyMbr",
                                "mentalHealthIssuesYouth",
                                "mentalHealthIssuesFamilyMbr",
                                "healthIssuesYouth",
                                "healthIssuesFamilyMbr",
                                "physicalDisabilityYouth",
                                "physicalDisabilityFamilyMbr",
                                "mentalDisabilityYouth",
                                "mentalDisabilityFamilyMbr",
                                "abuseAndNeglectYouth",
                                "abuseAndNeglectFamilyMbr",
                                "alcoholDrugAbuseYouth",
                                "alcoholDrugAbuseFamilyMbr",
                                "insufficientIncomeToSupportYouth",
                                "activeMilitaryParent",
                                "incarceratedParent",
                                "incarceratedParentStatus",
                                "referralSource",
                                "countOutReachReferralApproaches",
                                "exchangeForSex",
                                "exchangeForSexPastThreeMonths",
                                "countOfExchangeForSex",
                                "askedOfForcedToExchangeForSex",
                                "askedOfForcedToExchangeForSexPastThreeMonths",
                                "workPlaceViolenceThreat",
                                "workPlacePromiseDifference",
                                "coercedToContinueWork",
                                "laborExploitPastThreeMonths",
                                "dataCollectionStage",
                                "informationDate"
                              ],
                              "properties": {
                                "entryrhyId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "formerlyWardChildWelfrForestCare": {
                                  "type": "integer"
                                },
                                "yearsChildWelfrForestCare": {
                                  "type": "integer"
                                },
                                "monthsChildWelfrForestCare": {
                                  "type": "integer"
                                },
                                "formerlyWardOfJuvenileJustice": {
                                  "type": "integer"
                                },
                                "yearsJuvenileJustice": {
                                  "type": "integer"
                                },
                                "houseHoldDynamics": {
                                  "type": "integer"
                                },
                                "sexualOrientatiionGenderIdentityYouth": {
                                  "type": "integer"
                                },
                                "sexualOrientatiionGenderIdentityFamilyMbr": {
                                  "type": "integer"
                                },
                                "housingIssuesYouth": {
                                  "type": "integer"
                                },
                                "housingIssuesFamilyMbr": {
                                  "type": "integer"
                                },
                                "schoolEducationIssuesYouth": {
                                  "type": "integer"
                                },
                                "schoolEducationIssuesFamilyMbr": {
                                  "type": "integer"
                                },
                                "unemployementYouth": {
                                  "type": "integer"
                                },
                                "unemployementFamilyMbr": {
                                  "type": "integer"
                                },
                                "mentalHealthIssuesYouth": {
                                  "type": "integer"
                                },
                                "mentalHealthIssuesFamilyMbr": {
                                  "type": "integer"
                                },
                                "healthIssuesYouth": {
                                  "type": "integer"
                                },
                                "healthIssuesFamilyMbr": {
                                  "type": "integer"
                                },
                                "physicalDisabilityYouth": {
                                  "type": "integer"
                                },
                                "physicalDisabilityFamilyMbr": {
                                  "type": "integer"
                                },
                                "mentalDisabilityYouth": {
                                  "type": "integer"
                                },
                                "mentalDisabilityFamilyMbr": {
                                  "type": "integer"
                                },
                                "abuseAndNeglectYouth": {
                                  "type": "integer"
                                },
                                "abuseAndNeglectFamilyMbr": {
                                  "type": "integer"
                                },
                                "alcoholDrugAbuseYouth": {
                                  "type": "integer"
                                },
                                "alcoholDrugAbuseFamilyMbr": {
                                  "type": "integer"
                                },
                                "insufficientIncomeToSupportYouth": {
                                  "type": "integer"
                                },
                                "activeMilitaryParent": {
                                  "type": "integer"
                                },
                                "incarceratedParent": {
                                  "type": "integer"
                                },
                                "incarceratedParentStatus": {
                                  "type": "integer"
                                },
                                "referralSource": {
                                  "type": "integer"
                                },
                                "countOutReachReferralApproaches": {
                                  "type": "integer"
                                },
                                "exchangeForSex": {
                                  "type": "integer"
                                },
                                "exchangeForSexPastThreeMonths": {
                                  "type": "integer"
                                },
                                "countOfExchangeForSex": {
                                  "type": "integer"
                                },
                                "askedOfForcedToExchangeForSex": {
                                  "type": "integer"
                                },
                                "askedOfForcedToExchangeForSexPastThreeMonths": {
                                  "type": "integer"
                                },
                                "workPlaceViolenceThreat": {
                                  "type": "integer"
                                },
                                "workPlacePromiseDifference": {
                                  "type": "integer"
                                },
                                "coercedToContinueWork": {
                                  "type": "integer"
                                },
                                "laborExploitPastThreeMonths": {
                                  "type": "integer"
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    entryrhys:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      entryrhys:
                        - entryrhyId: 6304041b-b997-4b01-9987-63d7e78070f1
                          formerlyWardChildWelfrForestCare: 99
                          yearsChildWelfrForestCare: 2
                          monthsChildWelfrForestCare: 4538
                          formerlyWardOfJuvenileJustice: 8
                          yearsJuvenileJustice: 3
                          houseHoldDynamics: 1
                          sexualOrientatiionGenderIdentityYouth: 99
                          sexualOrientatiionGenderIdentityFamilyMbr: 1
                          housingIssuesYouth: 99
                          housingIssuesFamilyMbr: 1
                          schoolEducationIssuesYouth: 99
                          schoolEducationIssuesFamilyMbr: 1
                          unemployementYouth: 99
                          unemployementFamilyMbr: 1
                          mentalHealthIssuesYouth: 99
                          mentalHealthIssuesFamilyMbr: 1
                          healthIssuesYouth: 1
                          healthIssuesFamilyMbr: 99
                          physicalDisabilityYouth: 1
                          physicalDisabilityFamilyMbr: 99
                          mentalDisabilityYouth: 99
                          mentalDisabilityFamilyMbr: 99
                          abuseAndNeglectYouth: 99
                          abuseAndNeglectFamilyMbr: 99
                          alcoholDrugAbuseYouth: 99
                          alcoholDrugAbuseFamilyMbr: 99
                          insufficientIncomeToSupportYouth: 1
                          activeMilitaryParent: 1
                          incarceratedParent: 1
                          incarceratedParentStatus: 3
                          referralSource: 663
                          countOutReachReferralApproaches: 234
                          exchangeForSex: 8
                          exchangeForSexPastThreeMonths: 9
                          countOfExchangeForSex: 4
                          askedOfForcedToExchangeForSex: 8
                          askedOfForcedToExchangeForSexPastThreeMonths: 8
                          workPlaceViolenceThreat: 1
                          workPlacePromiseDifference: 8
                          coercedToContinueWork: 9
                          laborExploitPastThreeMonths: 420
                          dataCollectionStage: 1
                          informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for entryrhy history.  Returns a list of entryrhy ids history, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-entryrhys-entryrhyid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: entryrhyid
        in: path
        required: true
        schema:
          type: string
        description: Entryrhy Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/entryssvfs':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "educations"
                    ],
                    "properties": {
                      "educations": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "educations"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "educations": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "educationId",
                                "lastgradecompleted",
                                "schoolStatus",
                                "dataCollectionStage",
                                "informationDate"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "educationId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "lastgradecompleted": {
                                  "type": "integer"
                                },
                                "schoolStatus": {
                                  "type": "integer"
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    educations:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      educations:
                        - links:
                          - rel: history
                            href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/entryssvfs/f91547a2-d13b-40a1-a1be-fed415c468a6/history"
                          educationId: f91547a2-d13b-40a1-a1be-fed415c468a6
                          lastgradecompleted: 10
                          schoolStatus: 6
                          dataCollectionStage: 1
                          informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for entryssvf.  Returns a list of entryssvf ids, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-entryssvfs
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "education"
                    ],
                    "properties": {
                      "education": {
                        "type": "object",
                        "required": [
                          "educationId",
                          "lastgradecompleted",
                          "schoolStatus",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "educationId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "lastgradecompleted": {
                            "type": "integer"
                          },
                          "schoolStatus": {
                            "type": "integer"
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                  education:
                    educationId: f91547a2-d13b-40a1-a1be-fed415c468a6
                    lastgradecompleted: 10
                    schoolStatus: 6
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found â€“ There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a entryssvf
      operationId: POST_clients-clientid-enrollments-enrollmentid-entryssvfs
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "education"
                  ],
                  "properties": {
                    "education": {
                      "type": "object",
                      "required": [
                        "lastgradecompleted",
                        "schoolStatus",
                        "dataCollectionStage",
                        "informationDate"
                      ],
                      "properties": {
                        "lastgradecompleted": {
                          "type": "integer"
                        },
                        "schoolStatus": {
                          "type": "integer"
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
              example:
                  education:
                    lastgradecompleted: 10
                    schoolStatus: 6
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/entryssvfs/{entryssvfid}':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "education"
                    ],
                    "properties": {
                      "education": {
                        "type": "object",
                        "required": [
                          "links",
                          "educationId",
                          "lastgradecompleted",
                          "schoolStatus",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "educationId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "lastgradecompleted": {
                            "type": "integer"
                          },
                          "schoolStatus": {
                            "type": "integer"
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                    education:
                        links:
                        - rel: history
                          href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/entryssvfs/f91547a2-d13b-40a1-a1be-fed415c468a6/history"
                        educationId: f91547a2-d13b-40a1-a1be-fed415c468a6
                        lastgradecompleted: 10
                        schoolStatus: 6
                        dataCollectionStage: 1
                        informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires an user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a entryssvf using a URI resource parameter/ID.
      operationId: GET_clients-clientid-enrollments-enrollmentid-entryssvfs-entryssvfid
    put:
      responses:
        '200':
          description: OK â€“ Everything is working.
        '304':
          description: Not Modified â€“ The client can use cached data.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires a user.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Updates a specific entryssvf specified by the URI resource parameter/ID.
      operationId: PUT_clients-clientid-enrollments-enrollmentid-entryssvfs-entryssvfid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "education"
                  ],
                  "properties": {
                    "education": {
                      "type": "object",
                      "required": [
                        "lastgradecompleted",
                        "schoolStatus",
                        "dataCollectionStage",
                        "informationDate"
                      ],
                      "properties": {
                        "lastgradecompleted": {
                          "type": "integer"
                        },
                        "schoolStatus": {
                          "type": "integer"
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
              example:
                  education:
                    lastgradecompleted: 10
                    schoolStatus: 6
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        required: true
    delete:
      responses:
        '204':
          description: OK â€“ The resource was successfully deleted.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific entryssvf specified by the URI resource parameter/ID.
      operationId: DELETE_clients-clientid-enrollments-enrollmentid-entryssvfs-entryssvfid
    parameters:
      - name: entryssvfid
        in: path
        required: true
        schema:
          type: string
        description: Entryssvf Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/entryssvfs/{entryssvfid}/history':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "educations"
                    ],
                    "properties": {
                      "educations": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "educations"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "educations": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "educationId",
                                "lastgradecompleted",
                                "schoolStatus",
                                "dataCollectionStage",
                                "informationDate"
                              ],
                              "properties": {
                                "educationId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "lastgradecompleted": {
                                  "type": "integer"
                                },
                                "schoolStatus": {
                                  "type": "integer"
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    educations:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      educations:
                        - educationId: f91547a2-d13b-40a1-a1be-fed415c468a6
                          lastgradecompleted: 10
                          schoolStatus: 6
                          dataCollectionStage: 1
                          informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for entryssvf history.  Returns a list of entryssvf ids history, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-entryssvfs-entryssvfid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: entryssvfid
        in: path
        required: true
        schema:
          type: string
        description: Entryssvf Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/servicefareferrals':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "educations"
                    ],
                    "properties": {
                      "educations": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "educations"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "educations": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "educationId",
                                "lastgradecompleted",
                                "schoolStatus",
                                "dataCollectionStage",
                                "informationDate"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "educationId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "lastgradecompleted": {
                                  "type": "integer"
                                },
                                "schoolStatus": {
                                  "type": "integer"
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    educations:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      educations:
                        - links:
                          - rel: history
                            href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/servicefareferrals/f91547a2-d13b-40a1-a1be-fed415c468a6/history"
                          educationId: f91547a2-d13b-40a1-a1be-fed415c468a6
                          lastgradecompleted: 10
                          schoolStatus: 6
                          dataCollectionStage: 1
                          informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for servicefareferral.  Returns a list of servicefareferral
        ids, based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-servicefareferrals
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "education"
                    ],
                    "properties": {
                      "education": {
                        "type": "object",
                        "required": [
                          "educationId",
                          "lastgradecompleted",
                          "schoolStatus",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "educationId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "lastgradecompleted": {
                            "type": "integer"
                          },
                          "schoolStatus": {
                            "type": "integer"
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                  education:
                    educationId: f91547a2-d13b-40a1-a1be-fed415c468a6
                    lastgradecompleted: 10
                    schoolStatus: 6
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found â€“ There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a servicefareferral
      operationId: POST_clients-clientid-enrollments-enrollmentid-servicefareferrals
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "education"
                  ],
                  "properties": {
                    "education": {
                      "type": "object",
                      "required": [
                        "lastgradecompleted",
                        "schoolStatus",
                        "dataCollectionStage",
                        "informationDate"
                      ],
                      "properties": {
                        "lastgradecompleted": {
                          "type": "integer"
                        },
                        "schoolStatus": {
                          "type": "integer"
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
              example:
                  education:
                    lastgradecompleted: 10
                    schoolStatus: 6
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/servicefareferrals/{servicefareferralid}':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "education"
                    ],
                    "properties": {
                      "education": {
                        "type": "object",
                        "required": [
                          "links",
                          "educationId",
                          "lastgradecompleted",
                          "schoolStatus",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "educationId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "lastgradecompleted": {
                            "type": "integer"
                          },
                          "schoolStatus": {
                            "type": "integer"
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                    education:
                      links:
                      - rel: history
                        href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/servicefareferrals/f91547a2-d13b-40a1-a1be-fed415c468a6/history"
                      educationId: f91547a2-d13b-40a1-a1be-fed415c468a6
                      lastgradecompleted: 10
                      schoolStatus: 6
                      dataCollectionStage: 1
                      informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires an user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a servicefareferral using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-servicefareferrals-servicefareferralid
    put:
      responses:
        '200':
          description: OK â€“ Everything is working.
        '304':
          description: Not Modified â€“ The client can use cached data.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires a user.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific servicefareferral specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-servicefareferrals-servicefareferralid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "education"
                  ],
                  "properties": {
                    "education": {
                      "type": "object",
                      "required": [
                        "lastgradecompleted",
                        "schoolStatus",
                        "dataCollectionStage",
                        "informationDate"
                      ],
                      "properties": {
                        "lastgradecompleted": {
                          "type": "integer"
                        },
                        "schoolStatus": {
                          "type": "integer"
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
              example:
                  education:
                    lastgradecompleted: 10
                    schoolStatus: 6
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        required: true
    delete:
      responses:
        '204':
          description: OK â€“ The resource was successfully deleted.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific servicefareferral specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-servicefareferrals-servicefareferralid
    parameters:
      - name: servicefareferralid
        in: path
        required: true
        schema:
          type: string
        description: Servicefareferral Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/servicefareferrals/{servicefareferralid}/history':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "educations"
                    ],
                    "properties": {
                      "educations": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "educations"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "educations": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "educationId",
                                "lastgradecompleted",
                                "schoolStatus",
                                "dataCollectionStage",
                                "informationDate"
                              ],
                              "properties": {
                                "educationId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "lastgradecompleted": {
                                  "type": "integer"
                                },
                                "schoolStatus": {
                                  "type": "integer"
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    educations:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      educations:
                        - educationId: f91547a2-d13b-40a1-a1be-fed415c468a6
                          lastgradecompleted: 10
                          schoolStatus: 6
                          dataCollectionStage: 1
                          informationDate: 03-17-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for servicefareferral history.  Returns a list of servicefareferral
        ids history, based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-servicefareferrals-servicefareferralid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: servicefareferralid
        in: path
        required: true
        schema:
          type: string
        description: Servicefareferral Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/veteraninfos':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "veteranInfos"
                    ],
                    "properties": {
                      "veteranInfos": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "veteranInfos"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "veteranInfos": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "veteranInfoId",
                                "yearEntrdService",
                                "yearSeperated",
                                "worldWar2",
                                "koreanWar",
                                "vietnamWar",
                                "desertStorm",
                                "afghanistanOef",
                                "iraqOif",
                                "iraqOnd",
                                "otherTheater",
                                "militaryBranch",
                                "dischargeStatus"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "veteranInfoId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "yearEntrdService": {
                                  "type": "integer"
                                },
                                "yearSeperated": {
                                  "type": "integer"
                                },
                                "worldWar2": {
                                  "type": "integer"
                                },
                                "koreanWar": {
                                  "type": "integer"
                                },
                                "vietnamWar": {
                                  "type": "integer"
                                },
                                "desertStorm": {
                                  "type": "integer"
                                },
                                "afghanistanOef": {
                                  "type": "integer"
                                },
                                "iraqOif": {
                                  "type": "integer"
                                },
                                "iraqOnd": {
                                  "type": "integer"
                                },
                                "otherTheater": {
                                  "type": "integer"
                                },
                                "militaryBranch": {
                                  "type": "integer"
                                },
                                "dischargeStatus": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    veteranInfos:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      veteranInfos:
                        - links:
                          - rel: history
                            href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/veteraninfos/d0f7f763-dba8-4bc5-9602-d6e3775c59d3/history"
                          veteranInfoId: d0f7f763-dba8-4bc5-9602-d6e3775c59d3
                          yearEntrdService: 1164728538
                          yearSeperated: -410173299
                          worldWar2: 1
                          koreanWar: 8
                          vietnamWar: 9
                          desertStorm: 8
                          afghanistanOef: 99
                          iraqOif: 1
                          iraqOnd: 1
                          otherTheater: 9
                          militaryBranch: 2
                          dischargeStatus: 5
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for veteraninfo.  Returns a list of veteraninfo ids, based on
        the query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-veteraninfos
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "veteranInfo"
                    ],
                    "properties": {
                      "veteranInfo": {
                        "type": "object",
                        "required": [
                          "veteranInfoId",
                          "yearEnteredService",
                          "yearSeparated",
                          "worldWar2",
                          "koreanWar",
                          "vietnamWar",
                          "desertStorm",
                          "afghanistanOef",
                          "iraqOif",
                          "iraqOnd",
                          "otherTheater",
                          "militaryBranch",
                          "dischargeStatus"
                        ],
                        "properties": {
                          "veteranInfoId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "yearEnteredService": {
                            "type": "integer"
                          },
                          "yearSeparated": {
                            "type": "integer"
                          },
                          "worldWar2": {
                            "type": "integer"
                          },
                          "koreanWar": {
                            "type": "integer"
                          },
                          "vietnamWar": {
                            "type": "integer"
                          },
                          "desertStorm": {
                            "type": "integer"
                          },
                          "afghanistanOef": {
                            "type": "integer"
                          },
                          "iraqOif": {
                            "type": "integer"
                          },
                          "iraqOnd": {
                            "type": "integer"
                          },
                          "otherTheater": {
                            "type": "integer"
                          },
                          "militaryBranch": {
                            "type": "integer"
                          },
                          "dischargeStatus": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                  veteranInfo:
                    veteranInfoId: bf09eb50-b641-486e-bf7e-49e9faa37c41
                    yearEnteredService: 1970
                    yearSeparated: 1972
                    worldWar2: 1234
                    koreanWar: 1
                    vietnamWar: 0
                    desertStorm: 0
                    afghanistanOef: 1
                    iraqOif: 1
                    iraqOnd: 0
                    otherTheater: 1
                    militaryBranch: 1
                    dischargeStatus: 0
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found â€“ There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a veteraninfo
      operationId: POST_clients-clientid-veteraninfos
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "veteranInfo"
                  ],
                  "properties": {
                    "veteranInfo": {
                      "type": "object",
                      "required": [
                        "yearEntrdService",
                        "yearSeperated",
                        "worldWar2",
                        "koreanWar",
                        "vietnamWar",
                        "desertStorm",
                        "afghanistanOef",
                        "iraqOif",
                        "iraqOnd",
                        "otherTheater",
                        "militaryBranch",
                        "dischargeStatus"
                      ],
                      "properties": {
                        "yearEntrdService": {
                          "type": "integer"
                        },
                        "yearSeperated": {
                          "type": "integer"
                        },
                        "worldWar2": {
                          "type": "integer"
                        },
                        "koreanWar": {
                          "type": "integer"
                        },
                        "vietnamWar": {
                          "type": "integer"
                        },
                        "desertStorm": {
                          "type": "integer"
                        },
                        "afghanistanOef": {
                          "type": "integer"
                        },
                        "iraqOif": {
                          "type": "integer"
                        },
                        "iraqOnd": {
                          "type": "integer"
                        },
                        "otherTheater": {
                          "type": "integer"
                        },
                        "militaryBranch": {
                          "type": "integer"
                        },
                        "dischargeStatus": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  veteranInfo:
                    yearEntrdService: 1164728538
                    yearSeperated: -410173299
                    worldWar2: 1
                    koreanWar: 8
                    vietnamWar: 9
                    desertStorm: 8
                    afghanistanOef: 99
                    iraqOif: 1
                    iraqOnd: 1
                    otherTheater: 9
                    militaryBranch: 2
                    dischargeStatus: 5
        required: true
    parameters:
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/veteraninfos/{veteraninfoid}':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "veteranInfo"
                    ],
                    "properties": {
                      "veteranInfo": {
                        "type": "object",
                        "required": [
                          "links",
                          "veteranInfoId",
                          "yearEnteredService",
                          "yearSeparated",
                          "worldWar2",
                          "koreanWar",
                          "vietnamWar",
                          "desertStorm",
                          "afghanistanOef",
                          "iraqOif",
                          "iraqOnd",
                          "otherTheater",
                          "militaryBranch",
                          "dischargeStatus"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "veteranInfoId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "yearEnteredService": {
                            "type": "integer"
                          },
                          "yearSeparated": {
                            "type": "integer"
                          },
                          "worldWar2": {
                            "type": "integer"
                          },
                          "koreanWar": {
                            "type": "integer"
                          },
                          "vietnamWar": {
                            "type": "integer"
                          },
                          "desertStorm": {
                            "type": "integer"
                          },
                          "afghanistanOef": {
                            "type": "integer"
                          },
                          "iraqOif": {
                            "type": "integer"
                          },
                          "iraqOnd": {
                            "type": "integer"
                          },
                          "otherTheater": {
                            "type": "integer"
                          },
                          "militaryBranch": {
                            "type": "integer"
                          },
                          "dischargeStatus": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                    veteranInfo:
                        links:
                        - rel: history
                          href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/veteraninfos/bf09eb50-b641-486e-bf7e-49e9faa37c41/history"
                        veteranInfoId: bf09eb50-b641-486e-bf7e-49e9faa37c41
                        yearEnteredService: 1970
                        yearSeparated: 1972
                        worldWar2: 1234
                        koreanWar: 1
                        vietnamWar: 0
                        desertStorm: 0
                        afghanistanOef: 1
                        iraqOif: 1
                        iraqOnd: 0
                        otherTheater: 1
                        militaryBranch: 1
                        dischargeStatus: 0
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires an user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a veteraninfo using a URI resource parameter/ID.
      operationId: GET_clients-clientid-veteraninfos-veteraninfoid
    put:
      responses:
        '200':
          description: OK â€“ Everything is working.
        '304':
          description: Not Modified â€“ The client can use cached data.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires a user.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific veteraninfo specified by the URI resource
        parameter/ID.
      operationId: PUT_clients-clientid-veteraninfos-veteraninfoid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "veteranInfo"
                  ],
                  "properties": {
                    "veteranInfo": {
                      "type": "object",
                      "required": [
                        "yearEntrdService",
                        "yearSeperated",
                        "worldWar2",
                        "koreanWar",
                        "vietnamWar",
                        "desertStorm",
                        "afghanistanOef",
                        "iraqOif",
                        "iraqOnd",
                        "otherTheater",
                        "militaryBranch",
                        "dischargeStatus"
                      ],
                      "properties": {
                        "yearEntrdService": {
                          "type": "integer"
                        },
                        "yearSeperated": {
                          "type": "integer"
                        },
                        "worldWar2": {
                          "type": "integer"
                        },
                        "koreanWar": {
                          "type": "integer"
                        },
                        "vietnamWar": {
                          "type": "integer"
                        },
                        "desertStorm": {
                          "type": "integer"
                        },
                        "afghanistanOef": {
                          "type": "integer"
                        },
                        "iraqOif": {
                          "type": "integer"
                        },
                        "iraqOnd": {
                          "type": "integer"
                        },
                        "otherTheater": {
                          "type": "integer"
                        },
                        "militaryBranch": {
                          "type": "integer"
                        },
                        "dischargeStatus": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  veteranInfo:
                    yearEntrdService: 1164728538
                    yearSeperated: -410173299
                    worldWar2: 1
                    koreanWar: 8
                    vietnamWar: 9
                    desertStorm: 8
                    afghanistanOef: 99
                    iraqOif: 1
                    iraqOnd: 1
                    otherTheater: 9
                    militaryBranch: 2
                    dischargeStatus: 5
        required: true
    delete:
      responses:
        '204':
          description: OK â€“ The resource was successfully deleted.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific veteraninfo specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-veteraninfos-veteraninfoid
    parameters:
      - name: veteraninfoid
        in: path
        required: true
        schema:
          type: string
        description: Veteraninfo Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/veteraninfos/{veteraninfoid}/history':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "veteranInfos"
                    ],
                    "properties": {
                      "veteranInfos": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "veteranInfos"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "veteranInfos": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "veteranInfoId",
                                "yearEntrdService",
                                "yearSeperated",
                                "worldWar2",
                                "koreanWar",
                                "vietnamWar",
                                "desertStorm",
                                "afghanistanOef",
                                "iraqOif",
                                "iraqOnd",
                                "otherTheater",
                                "militaryBranch",
                                "dischargeStatus"
                              ],
                              "properties": {
                                "veteranInfoId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "yearEntrdService": {
                                  "type": "integer"
                                },
                                "yearSeperated": {
                                  "type": "integer"
                                },
                                "worldWar2": {
                                  "type": "integer"
                                },
                                "koreanWar": {
                                  "type": "integer"
                                },
                                "vietnamWar": {
                                  "type": "integer"
                                },
                                "desertStorm": {
                                  "type": "integer"
                                },
                                "afghanistanOef": {
                                  "type": "integer"
                                },
                                "iraqOif": {
                                  "type": "integer"
                                },
                                "iraqOnd": {
                                  "type": "integer"
                                },
                                "otherTheater": {
                                  "type": "integer"
                                },
                                "militaryBranch": {
                                  "type": "integer"
                                },
                                "dischargeStatus": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    veteranInfos:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      veteranInfos:
                        - veteranInfoId: d0f7f763-dba8-4bc5-9602-d6e3775c59d3
                          yearEntrdService: 1164728538
                          yearSeperated: -410173299
                          worldWar2: 1
                          koreanWar: 8
                          vietnamWar: 9
                          desertStorm: 8
                          afghanistanOef: 99
                          iraqOif: 1
                          iraqOnd: 1
                          otherTheater: 9
                          militaryBranch: 2
                          dischargeStatus: 5
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for veteraninfo history.  Returns a list of veteraninfo ids history, based on
        the query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-veteraninfos-veteraninfoid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
        - name: veteraninfoid
          in: path
          required: true
          schema:
            type: string
          description: Veteraninfo Identifier
        - name: clientid
          in: path
          required: true
          schema:
            type: string
          description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exits"
                    ],
                    "properties": {
                      "exits": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "exits"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "exits": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "exitId",
                                "exitDate",
                                "otherDestination",
                                "destination",
                                "dateCreated"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "exitId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "exitDate": {
                                  "type": "integer"
                                },
                                "otherDestination": {
                                  "type": "string",
                                },
                                "destination": {
                                  "type": "integer"
                                },
                                "dateCreated": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    exits:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      exits:
                        - links:
                          - rel: history
                            href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/exits/89c350f4-9165-4898-bb8b-f8b096a1aa2d/history"
                          exitId: 89c350f4-9165-4898-bb8b-f8b096a1aa2d
                          exitDate: 1459518853883
                          otherDestination: TWENTY_FOUR
                          destination: 6
                          dateCreated: 05-11-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for exit.  Returns a list of exit ids, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-exits
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exit"
                    ],
                    "properties": {
                      "exit": {
                        "type": "object",
                        "required": [
                          "exitId",
                          "exitDate",
                          "otherDestination",
                          "destination",
                          "dateCreated",
                          "dateUpdated"
                        ],
                        "properties": {
                          "exitId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "exitDate": {
                            "type": "integer"
                          },
                          "otherDestination": {
                            "type": "string",
                          },
                          "destination": {
                            "type": "integer"
                          },
                          "dateCreated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dateUpdated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                  exit:
                    exitId: 89c350f4-9165-4898-bb8b-f8b096a1aa2d
                    exitDate: 1459518853883
                    otherDestination: TWENTY_FOUR
                    destination: 6
                    dateCreated: 05-11-2016
                    dateUpdated: 05-11-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found â€“ There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a exit
      operationId: POST_clients-clientid-enrollments-enrollmentid-exits
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "exit"
                  ],
                  "properties": {
                    "exit": {
                      "type": "object",
                      "required": [
                        "exitDate",
                        "otherDestination",
                        "destination"
                      ],
                      "properties": {
                        "exitDate": {
                          "type": "integer"
                        },
                        "otherDestination": {
                          "type": "string",
                        },
                        "destination": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  exit:
                    exitDate: 1459518853883
                    otherDestination: TWENTY_FOUR
                    destination: 6
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}':
    get:
      parameters:
      - name: includeChildLinks
        in: query
        required: false
        schema:
          type: boolean
        description: >-
          To include exit child entity links in the response this flag must be set true. default value of this flag is false. The exit child entity links, will be grouped by dataCollectionStage and then infromationDate or updatedDate (if informationDate is not available). If dataCollectionStage is not available child entity links will be categorized as unassgined
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exit"
                    ],
                    "properties": {
                      "exit": {
                        "type": "object",
                        "required": [
                          "exitId",
                          "exitDate",
                          "otherDestination",
                          "destination",
                          "dateCreated",
                          "dateUpdated"
                        ],
                        "properties": {
                          "exitId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "exitDate": {
                            "type": "integer"
                          },
                          "otherDestination": {
                            "type": "string",
                          },
                          "destination": {
                            "type": "integer"
                          },
                          "dateCreated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dateUpdated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "exitLinks": {
                              "type": "object",
                              "required": [
                                "unspecified_stage"
                              ],
                              "properties": {
                                "unspecified_stage": {
                                  "type": "object",
                                  "required": [
                                    "2018-09-25T09:50",
                                    "2018-09-25T09:51"
                                  ],
                                  "properties": {
                                    "2018-09-25T09:50": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "data",
                                          "groupBy"
                                        ],
                                        "properties": {
                                          "data": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "required": [
                                                "rel",
                                                "href",
                                                "exitHousingAssessments"
                                              ],
                                              "properties": {
                                                "rel": {
                                                  "type": "string",
                                                  "format": "uuid",
                                                },
                                                "href": {
                                                  "type": "string",
                                                },
                                                "exitHousingAssessments": {
                                                  "type": "object",
                                                  "required": [
                                                    "unspecified_stage"
                                                  ],
                                                  "properties": {
                                                    "unspecified_stage": {
                                                      "type": "object",
                                                      "required": [
                                                        "2018-09-25T09:50"
                                                      ],
                                                      "properties": {
                                                        "2018-09-25T09:50": {
                                                          "type": "array",
                                                          "items": {
                                                            "type": "object",
                                                            "required": [
                                                              "data",
                                                              "groupBy"
                                                            ],
                                                            "properties": {
                                                              "data": {
                                                                "type": "array",
                                                                "items": {
                                                                  "type": "object",
                                                                  "required": [
                                                                    "rel",
                                                                    "href"
                                                                  ],
                                                                  "properties": {
                                                                    "rel": {
                                                                      "type": "string",
                                                                      "format": "uuid",
                                                                    },
                                                                    "href": {
                                                                      "type": "string",
                                                                    }
                                                                  }
                                                                }
                                                              },
                                                              "groupBy": {
                                                                "type": "string",
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "groupBy": {
                                            "type": "string",
                                          }
                                        }
                                      }
                                    },
                                    "2018-09-25T09:51": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "data",
                                          "groupBy"
                                        ],
                                        "properties": {
                                          "data": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "required": [
                                                "rel",
                                                "href",
                                                "exitHousingAssessments"
                                              ],
                                              "properties": {
                                                "rel": {
                                                  "type": "string",
                                                  "format": "uuid",
                                                },
                                                "href": {
                                                  "type": "string",
                                                },
                                                "exitHousingAssessments": {
                                                  "type": "object",
                                                  "required": [
                                                    "unspecified_stage"
                                                  ],
                                                  "properties": {
                                                    "unspecified_stage": {
                                                      "type": "object",
                                                      "required": [
                                                        "2018-09-25T09:51"
                                                      ],
                                                      "properties": {
                                                        "2018-09-25T09:51": {
                                                          "type": "array",
                                                          "items": {
                                                            "type": "object",
                                                            "required": [
                                                              "data",
                                                              "groupBy"
                                                            ],
                                                            "properties": {
                                                              "data": {
                                                                "type": "array",
                                                                "items": {
                                                                  "type": "object",
                                                                  "required": [
                                                                    "rel",
                                                                    "href"
                                                                  ],
                                                                  "properties": {
                                                                    "rel": {
                                                                      "type": "string",
                                                                      "format": "uuid",
                                                                    },
                                                                    "href": {
                                                                      "type": "string",
                                                                    }
                                                                  }
                                                                }
                                                              },
                                                              "groupBy": {
                                                                "type": "string",
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "groupBy": {
                                            "type": "string",
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                        }
                      }
                    }
                  }
                example:
                    exit:
                      exitId: 89c350f4-9165-4898-bb8b-f8b096a1aa2d
                      exitDate: 1459518853883
                      otherDestination: TWENTY_FOUR
                      destination: 6
                      dateCreated: 05-11-2020
                      dateUpdated: 05-11-2020
                      exitLinks:
                        unspecified_stage:
                          2018-09-25T09:50:
                          - data:
                            - rel: 28e48aec-82e0-48ff-918b-493825cdea18
                              href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/exits/28e48aec-82e0-48ff-918b-493825cdea18"
                              exitHousingAssessments:
                                unspecified_stage:
                                  2018-09-25T09:50:
                                  - data:
                                    - rel: 2cd01b48-c7e8-4e2a-90ff-144174c60757
                                      href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/exits/28e48aec-82e0-48ff-918b-493825cdea18/exithousingassessments/2cd01b48-c7e8-4e2a-90ff-144174c60757"
                                    groupBy: dateUpdated
                            groupBy: dateUpdated
                          2018-09-25T09:51:
                          - data:
                            - rel: 3ed58fa0-b406-4ee0-86ad-32de911407ad
                              href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/exits/3ed58fa0-b406-4ee0-86ad-32de911407ad"
                              exitHousingAssessments:
                                unspecified_stage:
                                  2018-09-25T09:51:
                                  - data:
                                    - rel: 3bdb1ef3-52e4-4bf7-b492-2a7afb600d47
                                      href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/exits/3ed58fa0-b406-4ee0-86ad-32de911407ad/exithousingassessments/3bdb1ef3-52e4-4bf7-b492-2a7afb600d47"
                                    groupBy: dateUpdated
                            - rel: 473f41ca-4a77-491f-aec8-a9765dff9012
                              href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/exits/473f41ca-4a77-491f-aec8-a9765dff9012"
                              exitHousingAssessments:
                                unspecified_stage:
                                  2018-09-25T09:51:
                                  - data:
                                    - rel: 099359fe-36a3-4d09-9029-35c4b6938e58
                                      href: "/hmis-clientapi/rest/v2015/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/exits/473f41ca-4a77-491f-aec8-a9765dff9012/exithousingassessments/099359fe-36a3-4d09-9029-35c4b6938e58"
                                    groupBy: dateUpdated
                            groupBy: dateUpdated
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires an user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a exit using a URI resource parameter/ID.
      operationId: GET_clients-clientid-enrollments-enrollmentid-exits-exitid
    put:
      responses:
        '200':
          description: OK â€“ Everything is working.
        '304':
          description: Not Modified â€“ The client can use cached data.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires a user.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Updates a specific exit specified by the URI resource parameter/ID.
      operationId: PUT_clients-clientid-enrollments-enrollmentid-exits-exitid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "exit"
                  ],
                  "properties": {
                    "exit": {
                      "type": "object",
                      "required": [
                        "exitDate",
                        "otherDestination",
                        "destination"
                      ],
                      "properties": {
                        "exitDate": {
                          "type": "integer"
                        },
                        "otherDestination": {
                          "type": "string",
                        },
                        "destination": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  exit:
                    exitDate: 1459518853883
                    otherDestination: TWENTY_FOUR
                    destination: 6
        required: true
    delete:
      responses:
        '204':
          description: OK â€“ The resource was successfully deleted.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific exit specified by the URI resource parameter/ID.
      operationId: DELETE_clients-clientid-enrollments-enrollmentid-exits-exitid
    parameters:
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/history':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exits"
                    ],
                    "properties": {
                      "exits": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "exits"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "exits": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "exitId",
                                "exitDate",
                                "otherDestination",
                                "destination",
                                "dateCreated"
                              ],
                              "properties": {
                                "exitId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "exitDate": {
                                  "type": "integer"
                                },
                                "otherDestination": {
                                  "type": "string",
                                },
                                "destination": {
                                  "type": "integer"
                                },
                                "dateCreated": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    exits:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      exits:
                        - exitId: 89c350f4-9165-4898-bb8b-f8b096a1aa2d
                          exitDate: 1459518853883
                          otherDestination: TWENTY_FOUR
                          destination: 6
                          dateCreated: 05-11-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for exit history.  Returns a list of exit ids history, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-exits-exitid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/exithousingassesments':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exithousingassessments"
                    ],
                    "properties": {
                      "exithousingassessments": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "exithousingassessments"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "exithousingassessments": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "exithousingassessmentId",
                                "housingassessment",
                                "subsidyinformation"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "exithousingassessmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "housingassessment": {
                                  "type": "integer"
                                },
                                "subsidyinformation": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    exithousingassessments:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      exithousingassessments:
                        - links:
                          - rel: history
                            href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/exits/89c350f4-9165-4898-bb8b-f8b096a1aa2d/exithousingassesments/a45e96ba-0287-4c9f-a1c2-5058a4acc1aa/history"
                          exithousingassessmentId: a45e96ba-0287-4c9f-a1c2-5058a4acc1aa
                          housingassessment: 5
                          subsidyinformation: 4
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for exithousingassesment.  Returns a list of
        exithousingassesment ids, based on the query parameters sent.  The query
        parameters are cumulative, so each additional query parameter narrows
        the search down further.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-exits-exitid-exithousingassesments
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exithousingassessment"
                    ],
                    "properties": {
                      "exithousingassessment": {
                        "type": "object",
                        "required": [
                          "exithousingassessmentId",
                          "housingassessment",
                          "subsidyinformation"
                        ],
                        "properties": {
                          "exithousingassessmentId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "housingassessment": {
                            "type": "integer"
                          },
                          "subsidyinformation": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                  exithousingassessment:
                    exithousingassessmentId: a45e96ba-0287-4c9f-a1c2-5058a4acc1aa
                    housingassessment: 5
                    subsidyinformation: 4
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found â€“ There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a exithousingassesment
      operationId: >-
        POST_clients-clientid-enrollments-enrollmentid-exits-exitid-exithousingassesments
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "exithousingassessment"
                  ],
                  "properties": {
                    "exithousingassessment": {
                      "type": "object",
                      "required": [
                        "housingassessment",
                        "subsidyinformation"
                      ],
                      "properties": {
                        "housingassessment": {
                          "type": "integer"
                        },
                        "subsidyinformation": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  exithousingassessment:
                    housingassessment: 5
                    subsidyinformation: 4
        required: true
    parameters:
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/exithousingassesments/{exithousingassesmentid}':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exithousingassessment"
                    ],
                    "properties": {
                      "exithousingassessment": {
                        "type": "object",
                        "required": [
                          "links",
                          "exithousingassessmentId",
                          "housingassessment",
                          "subsidyinformation"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "exithousingassessmentId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "housingassessment": {
                            "type": "integer"
                          },
                          "subsidyinformation": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                    exithousingassessment:
                        links:
                        - rel: history
                          href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/exits/89c350f4-9165-4898-bb8b-f8b096a1aa2d/exithousingassesments/a45e96ba-0287-4c9f-a1c2-5058a4acc1aa/history"
                        exithousingassessmentId: a45e96ba-0287-4c9f-a1c2-5058a4acc1aa
                        housingassessment: 5
                        subsidyinformation: 4
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires an user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a exithousingassesment using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-exits-exitid-exithousingassesments-exithousingassesmentid
    put:
      responses:
        '200':
          description: OK â€“ Everything is working.
        '304':
          description: Not Modified â€“ The client can use cached data.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires a user.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific exithousingassesment specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-exits-exitid-exithousingassesments-exithousingassesmentid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "exithousingassessment"
                  ],
                  "properties": {
                    "exithousingassessment": {
                      "type": "object",
                      "required": [
                        "housingassessment",
                        "subsidyinformation"
                      ],
                      "properties": {
                        "housingassessment": {
                          "type": "integer"
                        },
                        "subsidyinformation": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  exithousingassessment:
                    housingassessment: 5
                    subsidyinformation: 4
        required: true
    delete:
      responses:
        '204':
          description: OK â€“ The resource was successfully deleted.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific exithousingassesment specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-exits-exitid-exithousingassesments-exithousingassesmentid
    parameters:
      - name: exithousingassesmentid
        in: path
        required: true
        schema:
          type: string
        description: Exithousingassesment Identifier
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/exithousingassesments/{exithousingassesmentid}/history':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exithousingassessments"
                    ],
                    "properties": {
                      "exithousingassessments": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "exithousingassessments"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "exithousingassessments": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "exithousingassessmentId",
                                "housingassessment",
                                "subsidyinformation"
                              ],
                              "properties": {
                                "exithousingassessmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "housingassessment": {
                                  "type": "integer"
                                },
                                "subsidyinformation": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    exithousingassessments:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      exithousingassessments:
                        - exithousingassessmentId: a45e96ba-0287-4c9f-a1c2-5058a4acc1aa
                          housingassessment: 5
                          subsidyinformation: 4
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for exithousingassesment history.  Returns a list of
        exithousingassesment ids history, based on the query parameters sent.  The query
        parameters are cumulative, so each additional query parameter narrows
        the search down further.
      operationId:
        GET_clients-clientid-enrollments-enrollmentid-exits-exitid-exithousingassesments-exithousingassesmentid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: exithousingassesmentid
        in: path
        required: true
        schema:
          type: string
        description: Exithousingassesment Identifier
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/housingassessmentdispositions':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "HousingAssessmentDispositions"
                    ],
                    "properties": {
                      "HousingAssessmentDispositions": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "housingAssessmentDispositions"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "housingAssessmentDispositions": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "housingAssessmentDispositionId",
                                "assessmentdisposition",
                                "otherdisposition",
                                "dateCreated"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "housingAssessmentDispositionId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "assessmentdisposition": {
                                  "type": "integer"
                                },
                                "otherdisposition": {
                                  "type": "string",
                                },
                                "dateCreated": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    HousingAssessmentDispositions:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      housingAssessmentDispositions:
                        - links:
                          - rel: history
                            href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/exits/89c350f4-9165-4898-bb8b-f8b096a1aa2d/housingassessmentdispositions/c08b6685-c03e-4151-87dc-34f367a4a968/history"
                          housingAssessmentDispositionId: c08b6685-c03e-4151-87dc-34f367a4a968
                          assessmentdisposition: 3
                          otherdisposition: lAP0q07uSY
                          dateCreated: 05-11-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for housingassessmentdisposition.  Returns a list of
        housingassessmentdisposition ids, based on the query parameters sent.
        The query parameters are cumulative, so each additional query parameter
        narrows the search down further.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-exits-exitid-housingassessmentdispositions
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "housingAssessmentDisposition"
                    ],
                    "properties": {
                      "housingAssessmentDisposition": {
                        "type": "object",
                        "required": [
                          "housingAssessmentDispositionId",
                          "assessmentdisposition",
                          "otherdisposition",
                          "dateCreated",
                          "dateUpdated"
                        ],
                        "properties": {
                          "housingAssessmentDispositionId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "assessmentdisposition": {
                            "type": "integer"
                          },
                          "otherdisposition": {
                            "type": "string",
                          },
                          "dateCreated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dateUpdated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                  housingAssessmentDisposition:
                    housingAssessmentDispositionId: c08b6685-c03e-4151-87dc-34f367a4a968
                    assessmentdisposition: 3
                    otherdisposition: lAP0q07uSYlSKUifs
                    dateCreated: 05-11-2016
                    dateUpdated: 05-11-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found â€“ There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a housingassessmentdisposition
      operationId: >-
        POST_clients-clientid-enrollments-enrollmentid-exits-exitid-housingassessmentdispositions
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "housingAssessmentDisposition"
                  ],
                  "properties": {
                    "housingAssessmentDisposition": {
                      "type": "object",
                      "required": [
                        "assessmentdisposition",
                        "otherdisposition"
                      ],
                      "properties": {
                        "assessmentdisposition": {
                          "type": "integer"
                        },
                        "otherdisposition": {
                          "type": "string",
                        }
                      }
                    }
                  }
                }
              example:
                  housingAssessmentDisposition:
                    assessmentdisposition: 3
                    otherdisposition: lAP0q07uSY
        required: true
    parameters:
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/housingassessmentdispositions/{housingassessmentdispositionid}':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "housingAssessmentDisposition"
                    ],
                    "properties": {
                      "housingAssessmentDisposition": {
                        "type": "object",
                        "required": [
                          "links",
                          "housingAssessmentDispositionId",
                          "assessmentdisposition",
                          "otherdisposition",
                          "dateCreated",
                          "dateUpdated"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "housingAssessmentDispositionId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "assessmentdisposition": {
                            "type": "integer"
                          },
                          "otherdisposition": {
                            "type": "string",
                          },
                          "dateCreated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dateUpdated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                    housingAssessmentDisposition:
                        links:
                        - rel: history
                          href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/exits/89c350f4-9165-4898-bb8b-f8b096a1aa2d/housingassessmentdispositions/c08b6685-c03e-4151-87dc-34f367a4a968/history"
                        housingAssessmentDispositionId: c08b6685-c03e-4151-87dc-34f367a4a968
                        assessmentdisposition: 3
                        otherdisposition: lAP0q07uSYlSKUifs
                        dateCreated: 05-11-2016
                        dateUpdated: 05-11-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires an user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a housingassessmentdisposition using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-exits-exitid-housingassessmentdispositions-housingassessmentdispositionid
    put:
      responses:
        '200':
          description: OK â€“ Everything is working.
        '304':
          description: Not Modified â€“ The client can use cached data.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires a user.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific housingassessmentdisposition specified by the URI
        resource parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-exits-exitid-housingassessmentdispositions-housingassessmentdispositionid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "housingAssessmentDisposition"
                  ],
                  "properties": {
                    "housingAssessmentDisposition": {
                      "type": "object",
                      "required": [
                        "assessmentdisposition",
                        "otherdisposition"
                      ],
                      "properties": {
                        "assessmentdisposition": {
                          "type": "integer"
                        },
                        "otherdisposition": {
                          "type": "string",
                        }
                      }
                    }
                  }
                }
              example:
                  housingAssessmentDisposition:
                    assessmentdisposition: 3
                    otherdisposition: lAP0q07uSY
        required: true
    delete:
      responses:
        '204':
          description: OK â€“ The resource was successfully deleted.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific housingassessmentdisposition specified by the URI
        resource parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-exits-exitid-housingassessmentdispositions-housingassessmentdispositionid
    parameters:
      - name: housingassessmentdispositionid
        in: path
        required: true
        schema:
          type: string
        description: Housingassessmentdisposition Identifier
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/housingassessmentdispositions/{housingassessmentdispositionid}/history':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "HousingAssessmentDispositions"
                    ],
                    "properties": {
                      "HousingAssessmentDispositions": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "housingAssessmentDispositions"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "housingAssessmentDispositions": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "housingAssessmentDispositionId",
                                "assessmentdisposition",
                                "otherdisposition",
                                "dateCreated"
                              ],
                              "properties": {
                                "housingAssessmentDispositionId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "assessmentdisposition": {
                                  "type": "integer"
                                },
                                "otherdisposition": {
                                  "type": "string",
                                },
                                "dateCreated": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    HousingAssessmentDispositions:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      housingAssessmentDispositions:
                        - housingAssessmentDispositionId: c08b6685-c03e-4151-87dc-34f367a4a968
                          assessmentdisposition: 3
                          otherdisposition: lAP0q07uSY
                          dateCreated: 05-11-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for housingassessmentdisposition history.  Returns a list of
        housingassessmentdisposition ids history, based on the query parameters sent.
        The query parameters are cumulative, so each additional query parameter
        narrows the search down further.
      operationId:
        GET_clients-clientid-enrollments-enrollmentid-exits-exitid-housingassessmentdispositions-housingassessmentdispositionid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: housingassessmentdispositionid
        in: path
        required: true
        schema:
          type: string
        description: Housingassessmentdisposition Identifier
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/exitpaths':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exitpaths"
                    ],
                    "properties": {
                      "exitpaths": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "exitpaths"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "exitpaths": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "exitpathId",
                                "connectionWithSoar"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "exitpathId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "connectionWithSoar": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    exitpaths:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      exitpaths:
                        - links:
                          - rel: history
                            href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/exits/89c350f4-9165-4898-bb8b-f8b096a1aa2d/exitpaths/46b4e67b-08f4-4962-9a1e-3ff614aaea23/history"
                          exitpathId: 46b4e67b-08f4-4962-9a1e-3ff614aaea23
                          connectionWithSoar: 9
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for exitpath.  Returns a list of exitpath ids, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-exits-exitid-exitpaths
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exitpath"
                    ],
                    "properties": {
                      "exitpath": {
                        "type": "object",
                        "required": [
                          "exitpathId"
                        ],
                        "properties": {
                          "exitpathId": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                  exitpath:
                    exitpathId: 46b4e67b-08f4-4962-9a1e-3ff614aaea23
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found â€“ There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a exitpath
      operationId: POST_clients-clientid-enrollments-enrollmentid-exits-exitid-exitpaths
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "exitpath"
                  ],
                  "properties": {
                    "exitpath": {
                      "type": "object",
                      "required": [
                        "connectionWithSoar"
                      ],
                      "properties": {
                        "connectionWithSoar": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  exitpath:
                    connectionWithSoar: 9
        required: true
    parameters:
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/exitpaths/{exitpathid}':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exitpath"
                    ],
                    "properties": {
                      "exitpath": {
                        "type": "object",
                        "required": [
                          "links",
                          "exitpathId"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "exitpathId": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                    exitpath:
                        links:
                        - rel: history
                          href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/exits/89c350f4-9165-4898-bb8b-f8b096a1aa2d/exitpaths/46b4e67b-08f4-4962-9a1e-3ff614aaea23/history"
                        exitpathId: 46b4e67b-08f4-4962-9a1e-3ff614aaea23
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires an user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a exitpath using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-exits-exitid-exitpaths-exitpathid
    put:
      responses:
        '200':
          description: OK â€“ Everything is working.
        '304':
          description: Not Modified â€“ The client can use cached data.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires a user.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Updates a specific exitpath specified by the URI resource parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-exits-exitid-exitpaths-exitpathid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "exitpath"
                  ],
                  "properties": {
                    "exitpath": {
                      "type": "object",
                      "required": [
                        "connectionWithSoar"
                      ],
                      "properties": {
                        "connectionWithSoar": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  exitpath:
                    connectionWithSoar: 9
        required: true
    delete:
      responses:
        '204':
          description: OK â€“ The resource was successfully deleted.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific exitpath specified by the URI resource parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-exits-exitid-exitpaths-exitpathid
    parameters:
      - name: exitpathid
        in: path
        required: true
        schema:
          type: string
        description: Exitpath Identifier
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/exitpaths/{exitpathid}/history':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exitpaths"
                    ],
                    "properties": {
                      "exitpaths": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "exitpaths"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "exitpaths": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "exitpathId",
                                "connectionWithSoar"
                              ],
                              "properties": {
                                "exitpathId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "connectionWithSoar": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    exitpaths:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      exitpaths:
                        - exitpathId: 46b4e67b-08f4-4962-9a1e-3ff614aaea23
                          connectionWithSoar: 9
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for exitpath history.  Returns a list of exitpath ids history, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-exits-exitid-exitpaths-exitpathid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: exitpathid
        in: path
        required: true
        schema:
          type: string
        description: Exitpath Identifier
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/exitrhys':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exitrhys"
                    ],
                    "properties": {
                      "exitrhys": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "exitrhys"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "exitrhys": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "exitrhyId",
                                "projectCompletionStatus",
                                "earlyExitReason",
                                "familyReunificationAchieved",
                                "writtenAfterCarePlan",
                                "assistanceMainStreamBenefits",
                                "permenantHousingPlacement",
                                "tempShelterPlacement",
                                "exitCounseling",
                                "furtherFollowupServices",
                                "scheduledFollowupContacts",
                                "resourcePackage",
                                "otherAftercarePlanOrAction"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "exitrhyId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "projectCompletionStatus": {
                                  "type": "integer"
                                },
                                "earlyExitReason": {
                                  "type": "integer"
                                },
                                "familyReunificationAchieved": {
                                  "type": "integer"
                                },
                                "writtenAfterCarePlan": {
                                  "type": "integer"
                                },
                                "assistanceMainStreamBenefits": {
                                  "type": "integer"
                                },
                                "permenantHousingPlacement": {
                                  "type": "integer"
                                },
                                "tempShelterPlacement": {
                                  "type": "integer"
                                },
                                "exitCounseling": {
                                  "type": "integer"
                                },
                                "furtherFollowupServices": {
                                  "type": "integer"
                                },
                                "scheduledFollowupContacts": {
                                  "type": "integer"
                                },
                                "resourcePackage": {
                                  "type": "integer"
                                },
                                "otherAftercarePlanOrAction": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    exitrhys:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      exitrhys:
                        - links:
                          - rel: history
                            href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/exits/89c350f4-9165-4898-bb8b-f8b096a1aa2d/exitrhys/878d7b3f-91d8-4a5d-9eba-81b081f0a9f8/history"
                          exitrhyId: 878d7b3f-91d8-4a5d-9eba-81b081f0a9f8
                          projectCompletionStatus: 3
                          earlyExitReason: 1
                          familyReunificationAchieved: 0
                          writtenAfterCarePlan: 2
                          assistanceMainStreamBenefits: 0
                          permenantHousingPlacement: 1
                          tempShelterPlacement: 2
                          exitCounseling: 0
                          furtherFollowupServices: 1
                          scheduledFollowupContacts: 1
                          resourcePackage: 1
                          otherAftercarePlanOrAction: 2
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for exitrhy.  Returns a list of exitrhy ids, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-exits-exitid-exitrhys
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exitrhy"
                    ],
                    "properties": {
                      "exitrhy": {
                        "type": "object",
                        "required": [
                          "exitrhyId",
                          "projectCompletionStatus",
                          "earlyExitReason",
                          "familyReunificationAchieved",
                          "writtenAfterCarePlan",
                          "assistanceMainStreamBenefits",
                          "permenantHousingPlacement",
                          "tempShelterPlacement",
                          "exitCounseling",
                          "furtherFollowupServices",
                          "scheduledFollowupContacts",
                          "resourcePackage",
                          "otherAftercarePlanOrAction"
                        ],
                        "properties": {
                          "exitrhyId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "projectCompletionStatus": {
                            "type": "integer"
                          },
                          "earlyExitReason": {
                            "type": "integer"
                          },
                          "familyReunificationAchieved": {
                            "type": "integer"
                          },
                          "writtenAfterCarePlan": {
                            "type": "integer"
                          },
                          "assistanceMainStreamBenefits": {
                            "type": "integer"
                          },
                          "permenantHousingPlacement": {
                            "type": "integer"
                          },
                          "tempShelterPlacement": {
                            "type": "integer"
                          },
                          "exitCounseling": {
                            "type": "integer"
                          },
                          "furtherFollowupServices": {
                            "type": "integer"
                          },
                          "scheduledFollowupContacts": {
                            "type": "integer"
                          },
                          "resourcePackage": {
                            "type": "integer"
                          },
                          "otherAftercarePlanOrAction": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                  exitrhy:
                    exitrhyId: 878d7b3f-91d8-4a5d-9eba-81b081f0a9f8
                    projectCompletionStatus: 3
                    earlyExitReason: 1
                    familyReunificationAchieved: 0
                    writtenAfterCarePlan: 2
                    assistanceMainStreamBenefits: 0
                    permenantHousingPlacement: 1
                    tempShelterPlacement: 2
                    exitCounseling: 1
                    furtherFollowupServices: 1
                    scheduledFollowupContacts: 2
                    resourcePackage: 1
                    otherAftercarePlanOrAction: 2
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found â€“ There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a exitrhy
      operationId: POST_clients-clientid-enrollments-enrollmentid-exits-exitid-exitrhys
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "exitrhy"
                  ],
                  "properties": {
                    "exitrhy": {
                      "type": "object",
                      "required": [
                        "projectCompletionStatus",
                        "earlyExitReason",
                        "familyReunificationAchieved",
                        "writtenAfterCarePlan",
                        "assistanceMainStreamBenefits",
                        "permenantHousingPlacement",
                        "tempShelterPlacement",
                        "exitCounseling",
                        "furtherFollowupServices",
                        "scheduledFollowupContacts",
                        "resourcePackage",
                        "otherAftercarePlanOrAction"
                      ],
                      "properties": {
                        "projectCompletionStatus": {
                          "type": "integer"
                        },
                        "earlyExitReason": {
                          "type": "integer"
                        },
                        "familyReunificationAchieved": {
                          "type": "integer"
                        },
                        "writtenAfterCarePlan": {
                          "type": "integer"
                        },
                        "assistanceMainStreamBenefits": {
                          "type": "integer"
                        },
                        "permenantHousingPlacement": {
                          "type": "integer"
                        },
                        "tempShelterPlacement": {
                          "type": "integer"
                        },
                        "exitCounseling": {
                          "type": "integer"
                        },
                        "furtherFollowupServices": {
                          "type": "integer"
                        },
                        "scheduledFollowupContacts": {
                          "type": "integer"
                        },
                        "resourcePackage": {
                          "type": "integer"
                        },
                        "otherAftercarePlanOrAction": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  exitrhy:
                    projectCompletionStatus: 3
                    earlyExitReason: 1
                    familyReunificationAchieved: 0
                    writtenAfterCarePlan: 2
                    assistanceMainStreamBenefits: 0
                    permenantHousingPlacement: 1
                    tempShelterPlacement: 2
                    exitCounseling: 0
                    furtherFollowupServices: 1
                    scheduledFollowupContacts: 1
                    resourcePackage: 1
                    otherAftercarePlanOrAction: 2
        required: true
    parameters:
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/exitrhys/{exitrhyid}':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exitrhy"
                    ],
                    "properties": {
                      "exitrhy": {
                        "type": "object",
                        "required": [
                          "links",
                          "exitrhyId",
                          "projectCompletionStatus",
                          "earlyExitReason",
                          "familyReunificationAchieved",
                          "writtenAfterCarePlan",
                          "assistanceMainStreamBenefits",
                          "permenantHousingPlacement",
                          "tempShelterPlacement",
                          "exitCounseling",
                          "furtherFollowupServices",
                          "scheduledFollowupContacts",
                          "resourcePackage",
                          "otherAftercarePlanOrAction"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "exitrhyId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "projectCompletionStatus": {
                            "type": "integer"
                          },
                          "earlyExitReason": {
                            "type": "integer"
                          },
                          "familyReunificationAchieved": {
                            "type": "integer"
                          },
                          "writtenAfterCarePlan": {
                            "type": "integer"
                          },
                          "assistanceMainStreamBenefits": {
                            "type": "integer"
                          },
                          "permenantHousingPlacement": {
                            "type": "integer"
                          },
                          "tempShelterPlacement": {
                            "type": "integer"
                          },
                          "exitCounseling": {
                            "type": "integer"
                          },
                          "furtherFollowupServices": {
                            "type": "integer"
                          },
                          "scheduledFollowupContacts": {
                            "type": "integer"
                          },
                          "resourcePackage": {
                            "type": "integer"
                          },
                          "otherAftercarePlanOrAction": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                    exitrhy:
                        links:
                        - rel: history
                          href: "/clients/8547a63e-4659-412f-b5fa-200e03b62ae8/enrollments/cc1da849-b877-4455-ab44-84bdb9991f97/exits/89c350f4-9165-4898-bb8b-f8b096a1aa2d/exitrhys/878d7b3f-91d8-4a5d-9eba-81b081f0a9f8/history"
                        exitrhyId: 878d7b3f-91d8-4a5d-9eba-81b081f0a9f8
                        projectCompletionStatus: 3
                        earlyExitReason: 1
                        familyReunificationAchieved: 0
                        writtenAfterCarePlan: 2
                        assistanceMainStreamBenefits: 0
                        permenantHousingPlacement: 1
                        tempShelterPlacement: 2
                        exitCounseling: 1
                        furtherFollowupServices: 1
                        scheduledFollowupContacts: 2
                        resourcePackage: 1
                        otherAftercarePlanOrAction: 2
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires an user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a exitrhy using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-exits-exitid-exitrhys-exitrhyid
    put:
      responses:
        '200':
          description: OK â€“ Everything is working.
        '304':
          description: Not Modified â€“ The client can use cached data.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires a user.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Updates a specific exitrhy specified by the URI resource parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-exits-exitid-exitrhys-exitrhyid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "exitrhy"
                  ],
                  "properties": {
                    "exitrhy": {
                      "type": "object",
                      "required": [
                        "projectCompletionStatus",
                        "earlyExitReason",
                        "familyReunificationAchieved",
                        "writtenAfterCarePlan",
                        "assistanceMainStreamBenefits",
                        "permenantHousingPlacement",
                        "tempShelterPlacement",
                        "exitCounseling",
                        "furtherFollowupServices",
                        "scheduledFollowupContacts",
                        "resourcePackage",
                        "otherAftercarePlanOrAction"
                      ],
                      "properties": {
                        "projectCompletionStatus": {
                          "type": "integer"
                        },
                        "earlyExitReason": {
                          "type": "integer"
                        },
                        "familyReunificationAchieved": {
                          "type": "integer"
                        },
                        "writtenAfterCarePlan": {
                          "type": "integer"
                        },
                        "assistanceMainStreamBenefits": {
                          "type": "integer"
                        },
                        "permenantHousingPlacement": {
                          "type": "integer"
                        },
                        "tempShelterPlacement": {
                          "type": "integer"
                        },
                        "exitCounseling": {
                          "type": "integer"
                        },
                        "furtherFollowupServices": {
                          "type": "integer"
                        },
                        "scheduledFollowupContacts": {
                          "type": "integer"
                        },
                        "resourcePackage": {
                          "type": "integer"
                        },
                        "otherAftercarePlanOrAction": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  exitrhy:
                    projectCompletionStatus: 3
                    earlyExitReason: 1
                    familyReunificationAchieved: 0
                    writtenAfterCarePlan: 2
                    assistanceMainStreamBenefits: 0
                    permenantHousingPlacement: 1
                    tempShelterPlacement: 2
                    exitCounseling: 0
                    furtherFollowupServices: 1
                    scheduledFollowupContacts: 1
                    resourcePackage: 1
                    otherAftercarePlanOrAction: 2
        required: true
    delete:
      responses:
        '204':
          description: OK â€“ The resource was successfully deleted.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific exitrhy specified by the URI resource parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-exits-exitid-exitrhys-exitrhyid
    parameters:
      - name: exitrhyid
        in: path
        required: true
        schema:
          type: string
        description: Exitrhy Identifier
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/exitrhys/{exitrhyid}/history':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exitrhys"
                    ],
                    "properties": {
                      "exitrhys": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "exitrhys"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "exitrhys": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "exitrhyId",
                                "projectCompletionStatus",
                                "earlyExitReason",
                                "familyReunificationAchieved",
                                "writtenAfterCarePlan",
                                "assistanceMainStreamBenefits",
                                "permenantHousingPlacement",
                                "tempShelterPlacement",
                                "exitCounseling",
                                "furtherFollowupServices",
                                "scheduledFollowupContacts",
                                "resourcePackage",
                                "otherAftercarePlanOrAction"
                              ],
                              "properties": {
                                "exitrhyId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "projectCompletionStatus": {
                                  "type": "integer"
                                },
                                "earlyExitReason": {
                                  "type": "integer"
                                },
                                "familyReunificationAchieved": {
                                  "type": "integer"
                                },
                                "writtenAfterCarePlan": {
                                  "type": "integer"
                                },
                                "assistanceMainStreamBenefits": {
                                  "type": "integer"
                                },
                                "permenantHousingPlacement": {
                                  "type": "integer"
                                },
                                "tempShelterPlacement": {
                                  "type": "integer"
                                },
                                "exitCounseling": {
                                  "type": "integer"
                                },
                                "furtherFollowupServices": {
                                  "type": "integer"
                                },
                                "scheduledFollowupContacts": {
                                  "type": "integer"
                                },
                                "resourcePackage": {
                                  "type": "integer"
                                },
                                "otherAftercarePlanOrAction": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    exitrhys:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      exitrhys:
                        - exitrhyId: 878d7b3f-91d8-4a5d-9eba-81b081f0a9f8
                          projectCompletionStatus: 3
                          earlyExitReason: 1
                          familyReunificationAchieved: 0
                          writtenAfterCarePlan: 2
                          assistanceMainStreamBenefits: 0
                          permenantHousingPlacement: 1
                          tempShelterPlacement: 2
                          exitCounseling: 0
                          furtherFollowupServices: 1
                          scheduledFollowupContacts: 1
                          resourcePackage: 1
                          otherAftercarePlanOrAction: 2
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for exitrhy history.  Returns a list of exitrhy ids history, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-exits-exitid-exitrhys-exitrhyid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: exitrhyid
        in: path
        required: true
        schema:
          type: string
        description: Exitrhy Identifier
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  /projects:
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "projects"
                    ],
                    "properties": {
                      "projects": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "projects"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "projects": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "projectId",
                                "projectName",
                                "projectCommonName",
                                "continuumProject",
                                "projectType",
                                "residentialAffiliation",
                                "targetPopulation",
                                "trackingMethod",
                                "dateCreated"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "projectId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "projectName": {
                                  "type": "string",
                                },
                                "projectCommonName": {
                                  "type": "string",
                                },
                                "continuumProject": {
                                  "type": "integer"
                                },
                                "projectType": {
                                  "type": "integer"
                                },
                                "residentialAffiliation": {
                                  "type": "integer"
                                },
                                "targetPopulation": {
                                  "type": "integer"
                                },
                                "trackingMethod": {
                                  "type": "integer"
                                },
                                "dateCreated": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    projects:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      projects:
                        - links:
                          - rel: history
                            href: "/projects/0dda7333-0592-4fa7-ba79-1fe2dfaaff4e/history"
                          projectId: 0dda7333-0592-4fa7-ba79-1fe2dfaaff4e
                          projectName: Homeless People Project
                          projectCommonName: Homeless People Project
                          continuumProject: 0
                          projectType: 1
                          residentialAffiliation: 0
                          targetPopulation: 1
                          trackingMethod: 0
                          dateCreated: 03-15-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for project.  Returns a list of project ids, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_projects
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "project"
                    ],
                    "properties": {
                      "project": {
                        "type": "object",
                        "required": [
                          "projectId",
                          "projectName",
                          "projectCommonName",
                          "continuumProject",
                          "projectType",
                          "targetPopulation",
                          "trackingMethod",
                          "dateCreated",
                          "dateUpdated"
                        ],
                        "properties": {
                          "projectId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "projectName": {
                            "type": "string",
                          },
                          "projectCommonName": {
                            "type": "string",
                          },
                          "continuumProject": {
                            "type": "integer"
                          },
                          "projectType": {
                            "type": "integer"
                          },
                          "targetPopulation": {
                            "type": "integer"
                          },
                          "trackingMethod": {
                            "type": "integer"
                          },
                          "dateCreated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dateUpdated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                  project:
                    projectId: d12a5b43-9411-4fe3-8cd3-0778459d0911
                    projectName: ProjectName_1459515376900
                    projectCommonName: ProjectCommonName_1459515376900
                    continuumProject: 0
                    projectType: 2
                    targetPopulation: 3
                    trackingMethod: 0
                    dateCreated: 05-11-2016
                    dateUpdated: 05-11-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found â€“ There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a project
      operationId: POST_projects
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "project"
                  ],
                  "properties": {
                    "project": {
                      "type": "object",
                      "required": [
                        "projectName",
                        "projectCommonName",
                        "continuumProject",
                        "projectType",
                        "residentialAffiliation",
                        "targetPopulation",
                        "trackingMethod"
                      ],
                      "properties": {
                        "projectName": {
                          "type": "string",
                        },
                        "projectCommonName": {
                          "type": "string",
                        },
                        "continuumProject": {
                          "type": "integer"
                        },
                        "projectType": {
                          "type": "integer"
                        },
                        "residentialAffiliation": {
                          "type": "integer"
                        },
                        "targetPopulation": {
                          "type": "integer"
                        },
                        "trackingMethod": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  project:
                    projectName: ProjectName_1459515376900
                    projectCommonName: ProjectCommonName_1459515376900
                    continuumProject: 0
                    projectType: 2
                    residentialAffiliation: 0
                    targetPopulation: 3
                    trackingMethod: 0
        required: true
  '/projects/{projectid}':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "project"
                    ],
                    "properties": {
                      "project": {
                        "type": "object",
                        "required": [
                          "links",
                          "projectId",
                          "projectName",
                          "projectCommonName",
                          "continuumProject",
                          "projectType",
                          "targetPopulation",
                          "trackingMethod",
                          "dateCreated",
                          "dateUpdated"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "projectId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "projectName": {
                            "type": "string",
                          },
                          "projectCommonName": {
                            "type": "string",
                          },
                          "continuumProject": {
                            "type": "integer"
                          },
                          "projectType": {
                            "type": "integer"
                          },
                          "targetPopulation": {
                            "type": "integer"
                          },
                          "trackingMethod": {
                            "type": "integer"
                          },
                          "dateCreated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dateUpdated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                    project:
                        links:
                        - rel: history
                          href: "/projects/d12a5b43-9411-4fe3-8cd3-0778459d0911/history"
                        projectId: d12a5b43-9411-4fe3-8cd3-0778459d0911
                        projectName: ProjectName_1459515376900
                        projectCommonName: ProjectCommonName_1459515376900
                        continuumProject: 0
                        projectType: 2
                        targetPopulation: 3
                        trackingMethod: 0
                        dateCreated: 05-11-2016
                        dateUpdated: 05-11-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires an user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a project using a URI resource parameter/ID.
      operationId: GET_projects-projectid
    put:
      responses:
        '200':
          description: OK â€“ Everything is working.
        '304':
          description: Not Modified â€“ The client can use cached data.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires a user.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Updates a specific project specified by the URI resource parameter/ID.
      operationId: PUT_projects-projectid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "project"
                  ],
                  "properties": {
                    "project": {
                      "type": "object",
                      "required": [
                        "projectName",
                        "projectCommonName",
                        "continuumProject",
                        "projectType",
                        "residentialAffiliation",
                        "targetPopulation",
                        "trackingMethod"
                      ],
                      "properties": {
                        "projectName": {
                          "type": "string",
                        },
                        "projectCommonName": {
                          "type": "string",
                        },
                        "continuumProject": {
                          "type": "integer"
                        },
                        "projectType": {
                          "type": "integer"
                        },
                        "residentialAffiliation": {
                          "type": "integer"
                        },
                        "targetPopulation": {
                          "type": "integer"
                        },
                        "trackingMethod": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  project:
                    projectName: ProjectName_1459515376900
                    projectCommonName: ProjectCommonName_1459515376900
                    continuumProject: 0
                    projectType: 2
                    residentialAffiliation: 0
                    targetPopulation: 3
                    trackingMethod: 0
        required: true
    delete:
      responses:
        '204':
          description: OK â€“ The resource was successfully deleted.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific project specified by the URI resource parameter/ID.
      operationId: DELETE_projects-projectid
    parameters:
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/history':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "projects"
                    ],
                    "properties": {
                      "projects": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "projects"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "projects": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "projectId",
                                "projectName",
                                "projectCommonName",
                                "continuumProject",
                                "projectType",
                                "residentialAffiliation",
                                "targetPopulation",
                                "trackingMethod",
                                "dateCreated"
                              ],
                              "properties": {
                                "projectId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "projectName": {
                                  "type": "string",
                                },
                                "projectCommonName": {
                                  "type": "string",
                                },
                                "continuumProject": {
                                  "type": "integer"
                                },
                                "projectType": {
                                  "type": "integer"
                                },
                                "residentialAffiliation": {
                                  "type": "integer"
                                },
                                "targetPopulation": {
                                  "type": "integer"
                                },
                                "trackingMethod": {
                                  "type": "integer"
                                },
                                "dateCreated": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    projects:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      projects:
                        - projectId: 0dda7333-0592-4fa7-ba79-1fe2dfaaff4e
                          projectName: Homeless People Project
                          projectCommonName: Homeless People Project
                          continuumProject: 0
                          projectType: 1
                          residentialAffiliation: 0
                          targetPopulation: 1
                          trackingMethod: 0
                          dateCreated: 03-15-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for project history.  Returns a list of project ids history, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_projects-projectId-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  /projects/{projectid}/projectcocs:
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "projectcocs"
                    ],
                    "properties": {
                      "projectcocs": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "projectcocs"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "projectcocs": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "projectcocId",
                                "coccode",
                                "dateCreated"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "projectcocId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "coccode": {
                                  "type": "string",
                                },
                                "dateCreated": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    projectcocs:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      projectcocs:
                        - links:
                          - rel: history
                            href: "/projects/d12a5b43-9411-4fe3-8cd3-0778459d0911/projectcocs/a72c1666-cf51-47e4-8c2e-6ae5b8688cca/history"
                          projectcocId: a72c1666-cf51-47e4-8c2e-6ae5b8688cca
                          coccode: HPltHrjWAdDWKDYBj7dvUfzEvrNc2Y
                          dateCreated: 05-11-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for projectcoc.  Returns a list of projectcoc ids, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_projects-projectid-projectcocs
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "projectcoc"
                    ],
                    "properties": {
                      "projectcoc": {
                        "type": "object",
                        "required": [
                          "projectcocId",
                          "coccode",
                          "dateCreated",
                          "dateUpdated"
                        ],
                        "properties": {
                          "projectcocId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "coccode": {
                            "type": "string",
                          },
                          "dateCreated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dateUpdated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                  projectcoc:
                    projectcocId: a72c1666-cf51-47e4-8c2e-6ae5b8688cca
                    coccode: HPltHrjWAdDWKDYBj7dvUfzEvrNc2Y
                    dateCreated: 05-11-2016
                    dateUpdated: 05-11-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found â€“ There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a projectcoc
      operationId: POST_projects-projectid-projectcocs
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "projectcoc"
                  ],
                  "properties": {
                    "projectcoc": {
                      "type": "object",
                      "required": [
                        "coccode",
                        "dateCreated",
                        "dateUpdated"
                      ],
                      "properties": {
                        "coccode": {
                          "type": "string",
                        },
                        "dateCreated": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "dateUpdated": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
              example:
                  projectcoc:
                    coccode: HPltHrjWAdDWKDYBj7dvUfzEvrNc2Y
                    dateCreated: 05-11-2016
                    dateUpdated: 05-11-2016
        required: true
    parameters:
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/projectcocs/{projectcocid}':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "projectcoc"
                    ],
                    "properties": {
                      "projectcoc": {
                        "type": "object",
                        "required": [
                          "links",
                          "projectcocId",
                          "coccode",
                          "dateCreated",
                          "dateUpdated"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "projectcocId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "coccode": {
                            "type": "string",
                          },
                          "dateCreated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dateUpdated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                    projectcoc:
                        links:
                        - rel: history
                          href: "/projects/d12a5b43-9411-4fe3-8cd3-0778459d0911/projectcocs/a72c1666-cf51-47e4-8c2e-6ae5b8688cca/history"
                        projectcocId: a72c1666-cf51-47e4-8c2e-6ae5b8688cca
                        coccode: HPltHrjWAdDWKDYBj7dvUfzEvrNc2Y
                        dateCreated: 05-11-2016
                        dateUpdated: 05-11-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires an user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a projectcoc using a URI resource parameter/ID.
      operationId: GET_projects-projectid-projectcocs-projectcocid
    put:
      responses:
        '200':
          description: OK â€“ Everything is working.
        '304':
          description: Not Modified â€“ The client can use cached data.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires a user.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific projectcoc specified by the URI resource
        parameter/ID.
      operationId: PUT_projects-projectid-projectcocs-projectcocid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "projectcoc"
                  ],
                  "properties": {
                    "projectcoc": {
                      "type": "object",
                      "required": [
                        "coccode",
                        "dateCreated",
                        "dateUpdated"
                      ],
                      "properties": {
                        "coccode": {
                          "type": "string",
                        },
                        "dateCreated": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "dateUpdated": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
              example:
                  projectcoc:
                    coccode: HPltHrjWAdDWKDYBj7dvUfzEvrNc2Y
                    dateCreated: 05-11-2016
                    dateUpdated: 05-11-2016
        required: true
    delete:
      responses:
        '204':
          description: OK â€“ The resource was successfully deleted.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific projectcoc specified by the URI resource
        parameter/ID.
      operationId: DELETE_projects-projectid-projectcocs-projectcocid
    parameters:
      - name: projectcocid
        in: path
        required: true
        schema:
          type: string
        description: Projectcoc Identifier
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/projectcocs/{projectcocid}/history':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "projectcocs"
                    ],
                    "properties": {
                      "projectcocs": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "projectcocs"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "projectcocs": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "projectcocId",
                                "coccode",
                                "dateCreated"
                              ],
                              "properties": {
                                "projectcocId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "coccode": {
                                  "type": "string",
                                },
                                "dateCreated": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    projectcocs:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      projectcocs:
                        - projectcocId: a72c1666-cf51-47e4-8c2e-6ae5b8688cca
                          coccode: HPltHrjWAdDWKDYBj7dvUfzEvrNc2Y
                          dateCreated: 05-11-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for projectcoc history.  Returns a list of projectcoc ids history, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_projects-projectid-projectcocs-projectcocid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: projectcocid
        in: path
        required: true
        schema:
          type: string
        description: Projectcoc Identifier
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  /projects/{projectid}/projectcocs/{projectcocid}/inventories:
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "Inventories"
                    ],
                    "properties": {
                      "Inventories": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "inventories"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "inventories": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "inventoryId",
                                "availabilty",
                                "bedtype",
                                "hmisparticipatingbeds",
                                "householdtype",
                                "chbedinventory",
                                "vetbedinventory",
                                "youthbedinventory",
                                "youthagegroup",
                                "unitinventory",
                                "dateCreated",
                                "inventoryenddate",
                                "inventorystartdate"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "inventoryId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "availabilty": {
                                  "type": "integer"
                                },
                                "bedtype": {
                                  "type": "integer"
                                },
                                "hmisparticipatingbeds": {
                                  "type": "integer"
                                },
                                "householdtype": {
                                  "type": "integer"
                                },
                                "chbedinventory": {
                                  "type": "integer"
                                },
                                "vetbedinventory": {
                                  "type": "integer"
                                },
                                "youthbedinventory": {
                                  "type": "integer"
                                },
                                "youthagegroup": {
                                  "type": "integer"
                                },
                                "unitinventory": {
                                  "type": "integer"
                                },
                                "dateCreated": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                },
                                "inventoryenddate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                },
                                "inventorystartdate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    Inventories:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      inventories:
                        - links:
                          - rel: history
                            href: "/projects/d12a5b43-9411-4fe3-8cd3-0778459d0911/projectcocs/a72c1666-cf51-47e4-8c2e-6ae5b8688cca/inventories/74e4ed15-688e-4dfa-9609-1c6161d0dedd/history"
                          inventoryId: 74e4ed15-688e-4dfa-9609-1c6161d0dedd
                          availabilty: 2
                          bedtype: 1
                          hmisparticipatingbeds: -791575690
                          householdtype: 3
                          chbedinventory: 1
                          vetbedinventory: 2
                          youthbedinventory: 3
                          youthagegroup: 4
                          unitinventory: 1579850350
                          dateCreated: 05-12-2016
                          inventoryenddate: 02-04-2016
                          inventorystartdate: 02-04-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for inventory.  Returns a list of inventory ids, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_projects-projectid-projectcocs-projectcocid-inventories
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "inventory"
                    ],
                    "properties": {
                      "inventory": {
                        "type": "object",
                        "required": [
                          "inventoryId",
                          "availabilty",
                          "bedtype",
                          "hmisparticipatingbeds",
                          "householdtype",
                          "chbedinventory",
                          "vetbedinventory",
                          "youthbedinventory",
                          "youthagegroup",
                          "unitinventory",
                          "dateCreated",
                          "dateUpdated",
                          "inventoryenddate",
                          "inventorystartdate"
                        ],
                        "properties": {
                          "inventoryId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "availabilty": {
                            "type": "integer"
                          },
                          "bedtype": {
                            "type": "integer"
                          },
                          "hmisparticipatingbeds": {
                            "type": "integer"
                          },
                          "householdtype": {
                            "type": "integer"
                          },
                          "chbedinventory": {
                            "type": "integer"
                          },
                          "vetbedinventory": {
                            "type": "integer"
                          },
                          "youthbedinventory": {
                            "type": "integer"
                          },
                          "youthagegroup": {
                            "type": "integer"
                          },
                          "unitinventory": {
                            "type": "integer"
                          },
                          "dateCreated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dateUpdated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "inventoryenddate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "inventorystartdate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                  inventory:
                    inventoryId: 74e4ed15-688e-4dfa-9609-1c6161d0dedd
                    availabilty: 2
                    bedtype: 1
                    hmisparticipatingbeds: -791575690
                    householdtype: 3
                    chbedinventory: 1
                    vetbedinventory: 2
                    youthbedinventory: 3
                    youthagegroup: 4
                    unitinventory: 1579850350
                    dateCreated: 05-12-2016
                    dateUpdated: 05-12-2016
                    inventoryenddate: 02-04-2016
                    inventorystartdate: 02-04-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found â€“ There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a inventory
      operationId: POST_projects-projectid-projectcocs-projectcocid-inventories
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "inventory"
                  ],
                  "properties": {
                    "inventory": {
                      "type": "object",
                      "required": [
                        "availabilty",
                        "bedinventory",
                        "bedtype",
                        "hmisparticipatingbeds",
                        "householdtype",
                        "inventoryenddate",
                        "inventorystartdate",
                        "unitinventory",
                        "chbedinventory",
                        "vetbedinventory",
                        "youthbedinventory",
                        "youthagegroup"
                      ],
                      "properties": {
                        "availabilty": {
                          "type": "string",
                        },
                        "bedinventory": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "bedtype": {
                          "type": "integer"
                        },
                        "hmisparticipatingbeds": {
                          "type": "integer"
                        },
                        "householdtype": {
                          "type": "integer"
                        },
                        "inventoryenddate": {
                          "type": "string",
                          "format": "MM-dd-YYYY HH:mm",
                        },
                        "inventorystartdate": {
                          "type": "string",
                          "format": "MM-dd-YYYY HH:mm",
                        },
                        "unitinventory": {
                          "type": "integer"
                        },
                        "chbedinventory": {
                          "type": "integer"
                        },
                        "vetbedinventory": {
                          "type": "integer"
                        },
                        "youthbedinventory": {
                          "type": "integer"
                        },
                        "youthagegroup": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  inventory:
                    availabilty: '2'
                    bedinventory: 3a1827bc-4fe3-40e7-abba-7956939fae05
                    bedtype: 1
                    hmisparticipatingbeds: -791575690
                    householdtype: 3
                    inventoryenddate: '02-04-2016 12:12'
                    inventorystartdate: '02-04-2016 12:12'
                    unitinventory: 1579850350
                    chbedinventory: 1
                    vetbedinventory: 2
                    youthbedinventory: 3
                    youthagegroup: 4
        required: true
    parameters:
      - name: projectcocid
        in: path
        required: true
        schema:
          type: string
        description: Projectcoc Identifier
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/projectcocs/{projectcocid}/inventories/{inventoryid}':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "inventory"
                    ],
                    "properties": {
                      "inventory": {
                        "type": "object",
                        "required": [
                          "links",
                          "inventoryId",
                          "availabilty",
                          "bedtype",
                          "hmisparticipatingbeds",
                          "householdtype",
                          "chbedinventory",
                          "vetbedinventory",
                          "youthbedinventory",
                          "youthagegroup",
                          "unitinventory",
                          "dateCreated",
                          "dateUpdated",
                          "inventoryenddate",
                          "inventorystartdate"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "inventoryId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "availabilty": {
                            "type": "integer"
                          },
                          "bedtype": {
                            "type": "integer"
                          },
                          "hmisparticipatingbeds": {
                            "type": "integer"
                          },
                          "householdtype": {
                            "type": "integer"
                          },
                          "chbedinventory": {
                            "type": "integer"
                          },
                          "vetbedinventory": {
                            "type": "integer"
                          },
                          "youthbedinventory": {
                            "type": "integer"
                          },
                          "youthagegroup": {
                            "type": "integer"
                          },
                          "unitinventory": {
                            "type": "integer"
                          },
                          "dateCreated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dateUpdated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "inventoryenddate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "inventorystartdate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                    inventory:
                        links:
                        - rel: history
                          href: "/projects/d12a5b43-9411-4fe3-8cd3-0778459d0911/projectcocs/a72c1666-cf51-47e4-8c2e-6ae5b8688cca/inventories/74e4ed15-688e-4dfa-9609-1c6161d0dedd/history"
                        inventoryId: 74e4ed15-688e-4dfa-9609-1c6161d0dedd
                        availabilty: 2
                        bedtype: 1
                        hmisparticipatingbeds: -791575690
                        householdtype: 3
                        chbedinventory: 1
                        vetbedinventory: 2
                        youthbedinventory: 3
                        youthagegroup: 4
                        unitinventory: 1579850350
                        dateCreated: 05-12-2016
                        dateUpdated: 05-12-2016
                        inventoryenddate: 02-04-2016
                        inventorystartdate: 02-04-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires an user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a inventory using a URI resource parameter/ID.
      operationId: GET_projects-projectid-projectcocs-projectcocid-inventories-inventoryid
    put:
      responses:
        '200':
          description: OK â€“ Everything is working.
        '304':
          description: Not Modified â€“ The client can use cached data.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires a user.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Updates a specific inventory specified by the URI resource parameter/ID.
      operationId: PUT_projects-projectid-projectcocs-projectcocid-inventories-inventoryid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "inventory"
                  ],
                  "properties": {
                    "inventory": {
                      "type": "object",
                      "required": [
                        "availabilty",
                        "bedinventory",
                        "bedtype",
                        "hmisparticipatingbeds",
                        "householdtype",
                        "inventoryenddate",
                        "inventorystartdate",
                        "unitinventory",
                        "chbedinventory",
                        "vetbedinventory",
                        "youthbedinventory",
                        "youthagegroup"
                      ],
                      "properties": {
                        "availabilty": {
                          "type": "string",
                        },
                        "bedinventory": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "bedtype": {
                          "type": "integer"
                        },
                        "hmisparticipatingbeds": {
                          "type": "integer"
                        },
                        "householdtype": {
                          "type": "integer"
                        },
                        "inventoryenddate": {
                          "type": "string",
                          "format": "YYYY-MM-dd HH:mm",
                        },
                        "inventorystartdate": {
                          "type": "string",
                          "format": "YYYY-MM-dd HH:mm",
                        },
                        "unitinventory": {
                          "type": "integer"
                        },
                        "chbedinventory": {
                          "type": "integer"
                        },
                        "vetbedinventory": {
                          "type": "integer"
                        },
                        "youthbedinventory": {
                          "type": "integer"
                        },
                        "youthagegroup": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  inventory:
                    availabilty: '2'
                    bedinventory: 3a1827bc-4fe3-40e7-abba-7956939fae05
                    bedtype: 1
                    hmisparticipatingbeds: -791575690
                    householdtype: 3
                    inventoryenddate: '02-04-2016 12:12'
                    inventorystartdate: '02-04-2016 12:12'
                    unitinventory: 1579850350
                    chbedinventory: 1
                    vetbedinventory: 2
                    youthbedinventory: 3
                    youthagegroup: 4
        required: true
    delete:
      responses:
        '204':
          description: OK â€“ The resource was successfully deleted.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific inventory specified by the URI resource parameter/ID.
      operationId: DELETE_projects-projectid-projectcocs-projectcocid-inventories-inventoryid
    parameters:
      - name: projectcocid
        in: path
        required: true
        schema:
          type: string
        description: Projectcoc Identifier
      - name: inventoryid
        in: path
        required: true
        schema:
          type: string
        description: Inventory Identifier
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/projectcocs/{projectcocid}/inventories/{inventoryid}/history':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "Inventories"
                    ],
                    "properties": {
                      "Inventories": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "inventories"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "inventories": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "inventoryId",
                                "availabilty",
                                "bedtype",
                                "hmisparticipatingbeds",
                                "householdtype",
                                "chbedinventory",
                                "vetbedinventory",
                                "youthbedinventory",
                                "youthagegroup",
                                "unitinventory",
                                "dateCreated",
                                "inventoryenddate",
                                "inventorystartdate"
                              ],
                              "properties": {
                                "inventoryId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "availabilty": {
                                  "type": "integer"
                                },
                                "bedtype": {
                                  "type": "integer"
                                },
                                "hmisparticipatingbeds": {
                                  "type": "integer"
                                },
                                "householdtype": {
                                  "type": "integer"
                                },
                                "chbedinventory": {
                                  "type": "integer"
                                },
                                "vetbedinventory": {
                                  "type": "integer"
                                },
                                "youthbedinventory": {
                                  "type": "integer"
                                },
                                "youthagegroup": {
                                  "type": "integer"
                                },
                                "unitinventory": {
                                  "type": "integer"
                                },
                                "dateCreated": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                },
                                "inventoryenddate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                },
                                "inventorystartdate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    Inventories:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      inventories:
                        - inventoryId: 74e4ed15-688e-4dfa-9609-1c6161d0dedd
                          availabilty: 2
                          bedtype: 1
                          hmisparticipatingbeds: -791575690
                          householdtype: 3
                          chbedinventory: 1
                          vetbedinventory: 2
                          youthbedinventory: 3
                          youthagegroup: 4
                          unitinventory: 1579850350
                          dateCreated: 05-12-2016
                          inventoryenddate: 02-04-2016
                          inventorystartdate: 02-04-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for inventory history.  Returns a list of inventory ids history, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_projects-projectid-projectcocs-projectcocid-inventories-inventoryid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: inventoryid
        in: path
        required: true
        schema:
          type: string
        description: Inventory Identifier
      - name: projectcocid
        in: path
        required: true
        schema:
          type: string
        description: Projectcoc Identifier
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  /projects/{projectid}/projectcocs/{projectcocid}/sites:
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "sites"
                    ],
                    "properties": {
                      "sites": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "sites"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "sites": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "siteId",
                                "address",
                                "city",
                                "geocode",
                                "principalsite",
                                "state",
                                "zip",
                                "dateCreated"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "siteId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "address": {
                                  "type": "string",
                                },
                                "city": {
                                  "type": "string",
                                },
                                "geocode": {
                                  "type": "integer"
                                },
                                "principalsite": {
                                  "type": "integer"
                                },
                                "state": {
                                  "type": "string",
                                },
                                "zip": {
                                  "type": "string",
                                },
                                "dateCreated": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    sites:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      sites:
                        - links:
                          - rel: history
                            href: "/projects/d12a5b43-9411-4fe3-8cd3-0778459d0911/projectcocs/a72c1666-cf51-47e4-8c2e-6ae5b8688cca/sites/336b4b5f-8e07-4582-bf88-a7c1d17bd3fc/history"
                          siteId: 336b4b5f-8e07-4582-bf88-a7c1d17bd3fc
                          address: n4wuRkopYjCtFz52omPRSIyO0o6e1LuZ6XPafjcqPZCgYBphlu
                          city: GZbBVvo6rm
                          geocode: -206855564
                          principalsite: 0
                          state: MN
                          zip: '123456'
                          dateCreated: 05-11-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for site.  Returns a list of site ids, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_projects-projectid-projectcocs-projectcocid-sites
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "site"
                    ],
                    "properties": {
                      "site": {
                        "type": "object",
                        "required": [
                          "siteId",
                          "address",
                          "city",
                          "geocode",
                          "principalsite",
                          "state",
                          "zip",
                          "dateCreated",
                          "dateUpdated"
                        ],
                        "properties": {
                          "siteId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "address": {
                            "type": "string",
                          },
                          "city": {
                            "type": "string",
                          },
                          "geocode": {
                            "type": "integer"
                          },
                          "principalsite": {
                            "type": "integer"
                          },
                          "state": {
                            "type": "string",
                          },
                          "zip": {
                            "type": "string",
                          },
                          "dateCreated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dateUpdated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                  site:
                    siteId: 336b4b5f-8e07-4582-bf88-a7c1d17bd3fc
                    address: n4wuRkopYjCtFz52omPRSIyO0o6e1LuZ6XPafjcqPZCgYBphlu
                    city: GZbBVvo6rm
                    geocode: -206855564
                    principalsite: 0
                    state: MN
                    zip: '123456'
                    dateCreated: 05-11-2016
                    dateUpdated: 05-11-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found â€“ There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a site
      operationId: POST_projects-projectid-projectcocs-projectcocid-sites
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "site"
                  ],
                  "properties": {
                    "site": {
                      "type": "object",
                      "required": [
                        "address",
                        "city",
                        "geocode",
                        "principalsite",
                        "state",
                        "zip"
                      ],
                      "properties": {
                        "address": {
                          "type": "string",
                        },
                        "city": {
                          "type": "string",
                        },
                        "geocode": {
                          "type": "integer"
                        },
                        "principalsite": {
                          "type": "integer"
                        },
                        "state": {
                          "type": "string",
                        },
                        "zip": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  site:
                    address: n4wuRkopYjCtFz52omPRSIyO0o6e1LuZ6XPafjcqPZCgYBphlu
                    city: GZbBVvo6rm
                    geocode: -206855564
                    principalsite: 0
                    state: MN
                    zip: 123456
        required: true
    parameters:
      - name: projectcocid
        in: path
        required: true
        schema:
          type: string
        description: Projectcoc Identifier
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/projectcocs/{projectcocid}/sites/{siteid}':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "site"
                    ],
                    "properties": {
                      "site": {
                        "type": "object",
                        "required": [
                          "links",
                          "siteId",
                          "address",
                          "city",
                          "geocode",
                          "principalsite",
                          "state",
                          "zip",
                          "dateCreated",
                          "dateUpdated"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "siteId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "address": {
                            "type": "string",
                          },
                          "city": {
                            "type": "string",
                          },
                          "geocode": {
                            "type": "integer"
                          },
                          "principalsite": {
                            "type": "integer"
                          },
                          "state": {
                            "type": "string",
                          },
                          "zip": {
                            "type": "string",
                          },
                          "dateCreated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dateUpdated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                    site:
                        links:
                        - rel: history
                          href: "/projects/d12a5b43-9411-4fe3-8cd3-0778459d0911/projectcocs/a72c1666-cf51-47e4-8c2e-6ae5b8688cca/sites/336b4b5f-8e07-4582-bf88-a7c1d17bd3fc/history"
                        siteId: 336b4b5f-8e07-4582-bf88-a7c1d17bd3fc
                        address: n4wuRkopYjCtFz52omPRSIyO0o6e1LuZ6XPafjcqPZCgYBphlu
                        city: GZbBVvo6rm
                        geocode: -206855564
                        principalsite: 0
                        state: MN
                        zip: '123456'
                        dateCreated: 05-11-2016
                        dateUpdated: 05-11-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires an user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a site using a URI resource parameter/ID.
      operationId: GET_projects-projectid-projectcocs-projectcocid-sites-siteid
    put:
      responses:
        '200':
          description: OK â€“ Everything is working.
        '304':
          description: Not Modified â€“ The client can use cached data.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires a user.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Updates a specific site specified by the URI resource parameter/ID.
      operationId: PUT_projects-projectid-projectcocs-projectcocid-sites-siteid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "site"
                  ],
                  "properties": {
                    "site": {
                      "type": "object",
                      "required": [
                        "address",
                        "city",
                        "geocode",
                        "principalsite",
                        "state",
                        "zip"
                      ],
                      "properties": {
                        "address": {
                          "type": "string",
                        },
                        "city": {
                          "type": "string",
                        },
                        "geocode": {
                          "type": "integer"
                        },
                        "principalsite": {
                          "type": "integer"
                        },
                        "state": {
                          "type": "string",
                        },
                        "zip": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  site:
                    address: n4wuRkopYjCtFz52omPRSIyO0o6e1LuZ6XPafjcqPZCgYBphlu
                    city: GZbBVvo6rm
                    geocode: -206855564
                    principalsite: 0
                    state: MN
                    zip: 123456
        required: true
    delete:
      responses:
        '204':
          description: OK â€“ The resource was successfully deleted.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific site specified by the URI resource parameter/ID.
      operationId: DELETE_projects-projectid-projectcocs-projectcocid-sites-siteid
    parameters:
      - name: projectcocid
        in: path
        required: true
        schema:
          type: string
        description: Projectcoc Identifier
      - name: siteid
        in: path
        required: true
        schema:
          type: string
        description: Site Identifier
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/projectcocs/{projectcocid}/sites/{siteid}/history':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "sites"
                    ],
                    "properties": {
                      "sites": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "sites"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "sites": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "siteId",
                                "address",
                                "city",
                                "geocode",
                                "principalsite",
                                "state",
                                "zip",
                                "dateCreated"
                              ],
                              "properties": {
                                "siteId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "address": {
                                  "type": "string",
                                },
                                "city": {
                                  "type": "string",
                                },
                                "geocode": {
                                  "type": "integer"
                                },
                                "principalsite": {
                                  "type": "integer"
                                },
                                "state": {
                                  "type": "string",
                                },
                                "zip": {
                                  "type": "string",
                                },
                                "dateCreated": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    sites:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      sites:
                        - siteId: 336b4b5f-8e07-4582-bf88-a7c1d17bd3fc
                          address: n4wuRkopYjCtFz52omPRSIyO0o6e1LuZ6XPafjcqPZCgYBphlu
                          city: GZbBVvo6rm
                          geocode: -206855564
                          principalsite: 0
                          state: MN
                          zip: '123456'
                          dateCreated: 05-11-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for site history.  Returns a list of site ids history, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_projects-projectid-projectcocs-projectcocid-sites-siteid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: siteid
        in: path
        required: true
        schema:
          type: string
        description: Site Identifier
      - name: projectcocid
        in: path
        required: true
        schema:
          type: string
        description: Projectcoc Identifier
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  /projects/{projectid}/funders:
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "funders"
                    ],
                    "properties": {
                      "funders": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "funders"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "funders": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "funderId",
                                "funder",
                                "grantid",
                                "dateCreated",
                                "enddate",
                                "startdate"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "funderId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "funder": {
                                  "type": "integer"
                                },
                                "grantid": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "dateCreated": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                },
                                "enddate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                },
                                "startdate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    funders:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      funders:
                        - links:
                          - rel: history
                            href: "/projects/d12a5b43-9411-4fe3-8cd3-0778459d0911/funders/8f11979d-8402-49a8-8253-f5f16c57d63f/history"
                          funderId: 8f11979d-8402-49a8-8253-f5f16c57d63f
                          funder: 8
                          grantid: a2cac563-e852-487b-996d-b1bae8225234
                          dateCreated: 05-11-2016
                          enddate: 04-16-2016
                          startdate: 02-04-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for funder.  Returns a list of funder ids, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_projects-projectid-funders
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "funder"
                    ],
                    "properties": {
                      "funder": {
                        "type": "object",
                        "required": [
                          "funderId",
                          "funder",
                          "grantid",
                          "dateCreated",
                          "dateUpdated",
                          "enddate",
                          "startdate"
                        ],
                        "properties": {
                          "funderId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "funder": {
                            "type": "integer"
                          },
                          "grantid": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "dateCreated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dateUpdated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "enddate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "startdate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                  funder:
                    funderId: 8f11979d-8402-49a8-8253-f5f16c57d63f
                    funder: 8
                    grantid: a2cac563-e852-487b-996d-b1bae8225234
                    dateCreated: 05-11-2016
                    dateUpdated: 05-11-2016
                    enddate: 04-16-2016
                    startdate: 02-04-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found â€“ There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a funder
      operationId: POST_projects-projectid-funders
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "funder"
                  ],
                  "properties": {
                    "funder": {
                      "type": "object",
                      "required": [
                        "enddate",
                        "funder",
                        "grantid",
                        "startdate"
                      ],
                      "properties": {
                        "enddate": {
                          "type": "string",
                          "format": "MM-dd-YYYY HH:mm",
                        },
                        "funder": {
                          "type": "integer"
                        },
                        "grantid": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "startdate": {
                          "type": "string",
                          "format": "MM-dd-YYYY HH:mm",
                        }
                      }
                    }
                  }
                }
              example:
                  funder:
                    enddate: '04-16-2016 11:11'
                    funder: 8
                    grantid: a2cac563-e852-487b-996d-b1bae8225234
                    startdate: '02-04-2016 12:12'
        required: true
    parameters:
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/funders/{funderid}':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "funder"
                    ],
                    "properties": {
                      "funder": {
                        "type": "object",
                        "required": [
                          "links",
                          "funderId",
                          "funder",
                          "grantid",
                          "dateCreated",
                          "dateUpdated",
                          "enddate",
                          "startdate"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "funderId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "funder": {
                            "type": "integer"
                          },
                          "grantid": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "dateCreated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dateUpdated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "enddate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "startdate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                    funder:
                        links:
                        - rel: history
                          href: "/projects/d12a5b43-9411-4fe3-8cd3-0778459d0911/funders/8f11979d-8402-49a8-8253-f5f16c57d63f/history"
                        funderId: 8f11979d-8402-49a8-8253-f5f16c57d63f
                        funder: 8
                        grantid: a2cac563-e852-487b-996d-b1bae8225234
                        dateCreated: 05-11-2016
                        dateUpdated: 05-11-2016
                        enddate: 04-16-2016
                        startdate: 02-04-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires an user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a funder using a URI resource parameter/ID.
      operationId: GET_projects-projectid-funders-funderid
    put:
      responses:
        '200':
          description: OK â€“ Everything is working.
        '304':
          description: Not Modified â€“ The client can use cached data.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires a user.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Updates a specific funder specified by the URI resource parameter/ID.
      operationId: PUT_projects-projectid-funders-funderid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "funder"
                  ],
                  "properties": {
                    "funder": {
                      "type": "object",
                      "required": [
                        "enddate",
                        "funder",
                        "grantid",
                        "startdate"
                      ],
                      "properties": {
                        "enddate": {
                          "type": "string",
                          "format": "MM-dd-YYYY HH:mm",
                        },
                        "funder": {
                          "type": "integer"
                        },
                        "grantid": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "startdate": {
                          "type": "string",
                          "format": "MM-dd-YYYY HH:mm",
                        }
                      }
                    }
                  }
                }
              example:
                  funder:
                    enddate: '04-16-2016 11:11'
                    funder: 8
                    grantid: a2cac563-e852-487b-996d-b1bae8225234
                    startdate: '02-04-2016 12:12'
        required: true
    delete:
      responses:
        '204':
          description: OK â€“ The resource was successfully deleted.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific funder specified by the URI resource parameter/ID.
      operationId: DELETE_projects-projectid-funders-funderid
    parameters:
      - name: funderid
        in: path
        required: true
        schema:
          type: string
        description: Funder Identifier
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/funders/{funderid}/history':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "funders"
                    ],
                    "properties": {
                      "funders": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "funders"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "funders": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "funderId",
                                "funder",
                                "grantid",
                                "dateCreated",
                                "enddate",
                                "startdate"
                              ],
                              "properties": {
                                "funderId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "funder": {
                                  "type": "integer"
                                },
                                "grantid": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "dateCreated": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                },
                                "enddate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                },
                                "startdate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    funders:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      funders:
                        - funderId: 8f11979d-8402-49a8-8253-f5f16c57d63f
                          funder: 8
                          grantid: a2cac563-e852-487b-996d-b1bae8225234
                          dateCreated: 05-11-2016
                          enddate: 04-16-2016
                          startdate: 02-04-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for funder history.  Returns a list of funder ids history, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_projects-projectid-funders-funderid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: funderid
        in: path
        required: true
        schema:
          type: string
        description: Funder Identifier
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  /projects/{projectid}/affiliations:
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "affiliations"
                    ],
                    "properties": {
                      "affiliations": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "affiliations"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "affiliations": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "affiliationId",
                                "resprojectid",
                                "dateCreated"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "affiliationId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "resprojectid": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "dateCreated": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    affiliations:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      affiliations:
                        - links:
                          - rel: history
                            href: "/projects/d12a5b43-9411-4fe3-8cd3-0778459d0911/affiliations/f3c479a5-041a-49f6-b3ce-c999ec0bee40/history"
                          affiliationId: f3c479a5-041a-49f6-b3ce-c999ec0bee40
                          resprojectid: lVkFrvuVDsJcxR9z1cNC
                          dateCreated: 04-25-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for affiliation.  Returns a list of affiliation ids, based on
        the query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_projects-projectid-affiliations
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "affiliation"
                    ],
                    "properties": {
                      "affiliation": {
                        "type": "object",
                        "required": [
                          "affiliationId",
                          "resprojectid",
                          "dateCreated",
                          "dateUpdated"
                        ],
                        "properties": {
                          "affiliationId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "resprojectid": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "dateCreated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dateUpdated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                  affiliation:
                    affiliationId: f3c479a5-041a-49f6-b3ce-c999ec0bee40
                    resprojectid: lVkFrvuVDsJcxR9z1cNC
                    dateCreated: 04-25-2016
                    dateUpdated: 04-25-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found â€“ There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a affiliation
      operationId: POST_projects-projectid-affiliations
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "affiliation"
                  ],
                  "properties": {
                    "affiliation": {
                      "type": "object",
                      "required": [
                        "resprojectid"
                      ],
                      "properties": {
                        "resprojectid": {
                          "type": "string",
                          "format": "uuid",
                        }
                      }
                    }
                  }
                }
              example:
                  affiliation:
                    resprojectid: lVkFrvuVDsJcxR9z1cNC
        required: true
    parameters:
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/affiliations/{affiliationid}':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "affiliation"
                    ],
                    "properties": {
                      "affiliation": {
                        "type": "object",
                        "required": [
                          "links",
                          "affiliationId",
                          "resprojectid",
                          "dateCreated",
                          "dateUpdated"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "affiliationId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "resprojectid": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "dateCreated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dateUpdated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                    affiliation:
                        links:
                        - rel: history
                          href: "/projects/d12a5b43-9411-4fe3-8cd3-0778459d0911/affiliations/f3c479a5-041a-49f6-b3ce-c999ec0bee40/history"
                        affiliationId: f3c479a5-041a-49f6-b3ce-c999ec0bee40
                        resprojectid: lVkFrvuVDsJcxR9z1cNC
                        dateCreated: 04-25-2016
                        dateUpdated: 04-25-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires an user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a affiliation using a URI resource parameter/ID.
      operationId: GET_projects-projectid-affiliations-affiliationid
    put:
      responses:
        '200':
          description: OK â€“ Everything is working.
        '304':
          description: Not Modified â€“ The client can use cached data.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires a user.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific affiliation specified by the URI resource
        parameter/ID.
      operationId: PUT_projects-projectid-affiliations-affiliationid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "affiliation"
                  ],
                  "properties": {
                    "affiliation": {
                      "type": "object",
                      "required": [
                        "resprojectid"
                      ],
                      "properties": {
                        "resprojectid": {
                          "type": "string",
                          "format": "uuid",
                        }
                      }
                    }
                  }
                }
              example:
                  affiliation:
                    resprojectid: lVkFrvuVDsJcxR9z1cNC
        required: true
    delete:
      responses:
        '204':
          description: OK â€“ The resource was successfully deleted.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific affiliation specified by the URI resource
        parameter/ID.
      operationId: DELETE_projects-projectid-affiliations-affiliationid
    parameters:
      - name: affiliationid
        in: path
        required: true
        schema:
          type: string
        description: Affiliation Identifier
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/affiliations/{affiliationid}/history':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "affiliations"
                    ],
                    "properties": {
                      "affiliations": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "affiliations"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "affiliations": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "affiliationId",
                                "resprojectid",
                                "dateCreated"
                              ],
                              "properties": {
                                "affiliationId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "resprojectid": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "dateCreated": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    affiliations:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      affiliations:
                        - affiliationId: f3c479a5-041a-49f6-b3ce-c999ec0bee40
                          resprojectid: lVkFrvuVDsJcxR9z1cNC
                          dateCreated: 04-25-2016
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for affiliation history.  Returns a list of affiliation ids history, based on
        the query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_projects-projectid-affiliations-affiliationid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: affiliationid
        in: path
        required: true
        schema:
          type: string
        description: Affiliation Identifier
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  /organizations:
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "Organizations"
                    ],
                    "properties": {
                      "Organizations": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "organizations"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "organizations": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "organizationId",
                                "organizationCommonName",
                                "organizationName"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "organizationId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "organizationCommonName": {
                                  "type": "string",
                                },
                                "organizationName": {
                                  "type": "string",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    Organizations:
                      pagination:
                        from: 0
                        returned: 16
                        total: 16
                        maximum: 30
                        sort: {}
                      organizations:
                        - links:
                          - rel: history
                            href: "/organizations/81a20cb3-e000-473c-a3e6-cddcba15a02f/history"
                          organizationId: 81a20cb3-e000-473c-a3e6-cddcba15a02f
                          organizationCommonName: BBR
                          organizationName: BBjksdjgjdR
                        - links:
                          - rel: history
                          href: "/organizations/f6807bb4-fb1e-4ce4-aa28-ba61b2ee4342/history"
                          organizationId: f6807bb4-fb1e-4ce4-aa28-ba61b2ee4342
                          organizationCommonName: BBR
                          organizationName: BBjksdjgjdR
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for organization.  Returns a list of organization ids, based on
        the query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_organizations
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "organization"
                    ],
                    "properties": {
                      "organization": {
                        "type": "object",
                        "required": [
                          "organizationId",
                          "organizationName",
                          "organizationCommonName"
                        ],
                        "properties": {
                          "organizationId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "organizationName": {
                            "type": "string",
                          },
                          "organizationCommonName": {
                            "type": "string",
                          }
                        }
                      }
                    }
                  }
                example:
                  organization:
                    organizationId: 8dff4029-09b7-4293-b24b-b077b39ee673
                    organizationName: BBjksdjgjdR
                    organizationCommonName: BBR
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found â€“ There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a organization
      operationId: POST_organizations
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "organization"
                  ],
                  "properties": {
                    "organization": {
                      "type": "object",
                      "required": [
                        "organizationName",
                        "organizationCommonName"
                      ],
                      "properties": {
                        "organizationName": {
                          "type": "string",
                        },
                        "organizationCommonName": {
                          "type": "string",
                        }
                      }
                    }
                  }
                }
              example:
                  organization:
                    organizationName: BBjksdjgjdR
                    organizationCommonName: BBR
        required: true
  '/organizations/{organizationid}':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "organization"
                    ],
                    "properties": {
                      "organization": {
                        "type": "object",
                        "required": [
                          "links",
                          "organizationId",
                          "organizationName",
                          "organizationCommonName"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "organizationId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "organizationName": {
                            "type": "string",
                          },
                          "organizationCommonName": {
                            "type": "string",
                          }
                        }
                      }
                    }
                  }
                example:
                    organization:
                     links:
                     - rel: history
                       href: "/organizations/8dff4029-09b7-4293-b24b-b077b39ee673/history"
                     organizationId: 8dff4029-09b7-4293-b24b-b077b39ee673
                     organizationName: BBjksdjgjdR
                     organizationCommonName: BBR
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires an user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a organization using a URI resource parameter/ID.
      operationId: GET_organizations-organizationid
    put:
      responses:
        '200':
          description: OK â€“ Everything is working.
        '304':
          description: Not Modified â€“ The client can use cached data.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires a user.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific organization specified by the URI resource
        parameter/ID.
      operationId: PUT_organizations-organizationid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "organization"
                  ],
                  "properties": {
                    "organization": {
                      "type": "object",
                      "required": [
                        "organizationName",
                        "organizationCommonName"
                      ],
                      "properties": {
                        "organizationName": {
                          "type": "string",
                        },
                        "organizationCommonName": {
                          "type": "string",
                        }
                      }
                    }
                  }
                }
              example:
                  organization:
                    organizationName: BBjksdjgjdR
                    organizationCommonName: BBR
        required: true
    delete:
      responses:
        '204':
          description: OK â€“ The resource was successfully deleted.
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '401':
          description: Unauthorized â€“ The request requires user authentication.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific organization specified by the URI resource
        parameter/ID.
      operationId: DELETE_organizations-organizationid
    parameters:
      - name: organizationid
        in: path
        required: true
        schema:
          type: string
        description: Organization Identifier
  '/organizations/{organizationid}/history':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "Organizations"
                    ],
                    "properties": {
                      "Organizations": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "organizations"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "organizations": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "organizationId",
                                "organizationCommonName",
                                "organizationName"
                              ],
                              "properties": {
                                "organizationId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "organizationCommonName": {
                                  "type": "string",
                                },
                                "organizationName": {
                                  "type": "string",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    Organizations:
                      pagination:
                        from: 0
                        returned: 16
                        total: 16
                        maximum: 30
                        sort: {}
                      organizations:
                        - organizationId: 81a20cb3-e000-473c-a3e6-cddcba15a02f
                          organizationCommonName: BBR
                          organizationName: BBjksdjgjdR
                        - organizationId: f6807bb4-fb1e-4ce4-aa28-ba61b2ee4342
                          organizationCommonName: BBR
                          organizationName: BBjksdjgjdR
        '400':
          description: Bad Request â€“ The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden â€“ The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found â€“ There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for organization history.  Returns a list of organization ids history, based on
        the query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_organizations-organizationid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: organizationid
        in: path
        required: true
        schema:
          type: string
        description: Organization Identifier
  '/search/{searchentity}':
    get:
      responses:
        '200':
          description: OK â€“ Everything is working.
          content:
            application/json:
                  schema:
                    {
                      "type": "object",
                      "required": [
                        "searchResults"
                      ],
                      "properties": {
                        "searchResults": {
                          "type": "object",
                          "required": [
                            "pagination",
                            "items"
                          ],
                          "properties": {
                            "pagination": {
                              "type": "object",
                              "required": [
                                "total",
                                "from",
                                "maximum",
                                "returned"
                              ],
                              "properties": {
                                "total": {
                                  "type": "string",
                                },
                                "from": {
                                  "type": "string",
                                },
                                "maximum": {
                                  "type": "string",
                                },
                                "returned": {
                                  "type": "string",
                                }
                              }
                            },
                            "items": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "required": [
                                  "clientId",
                                  "firstName",
                                  "middleName",
                                  "lastName",
                                  "nameSuffix",
                                  "nameDataQuality",
                                  "ssn",
                                  "ssnDataQuality",
                                  "dob",
                                  "dobDataQuality",
                                  "race",
                                  "ethnicity",
                                  "gender",
                                  "otherGender",
                                  "veteranStatus",
                                  "link"
                                ],
                                "properties": {
                                  "clientId": {
                                    "type": "string",
                                    "format": "uuid",
                                  },
                                  "firstName": {
                                    "type": "string",
                                  },
                                  "middleName": {
                                    "type": "string",
                                  },
                                  "lastName": {
                                    "type": "string",
                                  },
                                  "nameSuffix": {
                                    "type": "string",
                                  },
                                  "nameDataQuality": {
                                    "type": "string",
                                  },
                                  "ssn": {
                                    "type": "string",
                                  },
                                  "ssnDataQuality": {
                                    "type": "string",
                                  },
                                  "dob": {
                                    "type": "string",
                                  },
                                  "dobDataQuality": {
                                    "type": "string",
                                  },
                                  "race": {
                                    "type": "string",
                                  },
                                  "ethnicity": {
                                    "type": "string",
                                  },
                                  "gender": {
                                    "type": "string",
                                  },
                                  "otherGender": {
                                    "type": "string",
                                  },
                                  "veteranStatus": {
                                    "type": "string",
                                  },
                                  "link": {
                                    "type": "string",
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  example:
                    {
                      "searchResults": {
                        "pagination": {
                          "total": "2",
                          "from": "0",
                          "maximum": "50",
                          "returned": "2"
                        },
                        "items": [
                          {
                            "clientId": "65e3df62-dd22-4d07-83ef-6858a6322839",
                            "firstName": "Eric",
                            "middleName": "Eric",
                            "lastName": "Eric",
                            "nameSuffix": "NS ",
                            "nameDataQuality": "1",
                            "ssn": "ssn ",
                            "ssnDataQuality": "1",
                            "dob": "1459498034983",
                            "dobDataQuality": "1",
                            "race": "1",
                            "ethnicity": "1",
                            "gender": "1",
                            "otherGender": "Test",
                            "veteranStatus": "8",
                            "link": "/hmis-clientapi/rest/v2015/clients/65e3df62-dd22-4d07-83ef-6858a6322839"
                          },
                          {
                            "clientId": "cf98b9b2-9a77-4133-99a3-b60f05a12ad1",
                            "firstName": "Eric",
                            "middleName": "Eric",
                            "lastName": "Eric",
                            "nameSuffix": "NS ",
                            "nameDataQuality": "1",
                            "ssn": "ssn ",
                            "ssnDataQuality": "1",
                            "dob": "1459498034983",
                            "dobDataQuality": "1",
                            "race": "1",
                            "ethnicity": "1",
                            "gender": "1",
                            "otherGender": "Test",
                            "veteranStatus": "8",
                            "link": "/hmis-clientapi/rest/v2015/clients/cf98b9b2-9a77-4133-99a3-b60f05a12ad1"
                          }
                         ]
                      }
                     }
      description: >
        The Search API is optimized to find the specific entity you're looking
        for (e.g., a client, enrollments, etc.).It's designed to  find the one
        result you're looking for (or maybe the few results you're looking for).
        Currently hmislynk supporting search on 'clients' entity only. Just like
        searching on Google, you sometimes want to see a few pages of search
        results so that you can find the item that best meets your needs.
        HMISLynk Search API provides up to 50 results for each searh. However,
        the search results can be limited by the client. Note: Current
        supporting URI  is /search/clients
      operationId: GET_search-searchentity
      parameters:
        - name: q
          in: query
          required: true
          description: >
            The search keywords, as well as any qualifiers. Currently supported
            search fields are first name,middle name,last name,dob,source system
            id and ssn. For search on "date of birth" field the format
            MM-dd-YYYY should be used for the search keyword.
          schema:
            type: string
        - name: sort
          in: query
          required: true
          description: The sort field. Default- results are sorted by "created date".
          schema:
            type: string
        - name: order
          in: query
          required: true
          description: >-
            The sort order if sort parameter is provided. One of asc or desc.
            Default- desc.
          schema:
            default: desc
            type: string
        - name: startIndex
          in: query
          required: true
          description: >-
            The start Index from where the search results should be returned.
            Default - 0
          schema:
            default: 0
            type: integer
        - name: maxItems
          in: query
          required: true
          description: >-
            the number or Items that should be included in the results . Default
            - 50
          schema:
            default: 50
            type: integer
        - name: exclude
          in: query
          required: true
          description: >
            Excludes flieds from the search.Currently it suppoted value is "ssi"
            (to exclude         source system id) only.
          schema:
            type: string
    parameters:
      - name: searchentity
        in: path
        required: true
        schema:
          type: string
  /dataelements:
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "dataElements"
                    ],
                    "properties": {
                      "dataElements": {
                        "type": "object",
                        "required": [
                          "dataElements"
                        ],
                        "properties": {
                          "dataElements": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "name": {
                                  "type": "string",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                  dataElements:
                    dataElements:
                      - name: trackingmethod
                      - name: afghanistan_oef
                      - name: projectcompletionstatus
                      - name: nohivaidsassistancereason
                      - name: not_employed_reason
                      - name: noemployerprovidedreason
                      - name: novamedreason
                      - name: health_category
                      - name: employment_type
                      - name: lastgradecompleted
                      - name: referraloutcome
                      - name: housingstatus
                      - name: monthsHomelessThisTime
                      - name: pathsmiinformation
                      - name: timesHomelesspastthreeyears
                      - name: targetpopulation
                      - name: nostatehealthinsreason
                      - name: incarceratedparentstatus
                      - name: youth_age_group
                      - name: juvenilejusticeyears
                      - name: subsidyinformation
                      - name: whenoccurred
                      - name: nomedicaidreason
                      - name: monthsHomelessPastThreeYears
                      - name: sexualorientation
                      - name: childwelfareyears
                      - name: nocobrareason
                      - name: discharge_status
                      - name: gender
                      - name: availabilty
                      - name: military_branch
                      - name: referralsource
                      - name: noprivatepayreason
                      - name: householdtype
                      - name: pathhowconfirmed
                      - name: reason_no_services
                      - name: name_data_quality
                      - name: countofexchangeforsex
                      - name: askedorforcedtoexchangeforsex
                      - name: residencepriorlengthofstay
                      - name: dob_data_quality
                      - name: destination
                      - name: projecttype
                      - name: assessmentdisposition
                      - name: earlyexitreason
                      - name: reason_not_enrolled
                      - name: bedtype
                      - name: veteran_status
                      - name: funder
                      - name: relationshiptohoh
                      - name: health_status
                      - name: ethnicity
                      - name: noschipreason
                      - name: address_data_quality
                      - name: disabilitytype
                      - name: nomedicarereason
                      - name: housingassessment
                      - name: residencePrior
                      - name: ssn_data_quality
                      - name: noadapreason
                      - name: race
      operationId: GET_dataelements
  '/dataelements/{name}/values':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "dataElements"
                    ],
                    "properties": {
                      "dataElements": {
                        "type": "object",
                        "required": [
                          "dataElements"
                        ],
                        "properties": {
                          "dataElements": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "name",
                                "value",
                                "description"
                              ],
                              "properties": {
                                "name": {
                                  "type": "string",
                                },
                                "value": {
                                  "type": "string",
                                },
                                "description": {
                                  "type": "string",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                  dataElements:
                    dataElements:
                      - name: address_data_quality
                        value: '1'
                        description: Full address reported
                      - name: address_data_quality
                        value: '2'
                        description: Incomplete or estimated address reported
                      - name: address_data_quality
                        value: '8'
                        description: Client doesn't know
                      - name: address_data_quality
                        value: '9'
                        description: Client refused
                      - name: address_data_quality
                        value: '99'
                        description: Data not collected
      operationId: GET_dataelements-name-values
    parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
  /questions:
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "questions"
                    ],
                    "properties": {
                      "questions": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "questions"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "questions": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "questionId",
                                "questionDescription",
                                "displayText",
                                "questionDataType",
                                "questionType",
                                "picklistGroupName",
                                "hudQuestionId",
                                "links"
                              ],
                              "properties": {
                                "questionId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "questionDescription": {
                                  "type": "string",
                                },
                                "displayText": {
                                  "type": "string",
                                },
                                "questionDataType": {
                                  "type": "string",
                                },
                                "questionType": {
                                  "type": "string",
                                },
                                "picklistGroupName": {
                                  "type": "string",
                                },
                                "hudQuestionId": {
                                  "type": "string",
                                },
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                  questions:
                    pagination:
                      from: 0
                      returned: 1
                      total: 2
                      maximum: 200
                      sort: {}
                    questions:
                      - questionId: 273ec115-4a6a-4919-84e3-b8a0515fd2a7
                        questionDescription: >-
                          How long has it been since you lived in permanent
                          stable housing?
                        displayText: >-
                          2. How long has it been since you lived in permanent
                          stable housing ?
                        questionDataType: STRING
                        questionType: TEXT
                        picklistGroupName: housingstatus
                        hudQuestionId: '2'
                        links:
                          - rel: pickList
                            href: >-
                              /hmis-clientapi/rest/v2015/hmistypes/housingstatus/values
                          - rel: updateUriTemplate
                            href: '/v2015/clients/{clientid}/enrollments'
      operationId: GET_questions
      parameters:
        - name: text
          in: query
          description: filter on actual question text ( displayText )
          schema:
            type: string
  '/questions/{hudquestionid}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "question"
                    ],
                    "properties": {
                      "question": {
                        "type": "object",
                        "required": [
                          "questionId",
                          "questionDescription",
                          "displayText",
                          "questionDataType",
                          "questionType",
                          "picklistGroupName",
                          "hudQuestionId",
                          "links"
                        ],
                        "properties": {
                          "questionId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "questionDescription": {
                            "type": "string",
                          },
                          "displayText": {
                            "type": "string",
                          },
                          "questionDataType": {
                            "type": "string",
                          },
                          "questionType": {
                            "type": "string",
                          },
                          "picklistGroupName": {
                            "type": "string",
                          },
                          "hudQuestionId": {
                            "type": "string",
                          },
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                  question:
                    questionId: 273ec115-4a6a-4919-84e3-b8a0515fd2a7
                    questionDescription: >-
                      How long has it been since you lived in permanent stable
                      housing?
                    displayText: >-
                      2. How long has it been since you lived in permanent
                      stable housing ?
                    questionDataType: STRING
                    questionType: TEXT
                    picklistGroupName: housingstatus
                    hudQuestionId: '2'
                    links:
                      - rel: pickList
                        href: >-
                          /hmis-clientapi/rest/v2015/hmistypes/housingstatus/values
                      - rel: updateUriTemplate
                        href: '/v2015/clients/{clientid}/enrollments'
      operationId: GET_questions-hudQuestionId
    parameters:
      - name: hudquestionid
        in: path
        required: true
        schema:
          type: string
  /hmishouseholds:
    post:
      description: Create a house hold
      operationId: POST_hmis_household
      requestBody:
        required: true
        content:
          application/json:
             schema:
                {
                  "type": "object",
                  "required": [
                    "hmisHousehold"
                  ],
                  "properties": {
                    "hmisHousehold": {
                      "type": "object",
                      "required": [
                        "headOfHouseHold"
                      ],
                      "properties": {
                        "headOfHouseHold": {
                          "type": "object",
                          "required": [
                            "clientId"
                          ],
                          "properties": {
                            "clientId": {
                              "type": "string",
                              "format": "uuid",
                            }
                          }
                        }
                      }
                    }
                  }
                }
             example:
                hmisHousehold:
                  headOfHouseHold:
                    clientId: eac0fc00-f727-11e6-bdda-06c37be0e663
      responses:
        '200':
          description: Success
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "hmisHousehold"
                    ],
                    "properties": {
                      "hmisHousehold": {
                        "type": "object",
                        "required": [
                          "houseHoldId",
                          "houseHoldMembers"
                        ],
                        "properties": {
                          "houseHoldId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "houseHoldMembers": {
                            "type": "array",
                            "items":{

                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    hmisHousehold:
                      houseHoldId: 54fbbff7-24a3-489e-bc70-eda3ae6f273f
                      houseHoldMembers: []
    get:
      responses:
        '200':
          description: Success
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "hmisHouseholds"
                    ],
                    "properties": {
                      "hmisHouseholds": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "hmisHouseholds"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "hmisHouseholds": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "houseHoldId",
                                "headOfHouseHold",
                                "houseHoldMembers"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "houseHoldId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "headOfHouseHold": {
                                  "type": "object",
                                  "required": [
                                    "links",
                                    "clientId",
                                    "dedupClientId",
                                    "firstName",
                                    "middleName",
                                    "lastName",
                                    "nameSuffix",
                                    "nameDataQuality",
                                    "ssn",
                                    "ssnDataQuality",
                                    "dob",
                                    "dobDataQuality",
                                    "race",
                                    "ethnicity",
                                    "gender"
                                  ],
                                  "properties": {
                                    "links": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "rel",
                                          "href"
                                        ],
                                        "properties": {
                                          "rel": {
                                            "type": "string",
                                          },
                                          "href": {
                                            "type": "string",
                                          }
                                        }
                                      }
                                    },
                                    "clientId": {
                                      "type": "string",
                                      "format": "uuid",
                                    },
                                    "dedupClientId": {
                                      "type": "string",
                                      "format": "uuid",
                                    },
                                    "firstName": {
                                      "type": "string",
                                    },
                                    "middleName": {
                                      "type": "string",
                                    },
                                    "lastName": {
                                      "type": "string",
                                    },
                                    "nameSuffix": {
                                      "type": "string",
                                    },
                                    "nameDataQuality": {
                                      "type": "integer"
                                    },
                                    "ssn": {
                                      "type": "string",
                                    },
                                    "ssnDataQuality": {
                                      "type": "integer"
                                    },
                                    "dob": {
                                      "type": "integer"
                                    },
                                    "dobDataQuality": {
                                      "type": "integer"
                                    },
                                    "race": {
                                      "type": "integer"
                                    },
                                    "ethnicity": {
                                      "type": "integer"
                                    },
                                    "gender": {
                                      "type": "integer"
                                    }
                                  }
                                },
                                "houseHoldMembers": {
                                  "type": "array",
                                  "items":{

                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    hmisHouseholds:
                      pagination:
                        from: 0
                        returned: 2
                        total: 2
                        maximum: 30
                        sort: {}
                      hmisHouseholds:
                      - links:
                        - rel: enrollments
                          href: "/hmis-clientapi/rest/v2015/clients/e708f7f8-c6b4-41ba-b6f0-2bf352c08bbb/enrollments"
                        houseHoldId: 36506eb5-6e04-4f2e-9630-01f05d9e841c
                        headOfHouseHold:
                          links:
                          - rel: history
                            href: "/client/e708f7f8-c6b4-41ba-b6f0-2bf352c08bbb/history"
                          clientId: e708f7f8-c6b4-41ba-b6f0-2bf352c08bbb
                          dedupClientId: eac0fc00-f727-11e6-bdda-06c37be0e663
                          firstName: Jeanette_1577809805634
                          middleName: ''
                          lastName: Gonzales
                          nameSuffix: ''
                          nameDataQuality: 99
                          ssn: 556-55-2266
                          ssnDataQuality: 1
                          dob: 259977600000
                          dobDataQuality: 1
                          race: 5
                          ethnicity: 0
                          gender: 0
                        houseHoldMembers: []
                      - links:
                        - rel: enrollments
                          href: "/hmis-clientapi/rest/v2015/clients/ed0c2e27-d019-46f3-80ee-4e5c8bd0af84/enrollments"
                        houseHoldId: ed0c2e27-d019-46f3-80ee-4e5c8bd0af84
                        headOfHouseHold:
                          links:
                          - rel: history
                            href: "/client/ed0c2e27-d019-46f3-80ee-4e5c8bd0af84/history"
                          clientId: ed0c2e27-d019-46f3-80ee-4e5c8bd0af84
                          dedupClientId: eac0fc00-f727-11e6-bdda-06c37be0e663
                          firstName: Jeanette_1577809805634
                          middleName: ''
                          lastName: Gonzales
                          nameSuffix: ''
                          nameDataQuality: 99
                          ssn: 556-55-2266
                          ssnDataQuality: 1
                          dob: 259977600000
                          dobDataQuality: 1
                          race: 5
                          ethnicity: 0
                          gender: 0
                        houseHoldMembers:
                        - links:
                          - rel: enrollments
                            href: "/hmis-clientapi/rest/v2015/clients/9c7853d0-4749-490c-8b72-aa880355ec3f/enrollments"
                          houseHoldMemberId: d6bcdf5b-2f99-4ccc-8f92-8c33c9a2674f
                          member:
                            links:
                            - rel: history
                              href: "/client/9c7853d0-4749-490c-8b72-aa880355ec3f/history"
                            clientId: 9c7853d0-4749-490c-8b72-aa880355ec3f
                            dedupClientId: eac0fc00-f727-11e6-bdda-06c37be0e663
                            firstName: Jeanette_1577809805634
                            middleName: ''
                            lastName: Gonzales
                            nameSuffix: ''
                            nameDataQuality: 99
                            ssn: 556-55-2266
                            ssnDataQuality: 1
                            dob: 259977600000
                            dobDataQuality: 1
                            race: 5
                            ethnicity: 0
                            gender: 0
                          houseHoldId: faaf6863-c426-42f6-ae26-f7105b285f0c
                          relationWithHouseHold: father

      description: Get all households
      operationId: GET_house_holds
  '/hmishouseholds/{householdid}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "hmisHousehold"
                    ],
                    "properties": {
                      "hmisHousehold": {
                        "type": "object",
                        "required": [
                          "links",
                          "houseHoldId",
                          "headOfHouseHold",
                          "houseHoldMembers"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "houseHoldId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "headOfHouseHold": {
                            "type": "object",
                            "required": [
                              "links",
                              "clientId",
                              "dedupClientId",
                              "firstName",
                              "middleName",
                              "lastName",
                              "nameSuffix",
                              "nameDataQuality",
                              "ssn",
                              "ssnDataQuality",
                              "dob",
                              "dobDataQuality",
                              "race",
                              "ethnicity",
                              "gender"
                            ],
                            "properties": {
                              "links": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "required": [
                                    "rel",
                                    "href"
                                  ],
                                  "properties": {
                                    "rel": {
                                      "type": "string",
                                    },
                                    "href": {
                                      "type": "string",
                                    }
                                  }
                                }
                              },
                              "clientId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "dedupClientId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "firstName": {
                                "type": "string",
                              },
                              "middleName": {
                                "type": "string",
                              },
                              "lastName": {
                                "type": "string",
                              },
                              "nameSuffix": {
                                "type": "string",
                              },
                              "nameDataQuality": {
                                "type": "integer"
                              },
                              "ssn": {
                                "type": "string",
                              },
                              "ssnDataQuality": {
                                "type": "integer"
                              },
                              "dob": {
                                "type": "integer"
                              },
                              "dobDataQuality": {
                                "type": "integer"
                              },
                              "race": {
                                "type": "integer"
                              },
                              "ethnicity": {
                                "type": "integer"
                              },
                              "gender": {
                                "type": "integer"
                              }
                            }
                          },
                          "houseHoldMembers": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "houseHoldMemberId",
                                "member",
                                "relationWithHouseHold",
                                "houseHoldId"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "houseHoldMemberId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "member": {
                                  "type": "object",
                                  "required": [
                                    "links",
                                    "clientId",
                                    "dedupClientId",
                                    "firstName",
                                    "middleName",
                                    "lastName",
                                    "nameSuffix",
                                    "nameDataQuality",
                                    "ssn",
                                    "ssnDataQuality",
                                    "dob",
                                    "dobDataQuality",
                                    "race",
                                    "ethnicity",
                                    "gender"
                                  ],
                                  "properties": {
                                    "links": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "rel",
                                          "href"
                                        ],
                                        "properties": {
                                          "rel": {
                                            "type": "string",
                                          },
                                          "href": {
                                            "type": "string",
                                          }
                                        }
                                      }
                                    },
                                    "clientId": {
                                      "type": "string",
                                      "format": "uuid",
                                    },
                                    "dedupClientId": {
                                      "type": "string",
                                      "format": "uuid",
                                    },
                                    "firstName": {
                                      "type": "string",
                                    },
                                    "middleName": {
                                      "type": "string",
                                    },
                                    "lastName": {
                                      "type": "string",
                                    },
                                    "nameSuffix": {
                                      "type": "string",
                                    },
                                    "nameDataQuality": {
                                      "type": "integer"
                                    },
                                    "ssn": {
                                      "type": "string",
                                    },
                                    "ssnDataQuality": {
                                      "type": "integer"
                                    },
                                    "dob": {
                                      "type": "integer"
                                    },
                                    "dobDataQuality": {
                                      "type": "integer"
                                    },
                                    "race": {
                                      "type": "integer"
                                    },
                                    "ethnicity": {
                                      "type": "integer"
                                    },
                                    "gender": {
                                      "type": "integer"
                                    }
                                  }
                                },
                                "relationWithHouseHold": {
                                  "type": "string",
                                },
                                "houseHoldId": {
                                  "type": "string",
                                  "format": "uuid",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    hmisHousehold:
                      links:
                      - rel: enrollments
                        href: "/hmis-clientapi/rest/v2015/clients/fd3bd080-8243-438d-bb3c-430097a6b7a3/enrollments"
                      houseHoldId: 54fbbff7-24a3-489e-bc70-eda3ae6f273f
                      headOfHouseHold:
                        links:
                        - rel: history
                          href: "/client/fd3bd080-8243-438d-bb3c-430097a6b7a3/history"
                        clientId: fd3bd080-8243-438d-bb3c-430097a6b7a3
                        dedupClientId: eac0fc00-f727-11e6-bdda-06c37be0e663
                        firstName: Jeanette_1577805760728
                        middleName: ''
                        lastName: Gonzales
                        nameSuffix: ''
                        nameDataQuality: 99
                        ssn: 556-55-2266
                        ssnDataQuality: 1
                        dob: 259977600000
                        dobDataQuality: 1
                        race: 5
                        ethnicity: 0
                        gender: 0
                      houseHoldMembers:
                      - links:
                        - rel: enrollments
                          href: "/hmis-clientapi/rest/v2015/clients/6e6ab7f1-e8fe-4784-93c4-248d97a17ef0/enrollments"
                        houseHoldMemberId: b3053a0c-1562-470c-a9c9-c28c9e9ee701
                        member:
                          links:
                          - rel: history
                            href: "/client/6e6ab7f1-e8fe-4784-93c4-248d97a17ef0/history"
                          clientId: 6e6ab7f1-e8fe-4784-93c4-248d97a17ef0
                          dedupClientId: eac0fc00-f727-11e6-bdda-06c37be0e663
                          firstName: Jeanette_1577805760728
                          middleName: ''
                          lastName: Gonzales
                          nameSuffix: ''
                          nameDataQuality: 99
                          ssn: 556-55-2266
                          ssnDataQuality: 1
                          dob: 259977600000
                          dobDataQuality: 1
                          race: 5
                          ethnicity: 0
                          gender: 0
                        relationWithHouseHold: mother
                        houseHoldId: 54fbbff7-24a3-489e-bc70-eda3ae6f273f
                      - links:
                        - rel: enrollments
                          href: "/hmis-clientapi/rest/v2015/clients/174660d8-c1de-49cc-9bd6-788f099d38fc/enrollments"
                        houseHoldMemberId: 068824d0-735d-41e0-abb1-eb34826a4024
                        member:
                          links:
                          - rel: history
                            href: "/client/174660d8-c1de-49cc-9bd6-788f099d38fc/history"
                          clientId: 174660d8-c1de-49cc-9bd6-788f099d38fc
                          dedupClientId: eac0fc00-f727-11e6-bdda-06c37be0e663
                          firstName: Jeanette_1577805760728
                          middleName: ''
                          lastName: Gonzales
                          nameSuffix: ''
                          nameDataQuality: 99
                          ssn: 556-55-2266
                          ssnDataQuality: 1
                          dob: 259977600000
                          dobDataQuality: 1
                          race: 5
                          ethnicity: 0
                          gender: 0
                        relationWithHouseHold: mother
                        houseHoldId: 54fbbff7-24a3-489e-bc70-eda3ae6f273f
      description: Get selected household
      operationId: GET_household_by_id
    parameters:
      - name: householdid
        in: path
        required: true
        schema:
          type: string
  '/hmishouseholds/{householdid}/members':
    put:
      responses:
        '200':
          description: ''
      description: Add member to selected household
      operationId: PUT_member_household
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "houseHoldMember"
                  ],
                  "properties": {
                    "houseHoldMember": {
                      "type": "object",
                      "required": [
                        "member",
                        "relationWithHouseHold"
                      ],
                      "properties": {
                        "member": {
                          "type": "object",
                          "required": [
                            "clientId"
                          ],
                          "properties": {
                            "clientId": {
                              "type": "string",
                              "format": "uuid",
                            }
                          }
                        },
                        "relationWithHouseHold": {
                          "type": "string",
                        }
                      }
                    }
                  }
                }
              example:
                    houseHoldMember:
                      member:
                        clientId: 34a6fcd7-9626-46cd-a79a-fe740ce57826
                      relationWithHouseHold: father
        required: true
    parameters:
      - name: householdid
        in: path
        required: true
        schema:
          type: string
  '/hmishouseholds/{householdid}/members/{memberid}':
    delete:
      responses:
        '200':
          description: ''
      description: Remove member from selected house hold based on member clientid
      operationId: DELETE_member_house_hold
    parameters:
      - name: householdid
        in: path
        required: true
        schema:
          type: string
      - name: memberid
        in: path
        required: true
        schema:
          type: string
components:

  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes:
    oauth_2_0:
      description: |
        The HMIS API supports OAuth 2.0 for authenticating all API requests.
      type: oauth2
      flows:
        password:
          tokenUrl: 'https://hmislynk.com/hmis-authorization-service/rest/token'
          scopes:
            user: ''
            administrator: ''
  links: {}
  callbacks: {}
